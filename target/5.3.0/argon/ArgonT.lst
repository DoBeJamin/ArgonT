
c:/Users/benja/OneDrive/Desktop/visualStudioCode/summerIOT/Capstone/ArgonT/target/5.3.0/argon/ArgonT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000050c4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b90e0  000b90e0  000090e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000074  2003e53c  000b9104  0000e53c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000240  2003e5b0  2003e5b0  0001e5b0  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b9178  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b917c  000b917c  0001917c  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b9182  000b9182  00019182  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b91a6  000b91a6  000191a6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00147698  00000000  00000000  000191aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00015c87  00000000  00000000  00160842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0004216a  00000000  00000000  001764c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003648  00000000  00000000  001b8633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000bb88  00000000  00000000  001bbc7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003bd15  00000000  00000000  001c7803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00047896  00000000  00000000  00203518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001403e9  00000000  00000000  0024adae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00009b2c  00000000  00000000  0038b198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strcmp>:
   b401c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4020:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4024:	2a01      	cmp	r2, #1
   b4026:	bf28      	it	cs
   b4028:	429a      	cmpcs	r2, r3
   b402a:	d0f7      	beq.n	b401c <strcmp>
   b402c:	1ad0      	subs	r0, r2, r3
   b402e:	4770      	bx	lr

000b4030 <strlen>:
   b4030:	4603      	mov	r3, r0
   b4032:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4036:	2a00      	cmp	r2, #0
   b4038:	d1fb      	bne.n	b4032 <strlen+0x2>
   b403a:	1a18      	subs	r0, r3, r0
   b403c:	3801      	subs	r0, #1
   b403e:	4770      	bx	lr

000b4040 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4040:	4809      	ldr	r0, [pc, #36]	; (b4068 <module_user_pre_init+0x28>)
   b4042:	490a      	ldr	r1, [pc, #40]	; (b406c <module_user_pre_init+0x2c>)
   b4044:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4046:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4048:	d005      	beq.n	b4056 <module_user_pre_init+0x16>
   b404a:	4a09      	ldr	r2, [pc, #36]	; (b4070 <module_user_pre_init+0x30>)
   b404c:	4282      	cmp	r2, r0
   b404e:	d002      	beq.n	b4056 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4050:	1a12      	subs	r2, r2, r0
   b4052:	f004 fa97 	bl	b8584 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4056:	4807      	ldr	r0, [pc, #28]	; (b4074 <module_user_pre_init+0x34>)
   b4058:	4a07      	ldr	r2, [pc, #28]	; (b4078 <module_user_pre_init+0x38>)
   b405a:	2100      	movs	r1, #0
   b405c:	1a12      	subs	r2, r2, r0
   b405e:	f004 fab9 	bl	b85d4 <memset>
    return &link_global_data_start;
}
   b4062:	4801      	ldr	r0, [pc, #4]	; (b4068 <module_user_pre_init+0x28>)
   b4064:	bd08      	pop	{r3, pc}
   b4066:	bf00      	nop
   b4068:	2003e53c 	.word	0x2003e53c
   b406c:	000b9104 	.word	0x000b9104
   b4070:	2003e5b0 	.word	0x2003e5b0
   b4074:	2003e5b0 	.word	0x2003e5b0
   b4078:	2003e7f0 	.word	0x2003e7f0

000b407c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b407c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b407e:	4e07      	ldr	r6, [pc, #28]	; (b409c <module_user_init+0x20>)
   b4080:	4c07      	ldr	r4, [pc, #28]	; (b40a0 <module_user_init+0x24>)
    module_user_init_hook();
   b4082:	f003 f8ef 	bl	b7264 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4086:	1ba4      	subs	r4, r4, r6
   b4088:	08a4      	lsrs	r4, r4, #2
   b408a:	2500      	movs	r5, #0
   b408c:	42ac      	cmp	r4, r5
   b408e:	d100      	bne.n	b4092 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4090:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4092:	f856 3b04 	ldr.w	r3, [r6], #4
   b4096:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4098:	3501      	adds	r5, #1
   b409a:	e7f7      	b.n	b408c <module_user_init+0x10>
   b409c:	000b90bc 	.word	0x000b90bc
   b40a0:	000b90e0 	.word	0x000b90e0

000b40a4 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b40a4:	f000 b8b6 	b.w	b4214 <setup>

000b40a8 <module_user_loop>:
}

void module_user_loop() {
   b40a8:	b508      	push	{r3, lr}
    loop();
   b40aa:	f000 f90f 	bl	b42cc <loop>
    _post_loop();
}
   b40ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b40b2:	f003 b88f 	b.w	b71d4 <_post_loop>

000b40b6 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b40b6:	f000 bfad 	b.w	b5014 <malloc>

000b40ba <_Znaj>:
   b40ba:	f000 bfab 	b.w	b5014 <malloc>

000b40be <_ZdaPv>:
   b40be:	f000 bfb1 	b.w	b5024 <free>

000b40c2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40c2:	f000 bfaf 	b.w	b5024 <free>
	...

000b40c8 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40c8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40ca:	4a03      	ldr	r2, [pc, #12]	; (b40d8 <__cxa_pure_virtual+0x10>)
   b40cc:	4903      	ldr	r1, [pc, #12]	; (b40dc <__cxa_pure_virtual+0x14>)
   b40ce:	200c      	movs	r0, #12
   b40d0:	f000 fee4 	bl	b4e9c <panic_>
  while (1);
   b40d4:	e7fe      	b.n	b40d4 <__cxa_pure_virtual+0xc>
   b40d6:	bf00      	nop
   b40d8:	000b4ae5 	.word	0x000b4ae5
   b40dc:	000b88f8 	.word	0x000b88f8

000b40e0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40e0:	7800      	ldrb	r0, [r0, #0]
   b40e2:	fab0 f080 	clz	r0, r0
   b40e6:	0940      	lsrs	r0, r0, #5
   b40e8:	4770      	bx	lr

000b40ea <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ea:	2301      	movs	r3, #1
   b40ec:	7003      	strb	r3, [r0, #0]
   b40ee:	4770      	bx	lr

000b40f0 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40f0:	4770      	bx	lr

000b40f2 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40f2:	4770      	bx	lr

000b40f4 <_Z8callbackPcPhj>:
SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(MANUAL);


//MQTT
void callback(char *topic, byte *payload, unsigned int length) {};
   b40f4:	4770      	bx	lr

000b40f6 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b40f6:	b510      	push	{r4, lr}
  }
   b40f8:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b40fa:	4604      	mov	r4, r0
  }
   b40fc:	f7ff ffe1 	bl	b40c2 <_ZdlPvj>
   b4100:	4620      	mov	r0, r4
   b4102:	bd10      	pop	{r4, pc}

000b4104 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4104:	4b0a      	ldr	r3, [pc, #40]	; (b4130 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b4106:	b510      	push	{r4, lr}
   b4108:	4604      	mov	r4, r0
   b410a:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b410c:	f002 f9e2 	bl	b64d4 <_ZN5spark10LogManager8instanceEv>
   b4110:	4621      	mov	r1, r4
   b4112:	f002 fc1a 	bl	b694a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4116:	f003 f9c7 	bl	b74a8 <_Z16_fetch_usbserialv>
   b411a:	f003 f9b9 	bl	b7490 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b411e:	4620      	mov	r0, r4
   b4120:	4b04      	ldr	r3, [pc, #16]	; (b4134 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b4122:	f840 3b04 	str.w	r3, [r0], #4
   b4126:	f002 faab 	bl	b6680 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b412a:	4620      	mov	r0, r4
   b412c:	bd10      	pop	{r4, pc}
   b412e:	bf00      	nop
   b4130:	000b8a00 	.word	0x000b8a00
   b4134:	000b89e8 	.word	0x000b89e8

000b4138 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b4138:	b510      	push	{r4, lr}
   b413a:	4604      	mov	r4, r0
    }
   b413c:	f7ff ffe2 	bl	b4104 <_ZN5spark16SerialLogHandlerD1Ev>
   b4140:	4620      	mov	r0, r4
   b4142:	2124      	movs	r1, #36	; 0x24
   b4144:	f7ff ffbd 	bl	b40c2 <_ZdlPvj>
   b4148:	4620      	mov	r0, r4
   b414a:	bd10      	pop	{r4, pc}

000b414c <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b414c:	b40e      	push	{r1, r2, r3}
   b414e:	b503      	push	{r0, r1, lr}
   b4150:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4152:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4154:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4158:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b415a:	f002 f804 	bl	b6166 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b415e:	b002      	add	sp, #8
   b4160:	f85d eb04 	ldr.w	lr, [sp], #4
   b4164:	b003      	add	sp, #12
   b4166:	4770      	bx	lr

000b4168 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4168:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b416a:	4604      	mov	r4, r0
   b416c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b416e:	7922      	ldrb	r2, [r4, #4]
   b4170:	68a3      	ldr	r3, [r4, #8]
   b4172:	b132      	cbz	r2, b4182 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4174:	b9a3      	cbnz	r3, b41a0 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4176:	490b      	ldr	r1, [pc, #44]	; (b41a4 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4178:	b002      	add	sp, #8
   b417a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b417e:	f001 bfb7 	b.w	b60f0 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4182:	4a09      	ldr	r2, [pc, #36]	; (b41a8 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4184:	7b26      	ldrb	r6, [r4, #12]
   b4186:	4d09      	ldr	r5, [pc, #36]	; (b41ac <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4188:	4909      	ldr	r1, [pc, #36]	; (b41b0 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b418a:	7b64      	ldrb	r4, [r4, #13]
   b418c:	2e01      	cmp	r6, #1
   b418e:	bf18      	it	ne
   b4190:	4629      	movne	r1, r5
   b4192:	e9cd 1400 	strd	r1, r4, [sp]
   b4196:	4907      	ldr	r1, [pc, #28]	; (b41b4 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4198:	f7ff ffd8 	bl	b414c <_ZN5Print6printfEPKcz>
  }
   b419c:	b002      	add	sp, #8
   b419e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b41a0:	4a05      	ldr	r2, [pc, #20]	; (b41b8 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b41a2:	e7ef      	b.n	b4184 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b41a4:	000b891e 	.word	0x000b891e
   b41a8:	000b8be6 	.word	0x000b8be6
   b41ac:	000b891a 	.word	0x000b891a
   b41b0:	000b8916 	.word	0x000b8916
   b41b4:	000b8934 	.word	0x000b8934
   b41b8:	000b890d 	.word	0x000b890d

000b41bc <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b41bc:	b40e      	push	{r1, r2, r3}
   b41be:	b500      	push	{lr}
   b41c0:	b08c      	sub	sp, #48	; 0x30
   b41c2:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b41c4:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b41c8:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b41cc:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b41ce:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b41d2:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b41d4:	6801      	ldr	r1, [r0, #0]
   b41d6:	aa04      	add	r2, sp, #16
   b41d8:	201e      	movs	r0, #30
    attr.flags = 0;
   b41da:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b41de:	f000 fe6d 	bl	b4ebc <log_message_v>
}
   b41e2:	b00c      	add	sp, #48	; 0x30
   b41e4:	f85d eb04 	ldr.w	lr, [sp], #4
   b41e8:	b003      	add	sp, #12
   b41ea:	4770      	bx	lr

000b41ec <_Z17connectedCallbackRKN8particle13BlePeerDeviceEPv>:
		client.publish("BAR/argonT/accel/z", zs);

	}
}


   b41ec:	b508      	push	{r3, lr}
void connectedCallback(const BlePeerDevice& peer, void* context) {
   b41ee:	4902      	ldr	r1, [pc, #8]	; (b41f8 <_Z17connectedCallbackRKN8particle13BlePeerDeviceEPv+0xc>)
   b41f0:	4802      	ldr	r0, [pc, #8]	; (b41fc <_Z17connectedCallbackRKN8particle13BlePeerDeviceEPv+0x10>)
   b41f2:	f7ff ffe3 	bl	b41bc <_ZNK5spark6Logger4infoEPKcz>
	Log.info("connected");

   b41f6:	bd08      	pop	{r3, pc}
   b41f8:	000b8b5b 	.word	0x000b8b5b
   b41fc:	2003e6b8 	.word	0x2003e6b8

000b4200 <_Z20disconnectedCallbackRKN8particle13BlePeerDeviceEPv>:
}

   b4200:	b508      	push	{r3, lr}
void disconnectedCallback(const BlePeerDevice& peer, void* context) {
   b4202:	4902      	ldr	r1, [pc, #8]	; (b420c <_Z20disconnectedCallbackRKN8particle13BlePeerDeviceEPv+0xc>)
   b4204:	4802      	ldr	r0, [pc, #8]	; (b4210 <_Z20disconnectedCallbackRKN8particle13BlePeerDeviceEPv+0x10>)
   b4206:	f7ff ffd9 	bl	b41bc <_ZNK5spark6Logger4infoEPKcz>
	Log.info("disconnected");

   b420a:	bd08      	pop	{r3, pc}
   b420c:	000b8951 	.word	0x000b8951
   b4210:	2003e6b8 	.word	0x2003e6b8

000b4214 <setup>:
void setup() {
   b4214:	b570      	push	{r4, r5, r6, lr}
   b4216:	b094      	sub	sp, #80	; 0x50
	LIS3DHConfig config;
   b4218:	a804      	add	r0, sp, #16
   b421a:	f000 fb68 	bl	b48ee <_ZN12LIS3DHConfigC1Ev>
	config.setAccelMode(LIS3DH::RATE_100_HZ);
   b421e:	2150      	movs	r1, #80	; 0x50
   b4220:	a804      	add	r0, sp, #16
   b4222:	f000 fb71 	bl	b4908 <_ZN12LIS3DHConfig12setAccelModeEh>
	accel.setup(config);
   b4226:	a904      	add	r1, sp, #16
   b4228:	4824      	ldr	r0, [pc, #144]	; (b42bc <setup+0xa8>)
   b422a:	4c25      	ldr	r4, [pc, #148]	; (b42c0 <setup+0xac>)
   b422c:	f000 fbce 	bl	b49cc <_ZN6LIS3DH5setupER12LIS3DHConfig>
	BLE.on();
   b4230:	f001 fb44 	bl	b58bc <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4234:	f001 fb5e 	bl	b58f4 <_ZNK8particle14BleLocalDevice2onEv>
	BLE.onConnected(connectedCallback, NULL);
   b4238:	f001 fb40 	bl	b58bc <_ZN8particle14BleLocalDevice11getInstanceEv>
   b423c:	4921      	ldr	r1, [pc, #132]	; (b42c4 <setup+0xb0>)
   b423e:	2200      	movs	r2, #0
   b4240:	f001 ff07 	bl	b6052 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
	BLE.onDisconnected(disconnectedCallback, NULL);
   b4244:	f001 fb3a 	bl	b58bc <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4248:	491f      	ldr	r1, [pc, #124]	; (b42c8 <setup+0xb4>)
   b424a:	2200      	movs	r2, #0
   b424c:	f001 fee2 	bl	b6014 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
    BleAdvertisingData advData;
   b4250:	a807      	add	r0, sp, #28
   b4252:	f001 fd29 	bl	b5ca8 <_ZN8particle18BleAdvertisingDataC1Ev>
    advData.appendServiceUUID(serviceUuid);
   b4256:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4258:	ad0a      	add	r5, sp, #40	; 0x28
   b425a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b425c:	ad0a      	add	r5, sp, #40	; 0x28
   b425e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4260:	6826      	ldr	r6, [r4, #0]
   b4262:	ac0f      	add	r4, sp, #60	; 0x3c
   b4264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4266:	a80f      	add	r0, sp, #60	; 0x3c
        BleUuid tempUUID(uuid);
   b4268:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b426a:	f001 fa07 	bl	b567c <_ZNK8particle7BleUuid4typeEv>
   b426e:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b4270:	a80f      	add	r0, sp, #60	; 0x3c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4272:	b9dc      	cbnz	r4, b42ac <setup+0x98>
            uint16_t uuid16 = tempUUID.shorted();
   b4274:	f001 fa04 	bl	b5680 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4278:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b427a:	f8ad 000e 	strh.w	r0, [sp, #14]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b427e:	2302      	movs	r3, #2
   b4280:	f10d 020e 	add.w	r2, sp, #14
   b4284:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b4286:	a807      	add	r0, sp, #28
   b4288:	f001 fd03 	bl	b5c92 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    BLE.advertise(&advData);
   b428c:	f001 fb16 	bl	b58bc <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4290:	2200      	movs	r2, #0
   b4292:	a907      	add	r1, sp, #28
   b4294:	f001 fba4 	bl	b59e0 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
	BLE.setAdvertisingInterval(20);
   b4298:	f001 fb10 	bl	b58bc <_ZN8particle14BleLocalDevice11getInstanceEv>
   b429c:	2114      	movs	r1, #20
   b429e:	f001 fb30 	bl	b5902 <_ZNK8particle14BleLocalDevice22setAdvertisingIntervalEt>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b42a2:	9807      	ldr	r0, [sp, #28]
   b42a4:	f000 febe 	bl	b5024 <free>
}
   b42a8:	b014      	add	sp, #80	; 0x50
   b42aa:	bd70      	pop	{r4, r5, r6, pc}
   b42ac:	f001 f9ea 	bl	b5684 <_ZNK8particle7BleUuid8rawBytesEv>
   b42b0:	2300      	movs	r3, #0
   b42b2:	9300      	str	r3, [sp, #0]
   b42b4:	4602      	mov	r2, r0
   b42b6:	2310      	movs	r3, #16
   b42b8:	2107      	movs	r1, #7
   b42ba:	e7e4      	b.n	b4286 <setup+0x72>
   b42bc:	2003e5c8 	.word	0x2003e5c8
   b42c0:	2003e674 	.word	0x2003e674
   b42c4:	000b41ed 	.word	0x000b41ed
   b42c8:	000b4201 	.word	0x000b4201

000b42cc <loop>:
void loop() {
   b42cc:	b530      	push	{r4, r5, lr}
   b42ce:	b08f      	sub	sp, #60	; 0x3c
  	if (accel.getSample(sample)) {
   b42d0:	4819      	ldr	r0, [pc, #100]	; (b4338 <loop+0x6c>)
   b42d2:	4669      	mov	r1, sp
   b42d4:	f000 fb50 	bl	b4978 <_ZN6LIS3DH9getSampleER12LIS3DHSample>
   b42d8:	b358      	cbz	r0, b4332 <loop+0x66>
		int x = sample.x;
   b42da:	f9bd 5002 	ldrsh.w	r5, [sp, #2]
		int y = sample.y;
   b42de:	f9bd 4004 	ldrsh.w	r4, [sp, #4]

   b42e2:	f9bd 1000 	ldrsh.w	r1, [sp]
   b42e6:	220a      	movs	r2, #10
   b42e8:	a802      	add	r0, sp, #8
   b42ea:	f001 f8d4 	bl	b5496 <_ZN6StringC1Eih>
		String xs = String(x);
   b42ee:	220a      	movs	r2, #10
   b42f0:	4629      	mov	r1, r5
   b42f2:	a806      	add	r0, sp, #24
   b42f4:	f001 f8cf 	bl	b5496 <_ZN6StringC1Eih>
		String ys = String(y);
   b42f8:	220a      	movs	r2, #10
   b42fa:	4621      	mov	r1, r4
   b42fc:	a80a      	add	r0, sp, #40	; 0x28
   b42fe:	f001 f8ca 	bl	b5496 <_ZN6StringC1Eih>

   b4302:	9a02      	ldr	r2, [sp, #8]
   b4304:	490d      	ldr	r1, [pc, #52]	; (b433c <loop+0x70>)
   b4306:	480e      	ldr	r0, [pc, #56]	; (b4340 <loop+0x74>)
   b4308:	f000 fa7d 	bl	b4806 <_ZN4MQTT7publishEPKcS1_>
		client.publish("BAR/argonT/accel/x", xs);
   b430c:	9a06      	ldr	r2, [sp, #24]
   b430e:	490d      	ldr	r1, [pc, #52]	; (b4344 <loop+0x78>)
   b4310:	480b      	ldr	r0, [pc, #44]	; (b4340 <loop+0x74>)
   b4312:	f000 fa78 	bl	b4806 <_ZN4MQTT7publishEPKcS1_>
		client.publish("BAR/argonT/accel/y", ys);
   b4316:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b4318:	490b      	ldr	r1, [pc, #44]	; (b4348 <loop+0x7c>)
   b431a:	4809      	ldr	r0, [pc, #36]	; (b4340 <loop+0x74>)
   b431c:	f000 fa73 	bl	b4806 <_ZN4MQTT7publishEPKcS1_>
		String ys = String(y);
   b4320:	a80a      	add	r0, sp, #40	; 0x28
   b4322:	f001 f805 	bl	b5330 <_ZN6StringD1Ev>
		String xs = String(x);
   b4326:	a806      	add	r0, sp, #24
   b4328:	f001 f802 	bl	b5330 <_ZN6StringD1Ev>

   b432c:	a802      	add	r0, sp, #8
   b432e:	f000 ffff 	bl	b5330 <_ZN6StringD1Ev>
	}
   b4332:	b00f      	add	sp, #60	; 0x3c
   b4334:	bd30      	pop	{r4, r5, pc}
   b4336:	bf00      	nop
   b4338:	2003e5c8 	.word	0x2003e5c8
   b433c:	000b895e 	.word	0x000b895e
   b4340:	2003e5f0 	.word	0x2003e5f0
   b4344:	000b8971 	.word	0x000b8971
   b4348:	000b8984 	.word	0x000b8984

000b434c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b434c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b434e:	e9d0 5300 	ldrd	r5, r3, [r0]
   b4352:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4354:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4356:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b435a:	42ae      	cmp	r6, r5
   b435c:	d004      	beq.n	b4368 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b435e:	4628      	mov	r0, r5
   b4360:	f000 ffe6 	bl	b5330 <_ZN6StringD1Ev>
   b4364:	3514      	adds	r5, #20
   b4366:	e7f8      	b.n	b435a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b4368:	6820      	ldr	r0, [r4, #0]
   b436a:	f000 fe5b 	bl	b5024 <free>
    AllocatorT::free(data_);
}
   b436e:	4620      	mov	r0, r4
   b4370:	bd70      	pop	{r4, r5, r6, pc}

000b4372 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b4372:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b4374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4376:	4604      	mov	r4, r0
   b4378:	460d      	mov	r5, r1
   b437a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b437c:	d916      	bls.n	b43ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b437e:	4290      	cmp	r0, r2
   b4380:	d215      	bcs.n	b43ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b4382:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b4386:	1a75      	subs	r5, r6, r1
   b4388:	f1a1 0714 	sub.w	r7, r1, #20
   b438c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b438e:	42b7      	cmp	r7, r6
   b4390:	d01c      	beq.n	b43cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b4392:	b12c      	cbz	r4, b43a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b4394:	4631      	mov	r1, r6
   b4396:	4620      	mov	r0, r4
   b4398:	f001 f846 	bl	b5428 <_ZN6StringC1EOS_>
   b439c:	7c33      	ldrb	r3, [r6, #16]
   b439e:	7423      	strb	r3, [r4, #16]
   b43a0:	4630      	mov	r0, r6
   b43a2:	f000 ffc5 	bl	b5330 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b43a6:	3e14      	subs	r6, #20
   b43a8:	3c14      	subs	r4, #20
   b43aa:	e7f0      	b.n	b438e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b43ac:	d00e      	beq.n	b43cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b43ae:	42b5      	cmp	r5, r6
   b43b0:	d00c      	beq.n	b43cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b43b2:	b12c      	cbz	r4, b43c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b43b4:	4629      	mov	r1, r5
   b43b6:	4620      	mov	r0, r4
   b43b8:	f001 f836 	bl	b5428 <_ZN6StringC1EOS_>
   b43bc:	7c2b      	ldrb	r3, [r5, #16]
   b43be:	7423      	strb	r3, [r4, #16]
   b43c0:	4628      	mov	r0, r5
   b43c2:	f000 ffb5 	bl	b5330 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b43c6:	3514      	adds	r5, #20
   b43c8:	3414      	adds	r4, #20
   b43ca:	e7f0      	b.n	b43ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b43cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b43ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b43ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b43d2:	2300      	movs	r3, #0
   b43d4:	e9c0 3300 	strd	r3, r3, [r0]
   b43d8:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b43da:	684f      	ldr	r7, [r1, #4]
   b43dc:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b43de:	4604      	mov	r4, r0
   b43e0:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b43e2:	dd23      	ble.n	b442c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b43e4:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b43e8:	fb08 f007 	mul.w	r0, r8, r7
   b43ec:	f000 fe12 	bl	b5014 <malloc>
            if (!d) {
   b43f0:	4605      	mov	r5, r0
   b43f2:	b1d8      	cbz	r0, b442c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b43f4:	e9d4 1200 	ldrd	r1, r2, [r4]
   b43f8:	fb08 1202 	mla	r2, r8, r2, r1
   b43fc:	f7ff ffb9 	bl	b4372 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b4400:	6820      	ldr	r0, [r4, #0]
   b4402:	f000 fe0f 	bl	b5024 <free>
        data_ = d;
   b4406:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b4408:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b440a:	e9d6 7300 	ldrd	r7, r3, [r6]
   b440e:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b4412:	45b8      	cmp	r8, r7
   b4414:	d008      	beq.n	b4428 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b4416:	4639      	mov	r1, r7
   b4418:	4628      	mov	r0, r5
   b441a:	f001 f81f 	bl	b545c <_ZN6StringC1ERKS_>
   b441e:	7c3b      	ldrb	r3, [r7, #16]
   b4420:	742b      	strb	r3, [r5, #16]
   b4422:	3714      	adds	r7, #20
   b4424:	3514      	adds	r5, #20
   b4426:	e7f4      	b.n	b4412 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b4428:	6873      	ldr	r3, [r6, #4]
   b442a:	6063      	str	r3, [r4, #4]
}
   b442c:	4620      	mov	r0, r4
   b442e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b4434 <_GLOBAL__sub_I_SystemMode>:

   b4434:	b530      	push	{r4, r5, lr}
SYSTEM_THREAD(ENABLED);
   b4436:	2100      	movs	r1, #0

   b4438:	b091      	sub	sp, #68	; 0x44
SYSTEM_THREAD(ENABLED);
   b443a:	2001      	movs	r0, #1
   b443c:	f000 fd66 	bl	b4f0c <system_thread_set_state>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4440:	4b3a      	ldr	r3, [pc, #232]	; (b452c <_GLOBAL__sub_I_SystemMode+0xf8>)
    SleepResult() {}
   b4442:	4a3b      	ldr	r2, [pc, #236]	; (b4530 <_GLOBAL__sub_I_SystemMode+0xfc>)
   b4444:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4446:	2400      	movs	r4, #0
   b4448:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b444c:	2003      	movs	r0, #3
   b444e:	f000 fd4d 	bl	b4eec <set_system_mode>
MQTT client("lab.thewcl.com", 1883, callback);
   b4452:	9400      	str	r4, [sp, #0]

#ifdef SYSTEM_VERSION_v151RC1
	// In 1.5.0-rc.1, SPI interfaces are handled differently. You can still pass in SPI, SPI1, etc.
	// but the code to handle it varies
	LIS3DHSPI(::particle::SpiProxy<HAL_SPI_INTERFACE1> &spiProxy, int ss = A2, int intPin = -1) : 
		LIS3DH(intPin), spi(spiProxy.instance()), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0){};
   b4454:	4c37      	ldr	r4, [pc, #220]	; (b4534 <_GLOBAL__sub_I_SystemMode+0x100>)
   b4456:	4b38      	ldr	r3, [pc, #224]	; (b4538 <_GLOBAL__sub_I_SystemMode+0x104>)
   b4458:	4938      	ldr	r1, [pc, #224]	; (b453c <_GLOBAL__sub_I_SystemMode+0x108>)
   b445a:	4839      	ldr	r0, [pc, #228]	; (b4540 <_GLOBAL__sub_I_SystemMode+0x10c>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b445c:	4d39      	ldr	r5, [pc, #228]	; (b4544 <_GLOBAL__sub_I_SystemMode+0x110>)
   b445e:	f240 725b 	movw	r2, #1883	; 0x75b
   b4462:	f000 f8c9 	bl	b45f8 <_ZN4MQTTC1EPKctPFvPcPhjEb>
   b4466:	2108      	movs	r1, #8
   b4468:	4620      	mov	r0, r4
   b446a:	f000 fa57 	bl	b491c <_ZN6LIS3DHC1Ei>
   b446e:	4b36      	ldr	r3, [pc, #216]	; (b4548 <_GLOBAL__sub_I_SystemMode+0x114>)
   b4470:	6023      	str	r3, [r4, #0]
   b4472:	7829      	ldrb	r1, [r5, #0]
   b4474:	f3bf 8f5b 	dmb	ish
   b4478:	f011 0101 	ands.w	r1, r1, #1
   b447c:	d10b      	bne.n	b4496 <_GLOBAL__sub_I_SystemMode+0x62>
   b447e:	4628      	mov	r0, r5
   b4480:	9103      	str	r1, [sp, #12]
   b4482:	f7ff fe2d 	bl	b40e0 <__cxa_guard_acquire>
   b4486:	9903      	ldr	r1, [sp, #12]
   b4488:	b128      	cbz	r0, b4496 <_GLOBAL__sub_I_SystemMode+0x62>
   b448a:	4830      	ldr	r0, [pc, #192]	; (b454c <_GLOBAL__sub_I_SystemMode+0x118>)
   b448c:	f000 fe46 	bl	b511c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4490:	4628      	mov	r0, r5
   b4492:	f7ff fe2a 	bl	b40ea <__cxa_guard_release>
   b4496:	4b2d      	ldr	r3, [pc, #180]	; (b454c <_GLOBAL__sub_I_SystemMode+0x118>)
      dataMode_{dataMode}
   b4498:	4a2d      	ldr	r2, [pc, #180]	; (b4550 <_GLOBAL__sub_I_SystemMode+0x11c>)
   b449a:	60e3      	str	r3, [r4, #12]
   b449c:	61a2      	str	r2, [r4, #24]
   b449e:	2303      	movs	r3, #3
   b44a0:	4a2c      	ldr	r2, [pc, #176]	; (b4554 <_GLOBAL__sub_I_SystemMode+0x120>)
   b44a2:	6123      	str	r3, [r4, #16]
   b44a4:	6222      	str	r2, [r4, #32]
   b44a6:	2300      	movs	r3, #0
   b44a8:	2201      	movs	r2, #1
   b44aa:	84a2      	strh	r2, [r4, #36]	; 0x24
   b44ac:	7523      	strb	r3, [r4, #20]
   b44ae:	7723      	strb	r3, [r4, #28]
        capacity_(0) {
   b44b0:	e9cd 3304 	strd	r3, r3, [sp, #16]
   b44b4:	9306      	str	r3, [sp, #24]
            StreamLogHandler(Serial, level, filters) {
   b44b6:	f002 fff7 	bl	b74a8 <_Z16_fetch_usbserialv>
   b44ba:	a904      	add	r1, sp, #16
   b44bc:	4605      	mov	r5, r0
   b44be:	a807      	add	r0, sp, #28
        filter_(level, filters) {
   b44c0:	4c25      	ldr	r4, [pc, #148]	; (b4558 <_GLOBAL__sub_I_SystemMode+0x124>)
   b44c2:	f7ff ff84 	bl	b43ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
   b44c6:	a907      	add	r1, sp, #28
   b44c8:	a80a      	add	r0, sp, #40	; 0x28
   b44ca:	f7ff ff80 	bl	b43ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b44ce:	4b23      	ldr	r3, [pc, #140]	; (b455c <_GLOBAL__sub_I_SystemMode+0x128>)
   b44d0:	6023      	str	r3, [r4, #0]
   b44d2:	a90a      	add	r1, sp, #40	; 0x28
   b44d4:	a80d      	add	r0, sp, #52	; 0x34
   b44d6:	f7ff ff7a 	bl	b43ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b44da:	aa0d      	add	r2, sp, #52	; 0x34
   b44dc:	211e      	movs	r1, #30
   b44de:	1d20      	adds	r0, r4, #4
   b44e0:	f002 fb16 	bl	b6b10 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b44e4:	a80d      	add	r0, sp, #52	; 0x34
   b44e6:	f7ff ff31 	bl	b434c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b44ea:	a80a      	add	r0, sp, #40	; 0x28
   b44ec:	f7ff ff2e 	bl	b434c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b44f0:	4b1b      	ldr	r3, [pc, #108]	; (b4560 <_GLOBAL__sub_I_SystemMode+0x12c>)
   b44f2:	6023      	str	r3, [r4, #0]
   b44f4:	6225      	str	r5, [r4, #32]
   b44f6:	a807      	add	r0, sp, #28
   b44f8:	f7ff ff28 	bl	b434c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b44fc:	4b19      	ldr	r3, [pc, #100]	; (b4564 <_GLOBAL__sub_I_SystemMode+0x130>)
   b44fe:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b4500:	f002 ffd2 	bl	b74a8 <_Z16_fetch_usbserialv>
   b4504:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4508:	f002 ffbe 	bl	b7488 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b450c:	f001 ffe2 	bl	b64d4 <_ZN5spark10LogManager8instanceEv>
   b4510:	4621      	mov	r1, r4
   b4512:	f002 f9d3 	bl	b68bc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
   b4516:	a804      	add	r0, sp, #16
   b4518:	f7ff ff18 	bl	b434c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
BleUuid serviceUuid("afe7acc5-33a9-478f-bbe1-8944aa08e884");
   b451c:	4912      	ldr	r1, [pc, #72]	; (b4568 <_GLOBAL__sub_I_SystemMode+0x134>)
   b451e:	4813      	ldr	r0, [pc, #76]	; (b456c <_GLOBAL__sub_I_SystemMode+0x138>)

   b4520:	b011      	add	sp, #68	; 0x44
   b4522:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
BleUuid serviceUuid("afe7acc5-33a9-478f-bbe1-8944aa08e884");
   b4526:	f001 b91f 	b.w	b5768 <_ZN8particle7BleUuidC1EPKc>
   b452a:	bf00      	nop
   b452c:	2003e5bc 	.word	0x2003e5bc
   b4530:	ffff0000 	.word	0xffff0000
   b4534:	2003e5c8 	.word	0x2003e5c8
   b4538:	000b40f5 	.word	0x000b40f5
   b453c:	000b8997 	.word	0x000b8997
   b4540:	2003e5f0 	.word	0x2003e5f0
   b4544:	2003e5b0 	.word	0x2003e5b0
   b4548:	000b8a48 	.word	0x000b8a48
   b454c:	2003e5b4 	.word	0x2003e5b4
   b4550:	000b89d4 	.word	0x000b89d4
   b4554:	00989680 	.word	0x00989680
   b4558:	2003e650 	.word	0x2003e650
   b455c:	000b89e8 	.word	0x000b89e8
   b4560:	000b8c20 	.word	0x000b8c20
   b4564:	000b8a00 	.word	0x000b8a00
   b4568:	000b89a6 	.word	0x000b89a6
   b456c:	2003e674 	.word	0x2003e674

000b4570 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b4570:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b4574:	b510      	push	{r4, lr}
   b4576:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b4578:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b457a:	b113      	cbz	r3, b4582 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b457c:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b457e:	f000 fb0d 	bl	b4b9c <os_mutex_lock>
#endif
#endif
#endif
        }
   b4582:	4620      	mov	r0, r4
   b4584:	bd10      	pop	{r4, pc}

000b4586 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b4586:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b4588:	6803      	ldr	r3, [r0, #0]
   b458a:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b458e:	4604      	mov	r4, r0
            if (mqtt->thread)
   b4590:	b112      	cbz	r2, b4598 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b4592:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b4594:	f000 fb0a 	bl	b4bac <os_mutex_unlock>
#endif
#endif
#endif
        }
   b4598:	4620      	mov	r0, r4
   b459a:	bd10      	pop	{r4, pc}

000b459c <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b459c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b459e:	461f      	mov	r7, r3
   b45a0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b45a4:	4604      	mov	r4, r0
   b45a6:	460d      	mov	r5, r1
   b45a8:	4616      	mov	r6, r2
    if (thread) {
   b45aa:	b12b      	cbz	r3, b45b8 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b45ac:	2301      	movs	r3, #1
   b45ae:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b45b2:	3058      	adds	r0, #88	; 0x58
   b45b4:	f000 faea 	bl	b4b8c <os_mutex_create>
    }
    this->callback = callback;
   b45b8:	9b08      	ldr	r3, [sp, #32]
   b45ba:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b45bc:	2300      	movs	r3, #0
   b45be:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b45c0:	b106      	cbz	r6, b45c4 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b45c2:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b45c4:	b125      	cbz	r5, b45d0 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b45c6:	4629      	mov	r1, r5
   b45c8:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b45cc:	f000 ff51 	bl	b5472 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b45d0:	9b06      	ldr	r3, [sp, #24]
   b45d2:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b45d4:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b45d6:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b45d8:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b45dc:	2bff      	cmp	r3, #255	; 0xff
   b45de:	bfb8      	it	lt
   b45e0:	23ff      	movlt	r3, #255	; 0xff
   b45e2:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b45e6:	b108      	cbz	r0, b45ec <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b45e8:	f7ff fd69 	bl	b40be <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b45ec:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b45f0:	f7ff fd63 	bl	b40ba <_Znaj>
   b45f4:	61e0      	str	r0, [r4, #28]
}
   b45f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b45f8 <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b45f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b45fc:	4604      	mov	r4, r0
            bool thread) {
   b45fe:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b4600:	4617      	mov	r7, r2
   b4602:	4698      	mov	r8, r3
   b4604:	460e      	mov	r6, r1
            bool thread) {
   b4606:	f003 fad3 	bl	b7bb0 <_ZN9TCPClientC1Ev>
   b460a:	490d      	ldr	r1, [pc, #52]	; (b4640 <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
   b460c:	61e5      	str	r5, [r4, #28]
   b460e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b4612:	f000 fed8 	bl	b53c6 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b4616:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   b461a:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b461c:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b4620:	22ff      	movs	r2, #255	; 0xff
   b4622:	230f      	movs	r3, #15
   b4624:	e9cd 3200 	strd	r3, r2, [sp]
   b4628:	4620      	mov	r0, r4
            bool thread) {
   b462a:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b462e:	463b      	mov	r3, r7
   b4630:	462a      	mov	r2, r5
   b4632:	4631      	mov	r1, r6
   b4634:	f7ff ffb2 	bl	b459c <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b4638:	4620      	mov	r0, r4
   b463a:	b004      	add	sp, #16
   b463c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4640:	000b8be6 	.word	0x000b8be6

000b4644 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b4644:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4648:	4615      	mov	r5, r2
   b464a:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b464c:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b464e:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b4650:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b4652:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b4654:	a802      	add	r0, sp, #8
        digit = len % 128;
   b4656:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b465a:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b465e:	f103 0401 	add.w	r4, r3, #1
   b4662:	4403      	add	r3, r0
            digit |= 0x80;
   b4664:	bf88      	it	hi
   b4666:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b466a:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b466e:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b4672:	b2e4      	uxtb	r4, r4
   b4674:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b4678:	d81e      	bhi.n	b46b8 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b467a:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b467e:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b4682:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b4684:	4622      	mov	r2, r4
   b4686:	a901      	add	r1, sp, #4
   b4688:	4428      	add	r0, r5
    buf[4-llen] = header;
   b468a:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b468e:	f003 ff79 	bl	b8584 <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b4692:	1c72      	adds	r2, r6, #1
   b4694:	4422      	add	r2, r4
   b4696:	4641      	mov	r1, r8
   b4698:	4638      	mov	r0, r7
   b469a:	f002 ffde 	bl	b765a <_ZN9TCPClient5writeEPKhj>
   b469e:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b46a0:	f000 fa28 	bl	b4af4 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b46a4:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b46a6:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b46a8:	4432      	add	r2, r6
   b46aa:	b2a8      	uxth	r0, r5
}
   b46ac:	1a13      	subs	r3, r2, r0
   b46ae:	4258      	negs	r0, r3
   b46b0:	4158      	adcs	r0, r3
   b46b2:	b002      	add	sp, #8
   b46b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b46b8:	4623      	mov	r3, r4
   b46ba:	e7ca      	b.n	b4652 <_ZN4MQTT5writeEhPht+0xe>

000b46bc <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b46bc:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b46be:	b5f0      	push	{r4, r5, r6, r7, lr}
   b46c0:	4605      	mov	r5, r0
    pos += 2;
   b46c2:	b298      	uxth	r0, r3
   b46c4:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b46c6:	5cce      	ldrb	r6, [r1, r3]
   b46c8:	b29c      	uxth	r4, r3
   b46ca:	b156      	cbz	r6, b46e2 <_ZN4MQTT11writeStringEPKcPht+0x26>
   b46cc:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b46d0:	4584      	cmp	ip, r0
   b46d2:	f103 0701 	add.w	r7, r3, #1
   b46d6:	d904      	bls.n	b46e2 <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b46d8:	1c44      	adds	r4, r0, #1
   b46da:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b46dc:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b46de:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b46e0:	e7f1      	b.n	b46c6 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b46e2:	b299      	uxth	r1, r3
   b46e4:	1a41      	subs	r1, r0, r1
   b46e6:	440a      	add	r2, r1
   b46e8:	0a21      	lsrs	r1, r4, #8
   b46ea:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b46ee:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b46f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b46f4 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b46f4:	b538      	push	{r3, r4, r5, lr}
   b46f6:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b46f8:	f003 f8d8 	bl	b78ac <_ZN9TCPClient9connectedEv>
   b46fc:	2800      	cmp	r0, #0
   b46fe:	bf14      	ite	ne
   b4700:	2501      	movne	r5, #1
   b4702:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b4704:	d102      	bne.n	b470c <_ZN4MQTT11isConnectedEv+0x18>
   b4706:	4620      	mov	r0, r4
   b4708:	f003 fa08 	bl	b7b1c <_ZN9TCPClient4stopEv>
    return rc;
}
   b470c:	4628      	mov	r0, r5
   b470e:	bd38      	pop	{r3, r4, r5, pc}

000b4710 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b4710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4714:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b4718:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b471c:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b4720:	4604      	mov	r4, r0
   b4722:	468b      	mov	fp, r1
   b4724:	4616      	mov	r6, r2
   b4726:	461f      	mov	r7, r3
    if (isConnected()) {
   b4728:	f7ff ffe4 	bl	b46f4 <_ZN4MQTT11isConnectedEv>
   b472c:	4682      	mov	sl, r0
   b472e:	2800      	cmp	r0, #0
   b4730:	d051      	beq.n	b47d6 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b4732:	4621      	mov	r1, r4
   b4734:	a801      	add	r0, sp, #4
   b4736:	f7ff ff1b 	bl	b4570 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b473a:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b473e:	69e0      	ldr	r0, [r4, #28]
   b4740:	2100      	movs	r1, #0
   b4742:	f003 ff47 	bl	b85d4 <memset>
        length = writeString(topic, buffer, length);
   b4746:	2305      	movs	r3, #5
   b4748:	69e2      	ldr	r2, [r4, #28]
   b474a:	4659      	mov	r1, fp
   b474c:	4620      	mov	r0, r4
   b474e:	f7ff ffb5 	bl	b46bc <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b4752:	1e6b      	subs	r3, r5, #1
   b4754:	2b01      	cmp	r3, #1
   b4756:	d815      	bhi.n	b4784 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b4758:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b475a:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b475c:	3101      	adds	r1, #1
   b475e:	b289      	uxth	r1, r1
   b4760:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b4762:	0a09      	lsrs	r1, r1, #8
   b4764:	5419      	strb	r1, [r3, r0]
   b4766:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b4768:	69e3      	ldr	r3, [r4, #28]
   b476a:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b476c:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b476e:	3002      	adds	r0, #2
   b4770:	5499      	strb	r1, [r3, r2]
   b4772:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b4774:	f1b8 0f00 	cmp.w	r8, #0
   b4778:	d004      	beq.n	b4784 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b477a:	8c23      	ldrh	r3, [r4, #32]
   b477c:	1c5a      	adds	r2, r3, #1
   b477e:	8422      	strh	r2, [r4, #32]
   b4780:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b4784:	2100      	movs	r1, #0
   b4786:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b4788:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b478a:	69e2      	ldr	r2, [r4, #28]
   b478c:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b478e:	d90a      	bls.n	b47a6 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b4790:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b4794:	459c      	cmp	ip, r3
   b4796:	d906      	bls.n	b47a6 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b4798:	f816 c001 	ldrb.w	ip, [r6, r1]
   b479c:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b47a0:	3101      	adds	r1, #1
   b47a2:	b289      	uxth	r1, r1
   b47a4:	e7ef      	b.n	b4786 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b47a6:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b47aa:	2900      	cmp	r1, #0
   b47ac:	bf0c      	ite	eq
   b47ae:	2130      	moveq	r1, #48	; 0x30
   b47b0:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b47b2:	f1b9 0f00 	cmp.w	r9, #0
   b47b6:	d001      	beq.n	b47bc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b47b8:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b47bc:	2d02      	cmp	r5, #2
   b47be:	d10e      	bne.n	b47de <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b47c0:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b47c4:	3b05      	subs	r3, #5
   b47c6:	b29b      	uxth	r3, r3
   b47c8:	4620      	mov	r0, r4
   b47ca:	f7ff ff3b 	bl	b4644 <_ZN4MQTT5writeEhPht>
   b47ce:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b47d0:	a801      	add	r0, sp, #4
   b47d2:	f7ff fed8 	bl	b4586 <_ZN4MQTT11MutexLockerD1Ev>
}
   b47d6:	4650      	mov	r0, sl
   b47d8:	b003      	add	sp, #12
   b47da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b47de:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b47e0:	bf08      	it	eq
   b47e2:	f041 0102 	orreq.w	r1, r1, #2
   b47e6:	e7ed      	b.n	b47c4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b47e8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b47e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b47ea:	9c08      	ldr	r4, [sp, #32]
   b47ec:	9403      	str	r4, [sp, #12]
   b47ee:	2400      	movs	r4, #0
   b47f0:	9402      	str	r4, [sp, #8]
   b47f2:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b47f6:	9401      	str	r4, [sp, #4]
   b47f8:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b47fc:	9400      	str	r4, [sp, #0]
   b47fe:	f7ff ff87 	bl	b4710 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b4802:	b004      	add	sp, #16
   b4804:	bd10      	pop	{r4, pc}

000b4806 <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b4806:	b530      	push	{r4, r5, lr}
   b4808:	b087      	sub	sp, #28
   b480a:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b480c:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b480e:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b4810:	9204      	str	r2, [sp, #16]
   b4812:	f7ff fc0d 	bl	b4030 <strlen>
   b4816:	2500      	movs	r5, #0
   b4818:	4603      	mov	r3, r0
   b481a:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b481e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b4822:	9500      	str	r5, [sp, #0]
   b4824:	4620      	mov	r0, r4
   b4826:	f7ff ffdf 	bl	b47e8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b482a:	b007      	add	sp, #28
   b482c:	bd30      	pop	{r4, r5, pc}

000b482e <_ZN9LIS3DHSPID1Ev>:

LIS3DHSPI::LIS3DHSPI(SPIClass &spi, int ss, int intPin) : LIS3DH(intPin), spi(spi), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0) {
}

LIS3DHSPI::~LIS3DHSPI() {
}
   b482e:	4770      	bx	lr

000b4830 <_ZN9LIS3DHSPID0Ev>:
LIS3DHSPI::~LIS3DHSPI() {
   b4830:	b510      	push	{r4, lr}
}
   b4832:	2128      	movs	r1, #40	; 0x28
LIS3DHSPI::~LIS3DHSPI() {
   b4834:	4604      	mov	r4, r0
}
   b4836:	f7ff fc44 	bl	b40c2 <_ZdlPvj>
   b483a:	4620      	mov	r0, r4
   b483c:	bd10      	pop	{r4, pc}

000b483e <_ZN9LIS3DHSPI16beginTransactionEv>:

void LIS3DHSPI::spiSetup() {
	// No longer used; SPI transactions are always used now
}

void LIS3DHSPI::beginTransaction() {
   b483e:	b510      	push	{r4, lr}
   b4840:	4604      	mov	r4, r0
	spi.beginTransaction(spiSettings);
   b4842:	f100 0118 	add.w	r1, r0, #24
   b4846:	68c0      	ldr	r0, [r0, #12]
   b4848:	f000 fca0 	bl	b518c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

	digitalWrite(ss, LOW);
   b484c:	8a20      	ldrh	r0, [r4, #16]
   b484e:	2100      	movs	r1, #0
}
   b4850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	digitalWrite(ss, LOW);
   b4854:	f003 bcc6 	b.w	b81e4 <digitalWrite>

000b4858 <_ZN9LIS3DHSPI14endTransactionEv>:

void LIS3DHSPI::endTransaction() {
   b4858:	b510      	push	{r4, lr}
   b485a:	4604      	mov	r4, r0
	digitalWrite(ss, HIGH);
   b485c:	2101      	movs	r1, #1
   b485e:	8a00      	ldrh	r0, [r0, #16]
   b4860:	f003 fcc0 	bl	b81e4 <digitalWrite>

	spi.endTransaction();
   b4864:	68e0      	ldr	r0, [r4, #12]
}
   b4866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spi.endTransaction();
   b486a:	f000 bc75 	b.w	b5158 <_ZN8SPIClass14endTransactionEv>

000b486e <_ZN9LIS3DHSPI8readDataEhPhj>:

bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   b486e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4870:	461e      	mov	r6, r3
	beginTransaction();
   b4872:	6803      	ldr	r3, [r0, #0]
   b4874:	695b      	ldr	r3, [r3, #20]
bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   b4876:	460f      	mov	r7, r1
   b4878:	4614      	mov	r4, r2
   b487a:	4605      	mov	r5, r0
	beginTransaction();
   b487c:	4798      	blx	r3

	if (numBytes > 1) {
   b487e:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
   b4880:	bf88      	it	hi
   b4882:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(SPI_READ | addr);
   b4886:	68e8      	ldr	r0, [r5, #12]
   b4888:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   b488c:	f000 fcec 	bl	b5268 <_ZN8SPIClass8transferEh>

	for(size_t ii = 0; ii < numBytes; ii++) {
   b4890:	4426      	add	r6, r4
   b4892:	42b4      	cmp	r4, r6
   b4894:	d006      	beq.n	b48a4 <_ZN9LIS3DHSPI8readDataEhPhj+0x36>
		buf[ii] = spi.transfer(0);
   b4896:	68e8      	ldr	r0, [r5, #12]
   b4898:	2100      	movs	r1, #0
   b489a:	f000 fce5 	bl	b5268 <_ZN8SPIClass8transferEh>
   b489e:	f804 0b01 	strb.w	r0, [r4], #1
	for(size_t ii = 0; ii < numBytes; ii++) {
   b48a2:	e7f6      	b.n	b4892 <_ZN9LIS3DHSPI8readDataEhPhj+0x24>
	}

	endTransaction();
   b48a4:	682b      	ldr	r3, [r5, #0]
   b48a6:	4628      	mov	r0, r5
   b48a8:	699b      	ldr	r3, [r3, #24]
   b48aa:	4798      	blx	r3

	return true;
}
   b48ac:	2001      	movs	r0, #1
   b48ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b48b0 <_ZN9LIS3DHSPI9writeDataEhPKhj>:

bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   b48b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b48b2:	461e      	mov	r6, r3
	beginTransaction();
   b48b4:	6803      	ldr	r3, [r0, #0]
   b48b6:	695b      	ldr	r3, [r3, #20]
bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   b48b8:	460f      	mov	r7, r1
   b48ba:	4614      	mov	r4, r2
   b48bc:	4605      	mov	r5, r0
	beginTransaction();
   b48be:	4798      	blx	r3

	if (numBytes > 1) {
   b48c0:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
   b48c2:	bf88      	it	hi
   b48c4:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(addr);
   b48c8:	68e8      	ldr	r0, [r5, #12]
   b48ca:	4639      	mov	r1, r7
   b48cc:	f000 fccc 	bl	b5268 <_ZN8SPIClass8transferEh>
	for(size_t ii = 0; ii < numBytes; ii++) {
   b48d0:	4426      	add	r6, r4
   b48d2:	42b4      	cmp	r4, r6
   b48d4:	d005      	beq.n	b48e2 <_ZN9LIS3DHSPI9writeDataEhPKhj+0x32>
		spi.transfer(buf[ii]);
   b48d6:	f814 1b01 	ldrb.w	r1, [r4], #1
   b48da:	68e8      	ldr	r0, [r5, #12]
   b48dc:	f000 fcc4 	bl	b5268 <_ZN8SPIClass8transferEh>
	for(size_t ii = 0; ii < numBytes; ii++) {
   b48e0:	e7f7      	b.n	b48d2 <_ZN9LIS3DHSPI9writeDataEhPKhj+0x22>
	}

	endTransaction();
   b48e2:	682b      	ldr	r3, [r5, #0]
   b48e4:	4628      	mov	r0, r5
   b48e6:	699b      	ldr	r3, [r3, #24]
   b48e8:	4798      	blx	r3

	return true;
}
   b48ea:	2001      	movs	r0, #1
   b48ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b48ee <_ZN12LIS3DHConfigC1Ev>:
LIS3DHConfig::LIS3DHConfig() {
   b48ee:	2200      	movs	r2, #0
   b48f0:	7002      	strb	r2, [r0, #0]
   b48f2:	7042      	strb	r2, [r0, #1]
   b48f4:	7082      	strb	r2, [r0, #2]
   b48f6:	70c2      	strb	r2, [r0, #3]
   b48f8:	7102      	strb	r2, [r0, #4]
   b48fa:	7142      	strb	r2, [r0, #5]
   b48fc:	7182      	strb	r2, [r0, #6]
   b48fe:	71c2      	strb	r2, [r0, #7]
   b4900:	7202      	strb	r2, [r0, #8]
   b4902:	7242      	strb	r2, [r0, #9]
   b4904:	7282      	strb	r2, [r0, #10]
}
   b4906:	4770      	bx	lr

000b4908 <_ZN12LIS3DHConfig12setAccelModeEh>:
	reg2 = reg3 = reg5 = 0;
   b4908:	2200      	movs	r2, #0
	reg1 = rate | LIS3DH::CTRL_REG1_ZEN | LIS3DH::CTRL_REG1_YEN | LIS3DH::CTRL_REG1_XEN;
   b490a:	f041 0107 	orr.w	r1, r1, #7
   b490e:	7001      	strb	r1, [r0, #0]
	reg2 = reg3 = reg5 = 0;
   b4910:	7102      	strb	r2, [r0, #4]
   b4912:	7082      	strb	r2, [r0, #2]
   b4914:	7042      	strb	r2, [r0, #1]
	int1_ths = 0;
   b4916:	71c2      	strb	r2, [r0, #7]
	int1_cfg = 0;
   b4918:	7242      	strb	r2, [r0, #9]
}
   b491a:	4770      	bx	lr

000b491c <_ZN6LIS3DHC1Ei>:
LIS3DH::LIS3DH(int intPin) : intPin(intPin) {
   b491c:	4a02      	ldr	r2, [pc, #8]	; (b4928 <_ZN6LIS3DHC1Ei+0xc>)
   b491e:	e9c0 2100 	strd	r2, r1, [r0]
   b4922:	2200      	movs	r2, #0
   b4924:	7202      	strb	r2, [r0, #8]
}
   b4926:	4770      	bx	lr
   b4928:	000b8a2c 	.word	0x000b8a2c

000b492c <_ZN6LIS3DH13readRegister8Eh>:
uint8_t LIS3DH::readRegister8(uint8_t addr) {
   b492c:	b513      	push	{r0, r1, r4, lr}
	readData(addr, resp, sizeof(resp));
   b492e:	6803      	ldr	r3, [r0, #0]
   b4930:	aa01      	add	r2, sp, #4
   b4932:	68dc      	ldr	r4, [r3, #12]
   b4934:	2301      	movs	r3, #1
   b4936:	47a0      	blx	r4
}
   b4938:	f89d 0004 	ldrb.w	r0, [sp, #4]
   b493c:	b002      	add	sp, #8
   b493e:	bd10      	pop	{r4, pc}

000b4940 <_ZN6LIS3DH9hasDeviceEv>:
bool LIS3DH::hasDevice() {
   b4940:	b538      	push	{r3, r4, r5, lr}
   b4942:	4605      	mov	r5, r0
   b4944:	240a      	movs	r4, #10
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
   b4946:	210f      	movs	r1, #15
   b4948:	4628      	mov	r0, r5
   b494a:	f7ff ffef 	bl	b492c <_ZN6LIS3DH13readRegister8Eh>
		if (whoami == WHO_AM_I) {
   b494e:	2833      	cmp	r0, #51	; 0x33
			found = true;
   b4950:	f04f 0001 	mov.w	r0, #1
		if (whoami == WHO_AM_I) {
   b4954:	d004      	beq.n	b4960 <_ZN6LIS3DH9hasDeviceEv+0x20>
		delay(1);
   b4956:	f002 fbfb 	bl	b7150 <delay>
	for(int tries = 0; tries < 10; tries++) {
   b495a:	3c01      	subs	r4, #1
   b495c:	d1f3      	bne.n	b4946 <_ZN6LIS3DH9hasDeviceEv+0x6>
	bool found = false;
   b495e:	4620      	mov	r0, r4
}
   b4960:	bd38      	pop	{r3, r4, r5, pc}

000b4962 <_ZN9LIS3DHSPI9hasDeviceEv>:
bool LIS3DHSPI::hasDevice() {
   b4962:	b510      	push	{r4, lr}
   b4964:	4604      	mov	r4, r0
	spi.begin(ss);
   b4966:	8a01      	ldrh	r1, [r0, #16]
   b4968:	68c0      	ldr	r0, [r0, #12]
   b496a:	f000 fbe1 	bl	b5130 <_ZN8SPIClass5beginEt>
	return LIS3DH::hasDevice();
   b496e:	4620      	mov	r0, r4
}
   b4970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return LIS3DH::hasDevice();
   b4974:	f7ff bfe4 	b.w	b4940 <_ZN6LIS3DH9hasDeviceEv>

000b4978 <_ZN6LIS3DH9getSampleER12LIS3DHSample>:
bool LIS3DH::getSample(LIS3DHSample &sample) {
   b4978:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b497a:	460c      	mov	r4, r1
	uint8_t statusAuxReg = readRegister8(REG_STATUS_REG);
   b497c:	2127      	movs	r1, #39	; 0x27
bool LIS3DH::getSample(LIS3DHSample &sample) {
   b497e:	4605      	mov	r5, r0
	uint8_t statusAuxReg = readRegister8(REG_STATUS_REG);
   b4980:	f7ff ffd4 	bl	b492c <_ZN6LIS3DH13readRegister8Eh>
	bool hasData = ((statusAuxReg & STATUS_ZYXDA) != 0);
   b4984:	f000 0008 	and.w	r0, r0, #8
   b4988:	2800      	cmp	r0, #0
   b498a:	bf14      	ite	ne
   b498c:	2601      	movne	r6, #1
   b498e:	2600      	moveq	r6, #0
	if (hasData) {
   b4990:	d00f      	beq.n	b49b2 <_ZN6LIS3DH9getSampleER12LIS3DHSample+0x3a>
		readData(REG_OUT_X_L, resp, sizeof(resp));
   b4992:	682b      	ldr	r3, [r5, #0]
   b4994:	466a      	mov	r2, sp
   b4996:	68df      	ldr	r7, [r3, #12]
   b4998:	2128      	movs	r1, #40	; 0x28
   b499a:	2306      	movs	r3, #6
   b499c:	4628      	mov	r0, r5
   b499e:	47b8      	blx	r7
		sample.x = (int16_t) (resp[0] | (((uint16_t)resp[1]) << 8));
   b49a0:	f8bd 3000 	ldrh.w	r3, [sp]
   b49a4:	8023      	strh	r3, [r4, #0]
		sample.y = (int16_t) (resp[2] | (((uint16_t)resp[3]) << 8));
   b49a6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   b49aa:	8063      	strh	r3, [r4, #2]
		sample.z = (int16_t) (resp[4] | (((uint16_t)resp[5]) << 8));
   b49ac:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b49b0:	80a3      	strh	r3, [r4, #4]
}
   b49b2:	4630      	mov	r0, r6
   b49b4:	b003      	add	sp, #12
   b49b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b49b8 <_ZN6LIS3DH14writeRegister8Ehh>:
void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
   b49b8:	b513      	push	{r0, r1, r4, lr}
	writeData(addr, req, sizeof(req));
   b49ba:	6803      	ldr	r3, [r0, #0]
	req[0] = value;
   b49bc:	f88d 2004 	strb.w	r2, [sp, #4]
	writeData(addr, req, sizeof(req));
   b49c0:	691c      	ldr	r4, [r3, #16]
   b49c2:	aa01      	add	r2, sp, #4
   b49c4:	2301      	movs	r3, #1
   b49c6:	47a0      	blx	r4
}
   b49c8:	b002      	add	sp, #8
   b49ca:	bd10      	pop	{r4, pc}

000b49cc <_ZN6LIS3DH5setupER12LIS3DHConfig>:
bool LIS3DH::setup(LIS3DHConfig &config) {
   b49cc:	b570      	push	{r4, r5, r6, lr}
	if (!hasDevice()) {
   b49ce:	6803      	ldr	r3, [r0, #0]
   b49d0:	689b      	ldr	r3, [r3, #8]
bool LIS3DH::setup(LIS3DHConfig &config) {
   b49d2:	4604      	mov	r4, r0
   b49d4:	460d      	mov	r5, r1
	if (!hasDevice()) {
   b49d6:	4798      	blx	r3
   b49d8:	4606      	mov	r6, r0
   b49da:	b930      	cbnz	r0, b49ea <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1e>
		Serial.println("device not found");
   b49dc:	f002 fd64 	bl	b74a8 <_Z16_fetch_usbserialv>
   b49e0:	4927      	ldr	r1, [pc, #156]	; (b4a80 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xb4>)
   b49e2:	f001 fb98 	bl	b6116 <_ZN5Print7printlnEPKc>
}
   b49e6:	4630      	mov	r0, r6
   b49e8:	bd70      	pop	{r4, r5, r6, pc}
	writeRegister8(REG_CTRL_REG1, config.reg1);
   b49ea:	782a      	ldrb	r2, [r5, #0]
   b49ec:	2120      	movs	r1, #32
   b49ee:	4620      	mov	r0, r4
   b49f0:	f7ff ffe2 	bl	b49b8 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG2, config.reg2);
   b49f4:	786a      	ldrb	r2, [r5, #1]
   b49f6:	2121      	movs	r1, #33	; 0x21
   b49f8:	4620      	mov	r0, r4
   b49fa:	f7ff ffdd 	bl	b49b8 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG3, config.reg3);
   b49fe:	78aa      	ldrb	r2, [r5, #2]
   b4a00:	2122      	movs	r1, #34	; 0x22
   b4a02:	4620      	mov	r0, r4
   b4a04:	f7ff ffd8 	bl	b49b8 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG4, config.reg4);
   b4a08:	78ea      	ldrb	r2, [r5, #3]
   b4a0a:	2123      	movs	r1, #35	; 0x23
   b4a0c:	4620      	mov	r0, r4
   b4a0e:	f7ff ffd3 	bl	b49b8 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG5, config.reg5);
   b4a12:	792a      	ldrb	r2, [r5, #4]
   b4a14:	2124      	movs	r1, #36	; 0x24
   b4a16:	4620      	mov	r0, r4
   b4a18:	f7ff ffce 	bl	b49b8 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG6, config.reg6);
   b4a1c:	796a      	ldrb	r2, [r5, #5]
   b4a1e:	2125      	movs	r1, #37	; 0x25
   b4a20:	4620      	mov	r0, r4
   b4a22:	f7ff ffc9 	bl	b49b8 <_ZN6LIS3DH14writeRegister8Ehh>
	if (config.setReference) {
   b4a26:	79ab      	ldrb	r3, [r5, #6]
   b4a28:	b11b      	cbz	r3, b4a32 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x66>
		readRegister8(REG_REFERENCE);
   b4a2a:	2126      	movs	r1, #38	; 0x26
   b4a2c:	4620      	mov	r0, r4
   b4a2e:	f7ff ff7d 	bl	b492c <_ZN6LIS3DH13readRegister8Eh>
	writeRegister8(REG_FIFO_CTRL_REG, config.fifoCtrlReg);
   b4a32:	7aaa      	ldrb	r2, [r5, #10]
   b4a34:	212e      	movs	r1, #46	; 0x2e
   b4a36:	4620      	mov	r0, r4
   b4a38:	f7ff ffbe 	bl	b49b8 <_ZN6LIS3DH14writeRegister8Ehh>
	if ((config.reg3 & CTRL_REG3_I1_INT1) != 0) {
   b4a3c:	78ab      	ldrb	r3, [r5, #2]
   b4a3e:	065b      	lsls	r3, r3, #25
   b4a40:	d5d1      	bpl.n	b49e6 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
		writeRegister8(REG_INT1_THS, config.int1_ths);
   b4a42:	79ea      	ldrb	r2, [r5, #7]
   b4a44:	2132      	movs	r1, #50	; 0x32
   b4a46:	4620      	mov	r0, r4
   b4a48:	f7ff ffb6 	bl	b49b8 <_ZN6LIS3DH14writeRegister8Ehh>
		writeRegister8(REG_INT1_DURATION, config.int1_duration);
   b4a4c:	7a2a      	ldrb	r2, [r5, #8]
   b4a4e:	2133      	movs	r1, #51	; 0x33
   b4a50:	4620      	mov	r0, r4
   b4a52:	f7ff ffb1 	bl	b49b8 <_ZN6LIS3DH14writeRegister8Ehh>
		if (intPin >= 0) {
   b4a56:	6863      	ldr	r3, [r4, #4]
   b4a58:	2b00      	cmp	r3, #0
   b4a5a:	db0a      	blt.n	b4a72 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xa6>
			int1_cfg = config.int1_cfg;
   b4a5c:	7a6a      	ldrb	r2, [r5, #9]
   b4a5e:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, int1_cfg);
   b4a60:	4620      	mov	r0, r4
   b4a62:	2130      	movs	r1, #48	; 0x30
   b4a64:	f7ff ffa8 	bl	b49b8 <_ZN6LIS3DH14writeRegister8Ehh>
			readRegister8(REG_INT1_SRC);
   b4a68:	2131      	movs	r1, #49	; 0x31
   b4a6a:	4620      	mov	r0, r4
   b4a6c:	f7ff ff5e 	bl	b492c <_ZN6LIS3DH13readRegister8Eh>
   b4a70:	e7b9      	b.n	b49e6 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
			int1_cfg = 0;
   b4a72:	2200      	movs	r2, #0
   b4a74:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, 0);
   b4a76:	2130      	movs	r1, #48	; 0x30
   b4a78:	4620      	mov	r0, r4
   b4a7a:	f7ff ff9d 	bl	b49b8 <_ZN6LIS3DH14writeRegister8Ehh>
   b4a7e:	e7b2      	b.n	b49e6 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
   b4a80:	000b8a10 	.word	0x000b8a10

000b4a84 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4a84:	b508      	push	{r3, lr}
   b4a86:	4b02      	ldr	r3, [pc, #8]	; (b4a90 <netdb_freeaddrinfo+0xc>)
   b4a88:	681b      	ldr	r3, [r3, #0]
   b4a8a:	689b      	ldr	r3, [r3, #8]
   b4a8c:	9301      	str	r3, [sp, #4]
   b4a8e:	bd08      	pop	{r3, pc}
   b4a90:	00030268 	.word	0x00030268

000b4a94 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4a94:	b508      	push	{r3, lr}
   b4a96:	4b02      	ldr	r3, [pc, #8]	; (b4aa0 <netdb_getaddrinfo+0xc>)
   b4a98:	681b      	ldr	r3, [r3, #0]
   b4a9a:	68db      	ldr	r3, [r3, #12]
   b4a9c:	9301      	str	r3, [sp, #4]
   b4a9e:	bd08      	pop	{r3, pc}
   b4aa0:	00030268 	.word	0x00030268

000b4aa4 <hal_gpio_get_mode>:
DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b4aa4:	b508      	push	{r3, lr}
   b4aa6:	4b02      	ldr	r3, [pc, #8]	; (b4ab0 <hal_gpio_get_mode+0xc>)
   b4aa8:	681b      	ldr	r3, [r3, #0]
   b4aaa:	68db      	ldr	r3, [r3, #12]
   b4aac:	9301      	str	r3, [sp, #4]
   b4aae:	bd08      	pop	{r3, pc}
   b4ab0:	0003022c 	.word	0x0003022c

000b4ab4 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b4ab4:	b508      	push	{r3, lr}
   b4ab6:	4b02      	ldr	r3, [pc, #8]	; (b4ac0 <hal_gpio_write+0xc>)
   b4ab8:	681b      	ldr	r3, [r3, #0]
   b4aba:	691b      	ldr	r3, [r3, #16]
   b4abc:	9301      	str	r3, [sp, #4]
   b4abe:	bd08      	pop	{r3, pc}
   b4ac0:	0003022c 	.word	0x0003022c

000b4ac4 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b4ac4:	b508      	push	{r3, lr}
   b4ac6:	4b02      	ldr	r3, [pc, #8]	; (b4ad0 <if_index_to_name+0xc>)
   b4ac8:	681b      	ldr	r3, [r3, #0]
   b4aca:	695b      	ldr	r3, [r3, #20]
   b4acc:	9301      	str	r3, [sp, #4]
   b4ace:	bd08      	pop	{r3, pc}
   b4ad0:	0003026c 	.word	0x0003026c

000b4ad4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4ad4:	b508      	push	{r3, lr}
   b4ad6:	4b02      	ldr	r3, [pc, #8]	; (b4ae0 <HAL_RNG_GetRandomNumber+0xc>)
   b4ad8:	681b      	ldr	r3, [r3, #0]
   b4ada:	685b      	ldr	r3, [r3, #4]
   b4adc:	9301      	str	r3, [sp, #4]
   b4ade:	bd08      	pop	{r3, pc}
   b4ae0:	00030218 	.word	0x00030218

000b4ae4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4ae4:	b508      	push	{r3, lr}
   b4ae6:	4b02      	ldr	r3, [pc, #8]	; (b4af0 <HAL_Delay_Microseconds+0xc>)
   b4ae8:	681b      	ldr	r3, [r3, #0]
   b4aea:	68db      	ldr	r3, [r3, #12]
   b4aec:	9301      	str	r3, [sp, #4]
   b4aee:	bd08      	pop	{r3, pc}
   b4af0:	00030218 	.word	0x00030218

000b4af4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4af4:	b508      	push	{r3, lr}
   b4af6:	4b02      	ldr	r3, [pc, #8]	; (b4b00 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4af8:	681b      	ldr	r3, [r3, #0]
   b4afa:	695b      	ldr	r3, [r3, #20]
   b4afc:	9301      	str	r3, [sp, #4]
   b4afe:	bd08      	pop	{r3, pc}
   b4b00:	00030218 	.word	0x00030218

000b4b04 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b4b04:	b508      	push	{r3, lr}
   b4b06:	4b02      	ldr	r3, [pc, #8]	; (b4b10 <hal_ble_stack_init+0xc>)
   b4b08:	681b      	ldr	r3, [r3, #0]
   b4b0a:	689b      	ldr	r3, [r3, #8]
   b4b0c:	9301      	str	r3, [sp, #4]
   b4b0e:	bd08      	pop	{r3, pc}
   b4b10:	00030278 	.word	0x00030278

000b4b14 <hal_ble_gap_set_advertising_parameters>:
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
   b4b14:	b508      	push	{r3, lr}
   b4b16:	4b02      	ldr	r3, [pc, #8]	; (b4b20 <hal_ble_gap_set_advertising_parameters+0xc>)
   b4b18:	681b      	ldr	r3, [r3, #0]
   b4b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b4b1c:	9301      	str	r3, [sp, #4]
   b4b1e:	bd08      	pop	{r3, pc}
   b4b20:	00030278 	.word	0x00030278

000b4b24 <hal_ble_gap_get_advertising_parameters>:
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
   b4b24:	b508      	push	{r3, lr}
   b4b26:	4b02      	ldr	r3, [pc, #8]	; (b4b30 <hal_ble_gap_get_advertising_parameters+0xc>)
   b4b28:	681b      	ldr	r3, [r3, #0]
   b4b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4b2c:	9301      	str	r3, [sp, #4]
   b4b2e:	bd08      	pop	{r3, pc}
   b4b30:	00030278 	.word	0x00030278

000b4b34 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b4b34:	b508      	push	{r3, lr}
   b4b36:	4b02      	ldr	r3, [pc, #8]	; (b4b40 <hal_ble_gap_set_advertising_data+0xc>)
   b4b38:	681b      	ldr	r3, [r3, #0]
   b4b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4b3c:	9301      	str	r3, [sp, #4]
   b4b3e:	bd08      	pop	{r3, pc}
   b4b40:	00030278 	.word	0x00030278

000b4b44 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b4b44:	b508      	push	{r3, lr}
   b4b46:	4b02      	ldr	r3, [pc, #8]	; (b4b50 <hal_ble_gap_set_scan_response_data+0xc>)
   b4b48:	681b      	ldr	r3, [r3, #0]
   b4b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b4b4c:	9301      	str	r3, [sp, #4]
   b4b4e:	bd08      	pop	{r3, pc}
   b4b50:	00030278 	.word	0x00030278

000b4b54 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b4b54:	b508      	push	{r3, lr}
   b4b56:	4b02      	ldr	r3, [pc, #8]	; (b4b60 <hal_ble_gap_start_advertising+0xc>)
   b4b58:	681b      	ldr	r3, [r3, #0]
   b4b5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b4b5c:	9301      	str	r3, [sp, #4]
   b4b5e:	bd08      	pop	{r3, pc}
   b4b60:	00030278 	.word	0x00030278

000b4b64 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b4b64:	b508      	push	{r3, lr}
   b4b66:	4b03      	ldr	r3, [pc, #12]	; (b4b74 <hal_ble_gap_disconnect+0x10>)
   b4b68:	681b      	ldr	r3, [r3, #0]
   b4b6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b4b6e:	9301      	str	r3, [sp, #4]
   b4b70:	bd08      	pop	{r3, pc}
   b4b72:	0000      	.short	0x0000
   b4b74:	00030278 	.word	0x00030278

000b4b78 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b4b78:	b508      	push	{r3, lr}
   b4b7a:	4b03      	ldr	r3, [pc, #12]	; (b4b88 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b4b7c:	681b      	ldr	r3, [r3, #0]
   b4b7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b4b82:	9301      	str	r3, [sp, #4]
   b4b84:	bd08      	pop	{r3, pc}
   b4b86:	0000      	.short	0x0000
   b4b88:	00030278 	.word	0x00030278

000b4b8c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b4b8c:	b508      	push	{r3, lr}
   b4b8e:	4b02      	ldr	r3, [pc, #8]	; (b4b98 <os_mutex_create+0xc>)
   b4b90:	681b      	ldr	r3, [r3, #0]
   b4b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4b94:	9301      	str	r3, [sp, #4]
   b4b96:	bd08      	pop	{r3, pc}
   b4b98:	00030248 	.word	0x00030248

000b4b9c <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b4b9c:	b508      	push	{r3, lr}
   b4b9e:	4b02      	ldr	r3, [pc, #8]	; (b4ba8 <os_mutex_lock+0xc>)
   b4ba0:	681b      	ldr	r3, [r3, #0]
   b4ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b4ba4:	9301      	str	r3, [sp, #4]
   b4ba6:	bd08      	pop	{r3, pc}
   b4ba8:	00030248 	.word	0x00030248

000b4bac <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b4bac:	b508      	push	{r3, lr}
   b4bae:	4b02      	ldr	r3, [pc, #8]	; (b4bb8 <os_mutex_unlock+0xc>)
   b4bb0:	681b      	ldr	r3, [r3, #0]
   b4bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4bb4:	9301      	str	r3, [sp, #4]
   b4bb6:	bd08      	pop	{r3, pc}
   b4bb8:	00030248 	.word	0x00030248

000b4bbc <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4bbc:	b508      	push	{r3, lr}
   b4bbe:	4b02      	ldr	r3, [pc, #8]	; (b4bc8 <os_mutex_recursive_create+0xc>)
   b4bc0:	681b      	ldr	r3, [r3, #0]
   b4bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4bc4:	9301      	str	r3, [sp, #4]
   b4bc6:	bd08      	pop	{r3, pc}
   b4bc8:	00030248 	.word	0x00030248

000b4bcc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b4bcc:	b508      	push	{r3, lr}
   b4bce:	4b02      	ldr	r3, [pc, #8]	; (b4bd8 <os_mutex_recursive_destroy+0xc>)
   b4bd0:	681b      	ldr	r3, [r3, #0]
   b4bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b4bd4:	9301      	str	r3, [sp, #4]
   b4bd6:	bd08      	pop	{r3, pc}
   b4bd8:	00030248 	.word	0x00030248

000b4bdc <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b4bdc:	b508      	push	{r3, lr}
   b4bde:	4b02      	ldr	r3, [pc, #8]	; (b4be8 <os_mutex_recursive_lock+0xc>)
   b4be0:	681b      	ldr	r3, [r3, #0]
   b4be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4be4:	9301      	str	r3, [sp, #4]
   b4be6:	bd08      	pop	{r3, pc}
   b4be8:	00030248 	.word	0x00030248

000b4bec <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b4bec:	b508      	push	{r3, lr}
   b4bee:	4b02      	ldr	r3, [pc, #8]	; (b4bf8 <os_mutex_recursive_unlock+0xc>)
   b4bf0:	681b      	ldr	r3, [r3, #0]
   b4bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4bf4:	9301      	str	r3, [sp, #4]
   b4bf6:	bd08      	pop	{r3, pc}
   b4bf8:	00030248 	.word	0x00030248

000b4bfc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4bfc:	b508      	push	{r3, lr}
   b4bfe:	4b02      	ldr	r3, [pc, #8]	; (b4c08 <inet_inet_ntop+0xc>)
   b4c00:	681b      	ldr	r3, [r3, #0]
   b4c02:	695b      	ldr	r3, [r3, #20]
   b4c04:	9301      	str	r3, [sp, #4]
   b4c06:	bd08      	pop	{r3, pc}
   b4c08:	00030264 	.word	0x00030264

000b4c0c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b4c0c:	b508      	push	{r3, lr}
   b4c0e:	4b02      	ldr	r3, [pc, #8]	; (b4c18 <inet_htonl+0xc>)
   b4c10:	681b      	ldr	r3, [r3, #0]
   b4c12:	6a1b      	ldr	r3, [r3, #32]
   b4c14:	9301      	str	r3, [sp, #4]
   b4c16:	bd08      	pop	{r3, pc}
   b4c18:	00030264 	.word	0x00030264

000b4c1c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b4c1c:	b508      	push	{r3, lr}
   b4c1e:	4b02      	ldr	r3, [pc, #8]	; (b4c28 <inet_htons+0xc>)
   b4c20:	681b      	ldr	r3, [r3, #0]
   b4c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4c24:	9301      	str	r3, [sp, #4]
   b4c26:	bd08      	pop	{r3, pc}
   b4c28:	00030264 	.word	0x00030264

000b4c2c <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b4c2c:	b508      	push	{r3, lr}
   b4c2e:	4b02      	ldr	r3, [pc, #8]	; (b4c38 <hal_usart_end+0xc>)
   b4c30:	681b      	ldr	r3, [r3, #0]
   b4c32:	689b      	ldr	r3, [r3, #8]
   b4c34:	9301      	str	r3, [sp, #4]
   b4c36:	bd08      	pop	{r3, pc}
   b4c38:	0003023c 	.word	0x0003023c

000b4c3c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4c3c:	b508      	push	{r3, lr}
   b4c3e:	4b02      	ldr	r3, [pc, #8]	; (b4c48 <hal_usart_write+0xc>)
   b4c40:	681b      	ldr	r3, [r3, #0]
   b4c42:	68db      	ldr	r3, [r3, #12]
   b4c44:	9301      	str	r3, [sp, #4]
   b4c46:	bd08      	pop	{r3, pc}
   b4c48:	0003023c 	.word	0x0003023c

000b4c4c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4c4c:	b508      	push	{r3, lr}
   b4c4e:	4b02      	ldr	r3, [pc, #8]	; (b4c58 <hal_usart_available+0xc>)
   b4c50:	681b      	ldr	r3, [r3, #0]
   b4c52:	691b      	ldr	r3, [r3, #16]
   b4c54:	9301      	str	r3, [sp, #4]
   b4c56:	bd08      	pop	{r3, pc}
   b4c58:	0003023c 	.word	0x0003023c

000b4c5c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4c5c:	b508      	push	{r3, lr}
   b4c5e:	4b02      	ldr	r3, [pc, #8]	; (b4c68 <hal_usart_read+0xc>)
   b4c60:	681b      	ldr	r3, [r3, #0]
   b4c62:	695b      	ldr	r3, [r3, #20]
   b4c64:	9301      	str	r3, [sp, #4]
   b4c66:	bd08      	pop	{r3, pc}
   b4c68:	0003023c 	.word	0x0003023c

000b4c6c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4c6c:	b508      	push	{r3, lr}
   b4c6e:	4b02      	ldr	r3, [pc, #8]	; (b4c78 <hal_usart_peek+0xc>)
   b4c70:	681b      	ldr	r3, [r3, #0]
   b4c72:	699b      	ldr	r3, [r3, #24]
   b4c74:	9301      	str	r3, [sp, #4]
   b4c76:	bd08      	pop	{r3, pc}
   b4c78:	0003023c 	.word	0x0003023c

000b4c7c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4c7c:	b508      	push	{r3, lr}
   b4c7e:	4b02      	ldr	r3, [pc, #8]	; (b4c88 <hal_usart_flush+0xc>)
   b4c80:	681b      	ldr	r3, [r3, #0]
   b4c82:	69db      	ldr	r3, [r3, #28]
   b4c84:	9301      	str	r3, [sp, #4]
   b4c86:	bd08      	pop	{r3, pc}
   b4c88:	0003023c 	.word	0x0003023c

000b4c8c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4c8c:	b508      	push	{r3, lr}
   b4c8e:	4b02      	ldr	r3, [pc, #8]	; (b4c98 <hal_usart_is_enabled+0xc>)
   b4c90:	681b      	ldr	r3, [r3, #0]
   b4c92:	6a1b      	ldr	r3, [r3, #32]
   b4c94:	9301      	str	r3, [sp, #4]
   b4c96:	bd08      	pop	{r3, pc}
   b4c98:	0003023c 	.word	0x0003023c

000b4c9c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4c9c:	b508      	push	{r3, lr}
   b4c9e:	4b02      	ldr	r3, [pc, #8]	; (b4ca8 <hal_usart_available_data_for_write+0xc>)
   b4ca0:	681b      	ldr	r3, [r3, #0]
   b4ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4ca4:	9301      	str	r3, [sp, #4]
   b4ca6:	bd08      	pop	{r3, pc}
   b4ca8:	0003023c 	.word	0x0003023c

000b4cac <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b4cac:	b508      	push	{r3, lr}
   b4cae:	4b02      	ldr	r3, [pc, #8]	; (b4cb8 <hal_usart_begin_config+0xc>)
   b4cb0:	681b      	ldr	r3, [r3, #0]
   b4cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4cb4:	9301      	str	r3, [sp, #4]
   b4cb6:	bd08      	pop	{r3, pc}
   b4cb8:	0003023c 	.word	0x0003023c

000b4cbc <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4cbc:	b508      	push	{r3, lr}
   b4cbe:	4b02      	ldr	r3, [pc, #8]	; (b4cc8 <hal_usart_init_ex+0xc>)
   b4cc0:	681b      	ldr	r3, [r3, #0]
   b4cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4cc4:	9301      	str	r3, [sp, #4]
   b4cc6:	bd08      	pop	{r3, pc}
   b4cc8:	0003023c 	.word	0x0003023c

000b4ccc <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4ccc:	b508      	push	{r3, lr}
   b4cce:	4b02      	ldr	r3, [pc, #8]	; (b4cd8 <hal_i2c_write+0xc>)
   b4cd0:	681b      	ldr	r3, [r3, #0]
   b4cd2:	6a1b      	ldr	r3, [r3, #32]
   b4cd4:	9301      	str	r3, [sp, #4]
   b4cd6:	bd08      	pop	{r3, pc}
   b4cd8:	00030228 	.word	0x00030228

000b4cdc <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4cdc:	b508      	push	{r3, lr}
   b4cde:	4b02      	ldr	r3, [pc, #8]	; (b4ce8 <hal_i2c_available+0xc>)
   b4ce0:	681b      	ldr	r3, [r3, #0]
   b4ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4ce4:	9301      	str	r3, [sp, #4]
   b4ce6:	bd08      	pop	{r3, pc}
   b4ce8:	00030228 	.word	0x00030228

000b4cec <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4cec:	b508      	push	{r3, lr}
   b4cee:	4b02      	ldr	r3, [pc, #8]	; (b4cf8 <hal_i2c_read+0xc>)
   b4cf0:	681b      	ldr	r3, [r3, #0]
   b4cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4cf4:	9301      	str	r3, [sp, #4]
   b4cf6:	bd08      	pop	{r3, pc}
   b4cf8:	00030228 	.word	0x00030228

000b4cfc <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4cfc:	b508      	push	{r3, lr}
   b4cfe:	4b02      	ldr	r3, [pc, #8]	; (b4d08 <hal_i2c_peek+0xc>)
   b4d00:	681b      	ldr	r3, [r3, #0]
   b4d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4d04:	9301      	str	r3, [sp, #4]
   b4d06:	bd08      	pop	{r3, pc}
   b4d08:	00030228 	.word	0x00030228

000b4d0c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4d0c:	b508      	push	{r3, lr}
   b4d0e:	4b02      	ldr	r3, [pc, #8]	; (b4d18 <hal_i2c_flush+0xc>)
   b4d10:	681b      	ldr	r3, [r3, #0]
   b4d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4d14:	9301      	str	r3, [sp, #4]
   b4d16:	bd08      	pop	{r3, pc}
   b4d18:	00030228 	.word	0x00030228

000b4d1c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4d1c:	b508      	push	{r3, lr}
   b4d1e:	4b02      	ldr	r3, [pc, #8]	; (b4d28 <hal_i2c_is_enabled+0xc>)
   b4d20:	681b      	ldr	r3, [r3, #0]
   b4d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4d24:	9301      	str	r3, [sp, #4]
   b4d26:	bd08      	pop	{r3, pc}
   b4d28:	00030228 	.word	0x00030228

000b4d2c <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4d2c:	b508      	push	{r3, lr}
   b4d2e:	4b02      	ldr	r3, [pc, #8]	; (b4d38 <hal_i2c_init+0xc>)
   b4d30:	681b      	ldr	r3, [r3, #0]
   b4d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4d34:	9301      	str	r3, [sp, #4]
   b4d36:	bd08      	pop	{r3, pc}
   b4d38:	00030228 	.word	0x00030228

000b4d3c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b4d3c:	b508      	push	{r3, lr}
   b4d3e:	4b02      	ldr	r3, [pc, #8]	; (b4d48 <sock_setsockopt+0xc>)
   b4d40:	681b      	ldr	r3, [r3, #0]
   b4d42:	699b      	ldr	r3, [r3, #24]
   b4d44:	9301      	str	r3, [sp, #4]
   b4d46:	bd08      	pop	{r3, pc}
   b4d48:	00030238 	.word	0x00030238

000b4d4c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b4d4c:	b508      	push	{r3, lr}
   b4d4e:	4b02      	ldr	r3, [pc, #8]	; (b4d58 <sock_close+0xc>)
   b4d50:	681b      	ldr	r3, [r3, #0]
   b4d52:	69db      	ldr	r3, [r3, #28]
   b4d54:	9301      	str	r3, [sp, #4]
   b4d56:	bd08      	pop	{r3, pc}
   b4d58:	00030238 	.word	0x00030238

000b4d5c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b4d5c:	b508      	push	{r3, lr}
   b4d5e:	4b02      	ldr	r3, [pc, #8]	; (b4d68 <sock_connect+0xc>)
   b4d60:	681b      	ldr	r3, [r3, #0]
   b4d62:	6a1b      	ldr	r3, [r3, #32]
   b4d64:	9301      	str	r3, [sp, #4]
   b4d66:	bd08      	pop	{r3, pc}
   b4d68:	00030238 	.word	0x00030238

000b4d6c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b4d6c:	b508      	push	{r3, lr}
   b4d6e:	4b02      	ldr	r3, [pc, #8]	; (b4d78 <sock_recv+0xc>)
   b4d70:	681b      	ldr	r3, [r3, #0]
   b4d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4d74:	9301      	str	r3, [sp, #4]
   b4d76:	bd08      	pop	{r3, pc}
   b4d78:	00030238 	.word	0x00030238

000b4d7c <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b4d7c:	b508      	push	{r3, lr}
   b4d7e:	4b02      	ldr	r3, [pc, #8]	; (b4d88 <sock_send+0xc>)
   b4d80:	681b      	ldr	r3, [r3, #0]
   b4d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4d84:	9301      	str	r3, [sp, #4]
   b4d86:	bd08      	pop	{r3, pc}
   b4d88:	00030238 	.word	0x00030238

000b4d8c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b4d8c:	b508      	push	{r3, lr}
   b4d8e:	4b02      	ldr	r3, [pc, #8]	; (b4d98 <sock_socket+0xc>)
   b4d90:	681b      	ldr	r3, [r3, #0]
   b4d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b4d94:	9301      	str	r3, [sp, #4]
   b4d96:	bd08      	pop	{r3, pc}
   b4d98:	00030238 	.word	0x00030238

000b4d9c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b4d9c:	b508      	push	{r3, lr}
   b4d9e:	4b02      	ldr	r3, [pc, #8]	; (b4da8 <hal_spi_begin+0xc>)
   b4da0:	681b      	ldr	r3, [r3, #0]
   b4da2:	681b      	ldr	r3, [r3, #0]
   b4da4:	9301      	str	r3, [sp, #4]
   b4da6:	bd08      	pop	{r3, pc}
   b4da8:	00030230 	.word	0x00030230

000b4dac <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b4dac:	b508      	push	{r3, lr}
   b4dae:	4b02      	ldr	r3, [pc, #8]	; (b4db8 <hal_spi_transfer+0xc>)
   b4db0:	681b      	ldr	r3, [r3, #0]
   b4db2:	695b      	ldr	r3, [r3, #20]
   b4db4:	9301      	str	r3, [sp, #4]
   b4db6:	bd08      	pop	{r3, pc}
   b4db8:	00030230 	.word	0x00030230

000b4dbc <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4dbc:	b508      	push	{r3, lr}
   b4dbe:	4b02      	ldr	r3, [pc, #8]	; (b4dc8 <hal_spi_init+0xc>)
   b4dc0:	681b      	ldr	r3, [r3, #0]
   b4dc2:	69db      	ldr	r3, [r3, #28]
   b4dc4:	9301      	str	r3, [sp, #4]
   b4dc6:	bd08      	pop	{r3, pc}
   b4dc8:	00030230 	.word	0x00030230

000b4dcc <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4dcc:	b508      	push	{r3, lr}
   b4dce:	4b02      	ldr	r3, [pc, #8]	; (b4dd8 <hal_spi_is_enabled+0xc>)
   b4dd0:	681b      	ldr	r3, [r3, #0]
   b4dd2:	6a1b      	ldr	r3, [r3, #32]
   b4dd4:	9301      	str	r3, [sp, #4]
   b4dd6:	bd08      	pop	{r3, pc}
   b4dd8:	00030230 	.word	0x00030230

000b4ddc <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b4ddc:	b508      	push	{r3, lr}
   b4dde:	4b02      	ldr	r3, [pc, #8]	; (b4de8 <hal_spi_info+0xc>)
   b4de0:	681b      	ldr	r3, [r3, #0]
   b4de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4de4:	9301      	str	r3, [sp, #4]
   b4de6:	bd08      	pop	{r3, pc}
   b4de8:	00030230 	.word	0x00030230

000b4dec <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b4dec:	b508      	push	{r3, lr}
   b4dee:	4b02      	ldr	r3, [pc, #8]	; (b4df8 <hal_spi_set_settings+0xc>)
   b4df0:	681b      	ldr	r3, [r3, #0]
   b4df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4df4:	9301      	str	r3, [sp, #4]
   b4df6:	bd08      	pop	{r3, pc}
   b4df8:	00030230 	.word	0x00030230

000b4dfc <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b4dfc:	b508      	push	{r3, lr}
   b4dfe:	4b02      	ldr	r3, [pc, #8]	; (b4e08 <hal_spi_acquire+0xc>)
   b4e00:	681b      	ldr	r3, [r3, #0]
   b4e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4e04:	9301      	str	r3, [sp, #4]
   b4e06:	bd08      	pop	{r3, pc}
   b4e08:	00030230 	.word	0x00030230

000b4e0c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b4e0c:	b508      	push	{r3, lr}
   b4e0e:	4b02      	ldr	r3, [pc, #8]	; (b4e18 <hal_spi_release+0xc>)
   b4e10:	681b      	ldr	r3, [r3, #0]
   b4e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4e14:	9301      	str	r3, [sp, #4]
   b4e16:	bd08      	pop	{r3, pc}
   b4e18:	00030230 	.word	0x00030230

000b4e1c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4e1c:	b508      	push	{r3, lr}
   b4e1e:	4b02      	ldr	r3, [pc, #8]	; (b4e28 <HAL_USB_USART_Init+0xc>)
   b4e20:	681b      	ldr	r3, [r3, #0]
   b4e22:	681b      	ldr	r3, [r3, #0]
   b4e24:	9301      	str	r3, [sp, #4]
   b4e26:	bd08      	pop	{r3, pc}
   b4e28:	0003024c 	.word	0x0003024c

000b4e2c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4e2c:	b508      	push	{r3, lr}
   b4e2e:	4b02      	ldr	r3, [pc, #8]	; (b4e38 <HAL_USB_USART_Begin+0xc>)
   b4e30:	681b      	ldr	r3, [r3, #0]
   b4e32:	685b      	ldr	r3, [r3, #4]
   b4e34:	9301      	str	r3, [sp, #4]
   b4e36:	bd08      	pop	{r3, pc}
   b4e38:	0003024c 	.word	0x0003024c

000b4e3c <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b4e3c:	b508      	push	{r3, lr}
   b4e3e:	4b02      	ldr	r3, [pc, #8]	; (b4e48 <HAL_USB_USART_End+0xc>)
   b4e40:	681b      	ldr	r3, [r3, #0]
   b4e42:	689b      	ldr	r3, [r3, #8]
   b4e44:	9301      	str	r3, [sp, #4]
   b4e46:	bd08      	pop	{r3, pc}
   b4e48:	0003024c 	.word	0x0003024c

000b4e4c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4e4c:	b508      	push	{r3, lr}
   b4e4e:	4b02      	ldr	r3, [pc, #8]	; (b4e58 <HAL_USB_USART_Available_Data+0xc>)
   b4e50:	681b      	ldr	r3, [r3, #0]
   b4e52:	691b      	ldr	r3, [r3, #16]
   b4e54:	9301      	str	r3, [sp, #4]
   b4e56:	bd08      	pop	{r3, pc}
   b4e58:	0003024c 	.word	0x0003024c

000b4e5c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4e5c:	b508      	push	{r3, lr}
   b4e5e:	4b02      	ldr	r3, [pc, #8]	; (b4e68 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4e60:	681b      	ldr	r3, [r3, #0]
   b4e62:	695b      	ldr	r3, [r3, #20]
   b4e64:	9301      	str	r3, [sp, #4]
   b4e66:	bd08      	pop	{r3, pc}
   b4e68:	0003024c 	.word	0x0003024c

000b4e6c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4e6c:	b508      	push	{r3, lr}
   b4e6e:	4b02      	ldr	r3, [pc, #8]	; (b4e78 <HAL_USB_USART_Receive_Data+0xc>)
   b4e70:	681b      	ldr	r3, [r3, #0]
   b4e72:	699b      	ldr	r3, [r3, #24]
   b4e74:	9301      	str	r3, [sp, #4]
   b4e76:	bd08      	pop	{r3, pc}
   b4e78:	0003024c 	.word	0x0003024c

000b4e7c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4e7c:	b508      	push	{r3, lr}
   b4e7e:	4b02      	ldr	r3, [pc, #8]	; (b4e88 <HAL_USB_USART_Send_Data+0xc>)
   b4e80:	681b      	ldr	r3, [r3, #0]
   b4e82:	69db      	ldr	r3, [r3, #28]
   b4e84:	9301      	str	r3, [sp, #4]
   b4e86:	bd08      	pop	{r3, pc}
   b4e88:	0003024c 	.word	0x0003024c

000b4e8c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4e8c:	b508      	push	{r3, lr}
   b4e8e:	4b02      	ldr	r3, [pc, #8]	; (b4e98 <HAL_USB_USART_Flush_Data+0xc>)
   b4e90:	681b      	ldr	r3, [r3, #0]
   b4e92:	6a1b      	ldr	r3, [r3, #32]
   b4e94:	9301      	str	r3, [sp, #4]
   b4e96:	bd08      	pop	{r3, pc}
   b4e98:	0003024c 	.word	0x0003024c

000b4e9c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b4e9c:	b508      	push	{r3, lr}
   b4e9e:	4b02      	ldr	r3, [pc, #8]	; (b4ea8 <panic_+0xc>)
   b4ea0:	681b      	ldr	r3, [r3, #0]
   b4ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4ea4:	9301      	str	r3, [sp, #4]
   b4ea6:	bd08      	pop	{r3, pc}
   b4ea8:	00030260 	.word	0x00030260

000b4eac <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b4eac:	b508      	push	{r3, lr}
   b4eae:	4b02      	ldr	r3, [pc, #8]	; (b4eb8 <log_message+0xc>)
   b4eb0:	681b      	ldr	r3, [r3, #0]
   b4eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4eb4:	9301      	str	r3, [sp, #4]
   b4eb6:	bd08      	pop	{r3, pc}
   b4eb8:	00030260 	.word	0x00030260

000b4ebc <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b4ebc:	b508      	push	{r3, lr}
   b4ebe:	4b02      	ldr	r3, [pc, #8]	; (b4ec8 <log_message_v+0xc>)
   b4ec0:	681b      	ldr	r3, [r3, #0]
   b4ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4ec4:	9301      	str	r3, [sp, #4]
   b4ec6:	bd08      	pop	{r3, pc}
   b4ec8:	00030260 	.word	0x00030260

000b4ecc <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b4ecc:	b508      	push	{r3, lr}
   b4ece:	4b02      	ldr	r3, [pc, #8]	; (b4ed8 <log_level_name+0xc>)
   b4ed0:	681b      	ldr	r3, [r3, #0]
   b4ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b4ed4:	9301      	str	r3, [sp, #4]
   b4ed6:	bd08      	pop	{r3, pc}
   b4ed8:	00030260 	.word	0x00030260

000b4edc <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b4edc:	b508      	push	{r3, lr}
   b4ede:	4b02      	ldr	r3, [pc, #8]	; (b4ee8 <log_set_callbacks+0xc>)
   b4ee0:	681b      	ldr	r3, [r3, #0]
   b4ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b4ee4:	9301      	str	r3, [sp, #4]
   b4ee6:	bd08      	pop	{r3, pc}
   b4ee8:	00030260 	.word	0x00030260

000b4eec <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4eec:	b508      	push	{r3, lr}
   b4eee:	4b02      	ldr	r3, [pc, #8]	; (b4ef8 <set_system_mode+0xc>)
   b4ef0:	681b      	ldr	r3, [r3, #0]
   b4ef2:	685b      	ldr	r3, [r3, #4]
   b4ef4:	9301      	str	r3, [sp, #4]
   b4ef6:	bd08      	pop	{r3, pc}
   b4ef8:	00030220 	.word	0x00030220

000b4efc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4efc:	b508      	push	{r3, lr}
   b4efe:	4b02      	ldr	r3, [pc, #8]	; (b4f08 <system_delay_ms+0xc>)
   b4f00:	681b      	ldr	r3, [r3, #0]
   b4f02:	695b      	ldr	r3, [r3, #20]
   b4f04:	9301      	str	r3, [sp, #4]
   b4f06:	bd08      	pop	{r3, pc}
   b4f08:	00030220 	.word	0x00030220

000b4f0c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b4f0c:	b508      	push	{r3, lr}
   b4f0e:	4b02      	ldr	r3, [pc, #8]	; (b4f18 <system_thread_set_state+0xc>)
   b4f10:	681b      	ldr	r3, [r3, #0]
   b4f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4f14:	9301      	str	r3, [sp, #4]
   b4f16:	bd08      	pop	{r3, pc}
   b4f18:	00030220 	.word	0x00030220

000b4f1c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4f1c:	b508      	push	{r3, lr}
   b4f1e:	4b03      	ldr	r3, [pc, #12]	; (b4f2c <system_ctrl_set_app_request_handler+0x10>)
   b4f20:	681b      	ldr	r3, [r3, #0]
   b4f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4f26:	9301      	str	r3, [sp, #4]
   b4f28:	bd08      	pop	{r3, pc}
   b4f2a:	0000      	.short	0x0000
   b4f2c:	00030220 	.word	0x00030220

000b4f30 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4f30:	b508      	push	{r3, lr}
   b4f32:	4b03      	ldr	r3, [pc, #12]	; (b4f40 <system_ctrl_set_result+0x10>)
   b4f34:	681b      	ldr	r3, [r3, #0]
   b4f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4f3a:	9301      	str	r3, [sp, #4]
   b4f3c:	bd08      	pop	{r3, pc}
   b4f3e:	0000      	.short	0x0000
   b4f40:	00030220 	.word	0x00030220

000b4f44 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4f44:	b508      	push	{r3, lr}
   b4f46:	4b02      	ldr	r3, [pc, #8]	; (b4f50 <network_connect+0xc>)
   b4f48:	681b      	ldr	r3, [r3, #0]
   b4f4a:	685b      	ldr	r3, [r3, #4]
   b4f4c:	9301      	str	r3, [sp, #4]
   b4f4e:	bd08      	pop	{r3, pc}
   b4f50:	00030240 	.word	0x00030240

000b4f54 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4f54:	b508      	push	{r3, lr}
   b4f56:	4b02      	ldr	r3, [pc, #8]	; (b4f60 <network_connecting+0xc>)
   b4f58:	681b      	ldr	r3, [r3, #0]
   b4f5a:	689b      	ldr	r3, [r3, #8]
   b4f5c:	9301      	str	r3, [sp, #4]
   b4f5e:	bd08      	pop	{r3, pc}
   b4f60:	00030240 	.word	0x00030240

000b4f64 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4f64:	b508      	push	{r3, lr}
   b4f66:	4b02      	ldr	r3, [pc, #8]	; (b4f70 <network_disconnect+0xc>)
   b4f68:	681b      	ldr	r3, [r3, #0]
   b4f6a:	68db      	ldr	r3, [r3, #12]
   b4f6c:	9301      	str	r3, [sp, #4]
   b4f6e:	bd08      	pop	{r3, pc}
   b4f70:	00030240 	.word	0x00030240

000b4f74 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4f74:	b508      	push	{r3, lr}
   b4f76:	4b02      	ldr	r3, [pc, #8]	; (b4f80 <network_ready+0xc>)
   b4f78:	681b      	ldr	r3, [r3, #0]
   b4f7a:	691b      	ldr	r3, [r3, #16]
   b4f7c:	9301      	str	r3, [sp, #4]
   b4f7e:	bd08      	pop	{r3, pc}
   b4f80:	00030240 	.word	0x00030240

000b4f84 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4f84:	b508      	push	{r3, lr}
   b4f86:	4b02      	ldr	r3, [pc, #8]	; (b4f90 <network_on+0xc>)
   b4f88:	681b      	ldr	r3, [r3, #0]
   b4f8a:	695b      	ldr	r3, [r3, #20]
   b4f8c:	9301      	str	r3, [sp, #4]
   b4f8e:	bd08      	pop	{r3, pc}
   b4f90:	00030240 	.word	0x00030240

000b4f94 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4f94:	b508      	push	{r3, lr}
   b4f96:	4b02      	ldr	r3, [pc, #8]	; (b4fa0 <network_off+0xc>)
   b4f98:	681b      	ldr	r3, [r3, #0]
   b4f9a:	699b      	ldr	r3, [r3, #24]
   b4f9c:	9301      	str	r3, [sp, #4]
   b4f9e:	bd08      	pop	{r3, pc}
   b4fa0:	00030240 	.word	0x00030240

000b4fa4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4fa4:	b508      	push	{r3, lr}
   b4fa6:	4b02      	ldr	r3, [pc, #8]	; (b4fb0 <network_listen+0xc>)
   b4fa8:	681b      	ldr	r3, [r3, #0]
   b4faa:	69db      	ldr	r3, [r3, #28]
   b4fac:	9301      	str	r3, [sp, #4]
   b4fae:	bd08      	pop	{r3, pc}
   b4fb0:	00030240 	.word	0x00030240

000b4fb4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4fb4:	b508      	push	{r3, lr}
   b4fb6:	4b02      	ldr	r3, [pc, #8]	; (b4fc0 <network_listening+0xc>)
   b4fb8:	681b      	ldr	r3, [r3, #0]
   b4fba:	6a1b      	ldr	r3, [r3, #32]
   b4fbc:	9301      	str	r3, [sp, #4]
   b4fbe:	bd08      	pop	{r3, pc}
   b4fc0:	00030240 	.word	0x00030240

000b4fc4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4fc4:	b508      	push	{r3, lr}
   b4fc6:	4b02      	ldr	r3, [pc, #8]	; (b4fd0 <network_set_listen_timeout+0xc>)
   b4fc8:	681b      	ldr	r3, [r3, #0]
   b4fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4fcc:	9301      	str	r3, [sp, #4]
   b4fce:	bd08      	pop	{r3, pc}
   b4fd0:	00030240 	.word	0x00030240

000b4fd4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4fd4:	b508      	push	{r3, lr}
   b4fd6:	4b02      	ldr	r3, [pc, #8]	; (b4fe0 <network_get_listen_timeout+0xc>)
   b4fd8:	681b      	ldr	r3, [r3, #0]
   b4fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4fdc:	9301      	str	r3, [sp, #4]
   b4fde:	bd08      	pop	{r3, pc}
   b4fe0:	00030240 	.word	0x00030240

000b4fe4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4fe4:	b508      	push	{r3, lr}
   b4fe6:	4b02      	ldr	r3, [pc, #8]	; (b4ff0 <network_is_on+0xc>)
   b4fe8:	681b      	ldr	r3, [r3, #0]
   b4fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4fec:	9301      	str	r3, [sp, #4]
   b4fee:	bd08      	pop	{r3, pc}
   b4ff0:	00030240 	.word	0x00030240

000b4ff4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4ff4:	b508      	push	{r3, lr}
   b4ff6:	4b02      	ldr	r3, [pc, #8]	; (b5000 <network_is_off+0xc>)
   b4ff8:	681b      	ldr	r3, [r3, #0]
   b4ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4ffc:	9301      	str	r3, [sp, #4]
   b4ffe:	bd08      	pop	{r3, pc}
   b5000:	00030240 	.word	0x00030240

000b5004 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5004:	b508      	push	{r3, lr}
   b5006:	4b02      	ldr	r3, [pc, #8]	; (b5010 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5008:	681b      	ldr	r3, [r3, #0]
   b500a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b500c:	9301      	str	r3, [sp, #4]
   b500e:	bd08      	pop	{r3, pc}
   b5010:	00030244 	.word	0x00030244

000b5014 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5014:	b508      	push	{r3, lr}
   b5016:	4b02      	ldr	r3, [pc, #8]	; (b5020 <malloc+0xc>)
   b5018:	681b      	ldr	r3, [r3, #0]
   b501a:	681b      	ldr	r3, [r3, #0]
   b501c:	9301      	str	r3, [sp, #4]
   b501e:	bd08      	pop	{r3, pc}
   b5020:	0003021c 	.word	0x0003021c

000b5024 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5024:	b508      	push	{r3, lr}
   b5026:	4b02      	ldr	r3, [pc, #8]	; (b5030 <free+0xc>)
   b5028:	681b      	ldr	r3, [r3, #0]
   b502a:	685b      	ldr	r3, [r3, #4]
   b502c:	9301      	str	r3, [sp, #4]
   b502e:	bd08      	pop	{r3, pc}
   b5030:	0003021c 	.word	0x0003021c

000b5034 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5034:	b508      	push	{r3, lr}
   b5036:	4b02      	ldr	r3, [pc, #8]	; (b5040 <realloc+0xc>)
   b5038:	681b      	ldr	r3, [r3, #0]
   b503a:	689b      	ldr	r3, [r3, #8]
   b503c:	9301      	str	r3, [sp, #4]
   b503e:	bd08      	pop	{r3, pc}
   b5040:	0003021c 	.word	0x0003021c

000b5044 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5044:	b508      	push	{r3, lr}
   b5046:	4b02      	ldr	r3, [pc, #8]	; (b5050 <vsnprintf+0xc>)
   b5048:	681b      	ldr	r3, [r3, #0]
   b504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b504c:	9301      	str	r3, [sp, #4]
   b504e:	bd08      	pop	{r3, pc}
   b5050:	0003021c 	.word	0x0003021c

000b5054 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b5054:	b508      	push	{r3, lr}
   b5056:	4b02      	ldr	r3, [pc, #8]	; (b5060 <abort+0xc>)
   b5058:	681b      	ldr	r3, [r3, #0]
   b505a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b505c:	9301      	str	r3, [sp, #4]
   b505e:	bd08      	pop	{r3, pc}
   b5060:	0003021c 	.word	0x0003021c

000b5064 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b5064:	b508      	push	{r3, lr}
   b5066:	4b02      	ldr	r3, [pc, #8]	; (b5070 <__errno+0xc>)
   b5068:	681b      	ldr	r3, [r3, #0]
   b506a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b506c:	9301      	str	r3, [sp, #4]
   b506e:	bd08      	pop	{r3, pc}
   b5070:	0003021c 	.word	0x0003021c

000b5074 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5074:	b508      	push	{r3, lr}
   b5076:	4b02      	ldr	r3, [pc, #8]	; (b5080 <__assert_func+0xc>)
   b5078:	681b      	ldr	r3, [r3, #0]
   b507a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b507c:	9301      	str	r3, [sp, #4]
   b507e:	bd08      	pop	{r3, pc}
   b5080:	0003021c 	.word	0x0003021c

000b5084 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5084:	b508      	push	{r3, lr}
   b5086:	4b02      	ldr	r3, [pc, #8]	; (b5090 <newlib_impure_ptr_callback+0xc>)
   b5088:	681b      	ldr	r3, [r3, #0]
   b508a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b508c:	9301      	str	r3, [sp, #4]
   b508e:	bd08      	pop	{r3, pc}
   b5090:	0003021c 	.word	0x0003021c

000b5094 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5094:	2200      	movs	r2, #0
   b5096:	6840      	ldr	r0, [r0, #4]
   b5098:	4611      	mov	r1, r2
   b509a:	f7ff bf8b 	b.w	b4fb4 <network_listening>

000b509e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b509e:	2200      	movs	r2, #0
   b50a0:	6840      	ldr	r0, [r0, #4]
   b50a2:	4611      	mov	r1, r2
   b50a4:	f7ff bf96 	b.w	b4fd4 <network_get_listen_timeout>

000b50a8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b50a8:	6840      	ldr	r0, [r0, #4]
   b50aa:	2200      	movs	r2, #0
   b50ac:	f7ff bf8a 	b.w	b4fc4 <network_set_listen_timeout>

000b50b0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b50b0:	6840      	ldr	r0, [r0, #4]
   b50b2:	2200      	movs	r2, #0
   b50b4:	f081 0101 	eor.w	r1, r1, #1
   b50b8:	f7ff bf74 	b.w	b4fa4 <network_listen>

000b50bc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b50bc:	2300      	movs	r3, #0
   b50be:	6840      	ldr	r0, [r0, #4]
   b50c0:	461a      	mov	r2, r3
   b50c2:	4619      	mov	r1, r3
   b50c4:	f7ff bf66 	b.w	b4f94 <network_off>

000b50c8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b50c8:	2300      	movs	r3, #0
   b50ca:	6840      	ldr	r0, [r0, #4]
   b50cc:	461a      	mov	r2, r3
   b50ce:	4619      	mov	r1, r3
   b50d0:	f7ff bf58 	b.w	b4f84 <network_on>

000b50d4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b50d4:	2200      	movs	r2, #0
   b50d6:	6840      	ldr	r0, [r0, #4]
   b50d8:	4611      	mov	r1, r2
   b50da:	f7ff bf4b 	b.w	b4f74 <network_ready>

000b50de <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b50de:	2200      	movs	r2, #0
   b50e0:	6840      	ldr	r0, [r0, #4]
   b50e2:	4611      	mov	r1, r2
   b50e4:	f7ff bf36 	b.w	b4f54 <network_connecting>

000b50e8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b50e8:	6840      	ldr	r0, [r0, #4]
   b50ea:	2200      	movs	r2, #0
   b50ec:	2102      	movs	r1, #2
   b50ee:	f7ff bf39 	b.w	b4f64 <network_disconnect>

000b50f2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b50f2:	2300      	movs	r3, #0
   b50f4:	6840      	ldr	r0, [r0, #4]
   b50f6:	461a      	mov	r2, r3
   b50f8:	f7ff bf24 	b.w	b4f44 <network_connect>

000b50fc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b50fc:	4b02      	ldr	r3, [pc, #8]	; (b5108 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b50fe:	2203      	movs	r2, #3
   b5100:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5102:	4a02      	ldr	r2, [pc, #8]	; (b510c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5104:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5106:	4770      	bx	lr
   b5108:	2003e688 	.word	0x2003e688
   b510c:	000b8a6c 	.word	0x000b8a6c

000b5110 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b5110:	2100      	movs	r1, #0
   b5112:	f7ff be7b 	b.w	b4e0c <hal_spi_release>

000b5116 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b5116:	2100      	movs	r1, #0
   b5118:	f7ff be70 	b.w	b4dfc <hal_spi_acquire>

000b511c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b511c:	b510      	push	{r4, lr}
   b511e:	4604      	mov	r4, r0
   b5120:	4608      	mov	r0, r1
{
    _spi = spi;
   b5122:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5124:	f7ff fe4a 	bl	b4dbc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5128:	2300      	movs	r3, #0
   b512a:	6063      	str	r3, [r4, #4]
}
   b512c:	4620      	mov	r0, r4
   b512e:	bd10      	pop	{r4, pc}

000b5130 <_ZN8SPIClass5beginEt>:
        unlock();
    }
}

void SPIClass::begin(uint16_t ss_pin)
{
   b5130:	b513      	push	{r0, r1, r4, lr}
   b5132:	4604      	mov	r4, r0
    if (!lock())
   b5134:	7800      	ldrb	r0, [r0, #0]
{
   b5136:	9101      	str	r1, [sp, #4]
    if (!lock())
   b5138:	f7ff ffed 	bl	b5116 <_ZN8SPIClass4lockEv.isra.0>
   b513c:	9901      	ldr	r1, [sp, #4]
   b513e:	b948      	cbnz	r0, b5154 <_ZN8SPIClass5beginEt+0x24>
   b5140:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, ss_pin);
   b5142:	9001      	str	r0, [sp, #4]
   b5144:	f7ff fe2a 	bl	b4d9c <hal_spi_begin>
        unlock();
   b5148:	9801      	ldr	r0, [sp, #4]
    }
}
   b514a:	b002      	add	sp, #8
   b514c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5150:	f7ff bfde 	b.w	b5110 <_ZN8SPIClass6unlockEv.isra.0>
   b5154:	b002      	add	sp, #8
   b5156:	bd10      	pop	{r4, pc}

000b5158 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b5158:	7800      	ldrb	r0, [r0, #0]
   b515a:	f7ff bfd9 	b.w	b5110 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b5160 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b5160:	0840      	lsrs	r0, r0, #1
{
   b5162:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b5164:	6018      	str	r0, [r3, #0]
   b5166:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b5168:	6818      	ldr	r0, [r3, #0]
   b516a:	4288      	cmp	r0, r1
   b516c:	b2e5      	uxtb	r5, r4
   b516e:	d906      	bls.n	b517e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b5170:	3401      	adds	r4, #1
   b5172:	2c08      	cmp	r4, #8
   b5174:	d002      	beq.n	b517c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b5176:	0840      	lsrs	r0, r0, #1
   b5178:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b517a:	e7f5      	b.n	b5168 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b517c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b517e:	4b02      	ldr	r3, [pc, #8]	; (b5188 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b5180:	5d5b      	ldrb	r3, [r3, r5]
   b5182:	7013      	strb	r3, [r2, #0]
}
   b5184:	bd30      	pop	{r4, r5, pc}
   b5186:	bf00      	nop
   b5188:	000b8aa0 	.word	0x000b8aa0

000b518c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b518c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5190:	4606      	mov	r6, r0
   b5192:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b5194:	7800      	ldrb	r0, [r0, #0]
{
   b5196:	460c      	mov	r4, r1
    CHECK(lock());
   b5198:	f7ff ffbd 	bl	b5116 <_ZN8SPIClass4lockEv.isra.0>
   b519c:	2800      	cmp	r0, #0
   b519e:	db1b      	blt.n	b51d8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b51a0:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b51a2:	2214      	movs	r2, #20
   b51a4:	2100      	movs	r1, #0
   b51a6:	a809      	add	r0, sp, #36	; 0x24
   b51a8:	f003 fa14 	bl	b85d4 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b51ac:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b51ae:	2200      	movs	r2, #0
   b51b0:	a909      	add	r1, sp, #36	; 0x24
   b51b2:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b51b4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b51b8:	f7ff fe10 	bl	b4ddc <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b51bc:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b51c0:	b113      	cbz	r3, b51c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b51c2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b51c6:	b155      	cbz	r5, b51de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b51c8:	2700      	movs	r7, #0
   b51ca:	46b9      	mov	r9, r7
   b51cc:	46b8      	mov	r8, r7
   b51ce:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b51d0:	7923      	ldrb	r3, [r4, #4]
   b51d2:	b15d      	cbz	r5, b51ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b51d4:	b1c3      	cbz	r3, b5208 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b51d6:	2000      	movs	r0, #0
}
   b51d8:	b00f      	add	sp, #60	; 0x3c
   b51da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b51de:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b51e2:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b51e6:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b51ea:	e7f1      	b.n	b51d0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b51ec:	2b00      	cmp	r3, #0
   b51ee:	d135      	bne.n	b525c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b51f0:	68a3      	ldr	r3, [r4, #8]
   b51f2:	4543      	cmp	r3, r8
   b51f4:	d108      	bne.n	b5208 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b51f6:	f88d 9020 	strb.w	r9, [sp, #32]
   b51fa:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b51fe:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b5202:	89a3      	ldrh	r3, [r4, #12]
   b5204:	429a      	cmp	r2, r3
   b5206:	d0e6      	beq.n	b51d6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b5208:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b520a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b520c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b5210:	980a      	ldr	r0, [sp, #40]	; 0x28
   b5212:	ab04      	add	r3, sp, #16
   b5214:	f10d 020f 	add.w	r2, sp, #15
   b5218:	f7ff ffa2 	bl	b5160 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b521c:	7921      	ldrb	r1, [r4, #4]
   b521e:	b985      	cbnz	r5, b5242 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b5220:	b989      	cbnz	r1, b5246 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b5222:	68a3      	ldr	r3, [r4, #8]
   b5224:	4543      	cmp	r3, r8
   b5226:	d30e      	bcc.n	b5246 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b5228:	f88d 9020 	strb.w	r9, [sp, #32]
   b522c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b5230:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b5234:	89a3      	ldrh	r3, [r4, #12]
   b5236:	429a      	cmp	r2, r3
   b5238:	d105      	bne.n	b5246 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b523a:	9b04      	ldr	r3, [sp, #16]
   b523c:	4543      	cmp	r3, r8
   b523e:	d102      	bne.n	b5246 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b5240:	e7c9      	b.n	b51d6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b5242:	2900      	cmp	r1, #0
   b5244:	d1f9      	bne.n	b523a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b5246:	2300      	movs	r3, #0
   b5248:	9301      	str	r3, [sp, #4]
   b524a:	7b63      	ldrb	r3, [r4, #13]
   b524c:	9300      	str	r3, [sp, #0]
   b524e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b5252:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b5254:	7830      	ldrb	r0, [r6, #0]
   b5256:	f7ff fdc9 	bl	b4dec <hal_spi_set_settings>
   b525a:	e7bc      	b.n	b51d6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b525c:	e9cd 5500 	strd	r5, r5, [sp]
   b5260:	462b      	mov	r3, r5
   b5262:	462a      	mov	r2, r5
   b5264:	2101      	movs	r1, #1
   b5266:	e7f5      	b.n	b5254 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b5268 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b5268:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b526a:	7800      	ldrb	r0, [r0, #0]
   b526c:	f7ff fd9e 	bl	b4dac <hal_spi_transfer>
}
   b5270:	b2c0      	uxtb	r0, r0
   b5272:	bd08      	pop	{r3, pc}

000b5274 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5274:	4b05      	ldr	r3, [pc, #20]	; (b528c <_GLOBAL__sub_I_System+0x18>)
   b5276:	2202      	movs	r2, #2
   b5278:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b527a:	4b05      	ldr	r3, [pc, #20]	; (b5290 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b527c:	4a05      	ldr	r2, [pc, #20]	; (b5294 <_GLOBAL__sub_I_System+0x20>)
   b527e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5280:	2000      	movs	r0, #0
   b5282:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5286:	f7ff be31 	b.w	b4eec <set_system_mode>
   b528a:	bf00      	nop
   b528c:	2003e69c 	.word	0x2003e69c
   b5290:	2003e690 	.word	0x2003e690
   b5294:	ffff0000 	.word	0xffff0000

000b5298 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b5298:	b510      	push	{r4, lr}
   b529a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b529c:	f7fe fec8 	bl	b4030 <strlen>
   b52a0:	3801      	subs	r0, #1
   b52a2:	1823      	adds	r3, r4, r0
   b52a4:	4620      	mov	r0, r4
	while(i<j){
   b52a6:	4283      	cmp	r3, r0
   b52a8:	d906      	bls.n	b52b8 <_Z11str_reversePc+0x20>
		c = *i;
   b52aa:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b52ac:	7819      	ldrb	r1, [r3, #0]
   b52ae:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b52b2:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b52b6:	e7f6      	b.n	b52a6 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b52b8:	bd10      	pop	{r4, pc}

000b52ba <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b52ba:	b570      	push	{r4, r5, r6, lr}
   b52bc:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b52be:	1e91      	subs	r1, r2, #2
   b52c0:	2922      	cmp	r1, #34	; 0x22
   b52c2:	d81d      	bhi.n	b5300 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b52c4:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b52c6:	b930      	cbnz	r0, b52d6 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b52c8:	4423      	add	r3, r4
            *ptr++ = '0';
   b52ca:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b52cc:	429d      	cmp	r5, r3
   b52ce:	d210      	bcs.n	b52f2 <ultoa+0x38>
            *ptr++ = '0';
   b52d0:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b52d4:	e7fa      	b.n	b52cc <ultoa+0x12>
            result.quot = a/radix;
   b52d6:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b52da:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b52de:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b52e0:	2809      	cmp	r0, #9
                *ptr += '0';
   b52e2:	bf94      	ite	ls
   b52e4:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b52e6:	3157      	addhi	r1, #87	; 0x57
   b52e8:	b2c9      	uxtb	r1, r1
   b52ea:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b52ee:	4630      	mov	r0, r6
	while(a){
   b52f0:	e7e9      	b.n	b52c6 <ultoa+0xc>

	*ptr = '\0';
   b52f2:	2300      	movs	r3, #0
	str_reverse(buffer);
   b52f4:	4620      	mov	r0, r4
	*ptr = '\0';
   b52f6:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b52f8:	f7ff ffce 	bl	b5298 <_Z11str_reversePc>
	return buffer;
   b52fc:	4620      	mov	r0, r4
}
   b52fe:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b5300:	2000      	movs	r0, #0
   b5302:	e7fc      	b.n	b52fe <ultoa+0x44>

000b5304 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b5304:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b5306:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b5308:	460c      	mov	r4, r1
   b530a:	4615      	mov	r5, r2
	if(a<0){
   b530c:	da0e      	bge.n	b532c <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b530e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b5312:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b5316:	bf14      	ite	ne
   b5318:	4258      	negne	r0, r3
   b531a:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b531c:	2301      	movs	r3, #1
		*buffer = '-';
   b531e:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b5320:	462a      	mov	r2, r5
   b5322:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b5324:	f7ff ffc9 	bl	b52ba <ultoa>
	}
	return buffer;
}
   b5328:	4620      	mov	r0, r4
   b532a:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b532c:	2301      	movs	r3, #1
   b532e:	e7f9      	b.n	b5324 <itoa+0x20>

000b5330 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b5330:	b510      	push	{r4, lr}
   b5332:	4604      	mov	r4, r0
{
	free(buffer);
   b5334:	6800      	ldr	r0, [r0, #0]
   b5336:	f7ff fe75 	bl	b5024 <free>
}
   b533a:	4620      	mov	r0, r4
   b533c:	bd10      	pop	{r4, pc}

000b533e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b533e:	b510      	push	{r4, lr}
   b5340:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b5342:	6800      	ldr	r0, [r0, #0]
   b5344:	b108      	cbz	r0, b534a <_ZN6String10invalidateEv+0xc>
   b5346:	f7ff fe6d 	bl	b5024 <free>
	buffer = NULL;
   b534a:	2300      	movs	r3, #0
	capacity = len = 0;
   b534c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b5350:	6023      	str	r3, [r4, #0]
}
   b5352:	bd10      	pop	{r4, pc}

000b5354 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5354:	b538      	push	{r3, r4, r5, lr}
   b5356:	4604      	mov	r4, r0
   b5358:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b535a:	6800      	ldr	r0, [r0, #0]
   b535c:	3101      	adds	r1, #1
   b535e:	f7ff fe69 	bl	b5034 <realloc>
	if (newbuffer) {
   b5362:	b110      	cbz	r0, b536a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5364:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5368:	2001      	movs	r0, #1
	}
	return 0;
}
   b536a:	bd38      	pop	{r3, r4, r5, pc}

000b536c <_ZN6String7reserveEj>:
{
   b536c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b536e:	6803      	ldr	r3, [r0, #0]
{
   b5370:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b5372:	b123      	cbz	r3, b537e <_ZN6String7reserveEj+0x12>
   b5374:	6843      	ldr	r3, [r0, #4]
   b5376:	428b      	cmp	r3, r1
   b5378:	d301      	bcc.n	b537e <_ZN6String7reserveEj+0x12>
   b537a:	2001      	movs	r0, #1
}
   b537c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b537e:	4620      	mov	r0, r4
   b5380:	f7ff ffe8 	bl	b5354 <_ZN6String12changeBufferEj>
   b5384:	2800      	cmp	r0, #0
   b5386:	d0f9      	beq.n	b537c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b5388:	68a3      	ldr	r3, [r4, #8]
   b538a:	2b00      	cmp	r3, #0
   b538c:	d1f5      	bne.n	b537a <_ZN6String7reserveEj+0xe>
   b538e:	6822      	ldr	r2, [r4, #0]
   b5390:	7013      	strb	r3, [r2, #0]
   b5392:	e7f2      	b.n	b537a <_ZN6String7reserveEj+0xe>

000b5394 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5394:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5396:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5398:	4611      	mov	r1, r2
   b539a:	9201      	str	r2, [sp, #4]
{
   b539c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b539e:	f7ff ffe5 	bl	b536c <_ZN6String7reserveEj>
   b53a2:	9a01      	ldr	r2, [sp, #4]
   b53a4:	b928      	cbnz	r0, b53b2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b53a6:	4620      	mov	r0, r4
   b53a8:	f7ff ffc9 	bl	b533e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b53ac:	4620      	mov	r0, r4
   b53ae:	b003      	add	sp, #12
   b53b0:	bd30      	pop	{r4, r5, pc}
	len = length;
   b53b2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b53b4:	4629      	mov	r1, r5
   b53b6:	6820      	ldr	r0, [r4, #0]
   b53b8:	f003 f8e4 	bl	b8584 <memcpy>
	buffer[len] = 0;
   b53bc:	6822      	ldr	r2, [r4, #0]
   b53be:	68a3      	ldr	r3, [r4, #8]
   b53c0:	2100      	movs	r1, #0
   b53c2:	54d1      	strb	r1, [r2, r3]
	return *this;
   b53c4:	e7f2      	b.n	b53ac <_ZN6String4copyEPKcj+0x18>

000b53c6 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b53c6:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b53c8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b53ca:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b53ce:	4604      	mov	r4, r0
	len = 0;
   b53d0:	6083      	str	r3, [r0, #8]
	flags = 0;
   b53d2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b53d4:	b141      	cbz	r1, b53e8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b53d6:	4608      	mov	r0, r1
   b53d8:	9101      	str	r1, [sp, #4]
   b53da:	f7fe fe29 	bl	b4030 <strlen>
   b53de:	9901      	ldr	r1, [sp, #4]
   b53e0:	4602      	mov	r2, r0
   b53e2:	4620      	mov	r0, r4
   b53e4:	f7ff ffd6 	bl	b5394 <_ZN6String4copyEPKcj>
}
   b53e8:	4620      	mov	r0, r4
   b53ea:	b002      	add	sp, #8
   b53ec:	bd10      	pop	{r4, pc}

000b53ee <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b53ee:	b538      	push	{r3, r4, r5, lr}
   b53f0:	4605      	mov	r5, r0
	if (buffer) {
   b53f2:	6800      	ldr	r0, [r0, #0]
{
   b53f4:	460c      	mov	r4, r1
	if (buffer) {
   b53f6:	b168      	cbz	r0, b5414 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b53f8:	686a      	ldr	r2, [r5, #4]
   b53fa:	688b      	ldr	r3, [r1, #8]
   b53fc:	429a      	cmp	r2, r3
   b53fe:	d307      	bcc.n	b5410 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b5400:	6809      	ldr	r1, [r1, #0]
   b5402:	f003 f934 	bl	b866e <strcpy>
			len = rhs.len;
   b5406:	68a3      	ldr	r3, [r4, #8]
   b5408:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b540a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b540c:	60a3      	str	r3, [r4, #8]
}
   b540e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b5410:	f7ff fe08 	bl	b5024 <free>
	buffer = rhs.buffer;
   b5414:	6823      	ldr	r3, [r4, #0]
   b5416:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b5418:	6863      	ldr	r3, [r4, #4]
   b541a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b541c:	68a3      	ldr	r3, [r4, #8]
   b541e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b5420:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b5422:	e9c4 3300 	strd	r3, r3, [r4]
   b5426:	e7f1      	b.n	b540c <_ZN6String4moveERS_+0x1e>

000b5428 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b5428:	b510      	push	{r4, lr}
	buffer = NULL;
   b542a:	2300      	movs	r3, #0
	capacity = 0;
   b542c:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b5430:	4604      	mov	r4, r0
	len = 0;
   b5432:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5434:	7303      	strb	r3, [r0, #12]
	move(rval);
   b5436:	f7ff ffda 	bl	b53ee <_ZN6String4moveERS_>
}
   b543a:	4620      	mov	r0, r4
   b543c:	bd10      	pop	{r4, pc}

000b543e <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b543e:	4288      	cmp	r0, r1
{
   b5440:	b510      	push	{r4, lr}
   b5442:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b5444:	d005      	beq.n	b5452 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b5446:	680b      	ldr	r3, [r1, #0]
   b5448:	b12b      	cbz	r3, b5456 <_ZN6StringaSERKS_+0x18>
   b544a:	688a      	ldr	r2, [r1, #8]
   b544c:	4619      	mov	r1, r3
   b544e:	f7ff ffa1 	bl	b5394 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5452:	4620      	mov	r0, r4
   b5454:	bd10      	pop	{r4, pc}
	else invalidate();
   b5456:	f7ff ff72 	bl	b533e <_ZN6String10invalidateEv>
   b545a:	e7fa      	b.n	b5452 <_ZN6StringaSERKS_+0x14>

000b545c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b545c:	b510      	push	{r4, lr}
	buffer = NULL;
   b545e:	2300      	movs	r3, #0
String::String(const String &value)
   b5460:	4604      	mov	r4, r0
	capacity = 0;
   b5462:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b5466:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5468:	7303      	strb	r3, [r0, #12]
	*this = value;
   b546a:	f7ff ffe8 	bl	b543e <_ZN6StringaSERKS_>
}
   b546e:	4620      	mov	r0, r4
   b5470:	bd10      	pop	{r4, pc}

000b5472 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b5472:	b513      	push	{r0, r1, r4, lr}
   b5474:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b5476:	b159      	cbz	r1, b5490 <_ZN6StringaSEPKc+0x1e>
   b5478:	4608      	mov	r0, r1
   b547a:	9101      	str	r1, [sp, #4]
   b547c:	f7fe fdd8 	bl	b4030 <strlen>
   b5480:	9901      	ldr	r1, [sp, #4]
   b5482:	4602      	mov	r2, r0
   b5484:	4620      	mov	r0, r4
   b5486:	f7ff ff85 	bl	b5394 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b548a:	4620      	mov	r0, r4
   b548c:	b002      	add	sp, #8
   b548e:	bd10      	pop	{r4, pc}
	else invalidate();
   b5490:	f7ff ff55 	bl	b533e <_ZN6String10invalidateEv>
   b5494:	e7f9      	b.n	b548a <_ZN6StringaSEPKc+0x18>

000b5496 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b5496:	b510      	push	{r4, lr}
   b5498:	4604      	mov	r4, r0
   b549a:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b549c:	2300      	movs	r3, #0
	capacity = 0;
   b549e:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b54a2:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b54a4:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b54a6:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b54a8:	a901      	add	r1, sp, #4
   b54aa:	f7ff ff2b 	bl	b5304 <itoa>
	*this = buf;
   b54ae:	a901      	add	r1, sp, #4
   b54b0:	4620      	mov	r0, r4
   b54b2:	f7ff ffde 	bl	b5472 <_ZN6StringaSEPKc>
}
   b54b6:	4620      	mov	r0, r4
   b54b8:	b00a      	add	sp, #40	; 0x28
   b54ba:	bd10      	pop	{r4, pc}

000b54bc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  // 2070.  allocate_shared should use allocator_traits<A>::construct
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
	      std::forward<_Args>(__args)...); // might throw
	}

      ~_Sp_counted_ptr_inplace() noexcept { }
   b54bc:	4770      	bx	lr
	...

000b54c0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	// Check for the fake type_info first, so we don't try to access it
	// as a real type_info object. Otherwise, check if it's the real
	// type_info for this class. With RTTI enabled we can check directly,
	// or call a library function to do it.
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
	    ||
   b54c0:	4b06      	ldr	r3, [pc, #24]	; (b54dc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b54c2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b54c4:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b54c6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b54ca:	d005      	beq.n	b54d8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
#if __cpp_rtti
	    __ti == typeid(_Sp_make_shared_tag)
#else
	    _Sp_make_shared_tag::_S_eq(__ti)
   b54cc:	4608      	mov	r0, r1
   b54ce:	f002 ff29 	bl	b8324 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
#endif
	   )
	  return __ptr;
	return nullptr;
   b54d2:	2800      	cmp	r0, #0
   b54d4:	bf08      	it	eq
   b54d6:	2400      	moveq	r4, #0
      }
   b54d8:	4620      	mov	r0, r4
   b54da:	bd10      	pop	{r4, pc}
   b54dc:	000b8b84 	.word	0x000b8b84

000b54e0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b54e0:	b510      	push	{r4, lr}
   b54e2:	2130      	movs	r1, #48	; 0x30
   b54e4:	4604      	mov	r4, r0
   b54e6:	f7fe fdec 	bl	b40c2 <_ZdlPvj>
   b54ea:	4620      	mov	r0, r4
   b54ec:	bd10      	pop	{r4, pc}

000b54ee <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b54ee:	2130      	movs	r1, #48	; 0x30
   b54f0:	f7fe bde7 	b.w	b40c2 <_ZdlPvj>

000b54f4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b54f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b54f6:	2500      	movs	r5, #0
   b54f8:	1cec      	adds	r4, r5, #3
   b54fa:	428c      	cmp	r4, r1
   b54fc:	d80d      	bhi.n	b551a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b54fe:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b5500:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b5502:	5d87      	ldrb	r7, [r0, r6]
   b5504:	4297      	cmp	r7, r2
   b5506:	d105      	bne.n	b5514 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b5508:	4426      	add	r6, r4
   b550a:	42b1      	cmp	r1, r6
   b550c:	d305      	bcc.n	b551a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b550e:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b5510:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b5512:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b5514:	3401      	adds	r4, #1
   b5516:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b5518:	e7ee      	b.n	b54f8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b551a:	2000      	movs	r0, #0
   b551c:	e7f9      	b.n	b5512 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

000b551e <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE9_M_invokeERKSt9_Any_dataS3_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b551e:	4603      	mov	r3, r0
   b5520:	4608      	mov	r0, r1
	    return __source._M_access<_Functor*>();
   b5522:	681b      	ldr	r3, [r3, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b5524:	e9d3 2100 	ldrd	r2, r1, [r3]
   b5528:	4710      	bx	r2

000b552a <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	switch (__op)
   b552a:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b552c:	b538      	push	{r3, r4, r5, lr}
   b552e:	4604      	mov	r4, r0
	switch (__op)
   b5530:	d102      	bne.n	b5538 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b5532:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b5534:	6023      	str	r3, [r4, #0]
	}
   b5536:	e003      	b.n	b5540 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	  switch (__op)
   b5538:	2a02      	cmp	r2, #2
   b553a:	d003      	beq.n	b5544 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
   b553c:	2a03      	cmp	r2, #3
   b553e:	d00d      	beq.n	b555c <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x32>
      }
   b5540:	2000      	movs	r0, #0
   b5542:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b5544:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b5546:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5548:	f7fe fdb5 	bl	b40b6 <_Znwj>
   b554c:	4603      	mov	r3, r0
   b554e:	2800      	cmp	r0, #0
   b5550:	d0f0      	beq.n	b5534 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
   b5552:	e895 0003 	ldmia.w	r5, {r0, r1}
   b5556:	e883 0003 	stmia.w	r3, {r0, r1}
   b555a:	e7eb      	b.n	b5534 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b555c:	6800      	ldr	r0, [r0, #0]
   b555e:	2800      	cmp	r0, #0
   b5560:	d0ee      	beq.n	b5540 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
   b5562:	2108      	movs	r1, #8
   b5564:	f7fe fdad 	bl	b40c2 <_ZdlPvj>
   b5568:	e7ea      	b.n	b5540 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>

000b556a <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b556a:	b510      	push	{r4, lr}
      if (_M_manager)
   b556c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b556e:	4604      	mov	r4, r0
      if (_M_manager)
   b5570:	b113      	cbz	r3, b5578 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5572:	2203      	movs	r2, #3
   b5574:	4601      	mov	r1, r0
   b5576:	4798      	blx	r3
    }
   b5578:	4620      	mov	r0, r4
   b557a:	bd10      	pop	{r4, pc}

000b557c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b557c:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b557e:	6843      	ldr	r3, [r0, #4]
   b5580:	3b01      	subs	r3, #1
    {
   b5582:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b5584:	6043      	str	r3, [r0, #4]
   b5586:	b963      	cbnz	r3, b55a2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b5588:	6803      	ldr	r3, [r0, #0]
   b558a:	689b      	ldr	r3, [r3, #8]
   b558c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b558e:	68a3      	ldr	r3, [r4, #8]
   b5590:	3b01      	subs	r3, #1
   b5592:	60a3      	str	r3, [r4, #8]
   b5594:	b92b      	cbnz	r3, b55a2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b5596:	6823      	ldr	r3, [r4, #0]
   b5598:	4620      	mov	r0, r4
   b559a:	68db      	ldr	r3, [r3, #12]
    }
   b559c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b55a0:	4718      	bx	r3
    }
   b55a2:	bd10      	pop	{r4, pc}

000b55a4 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b55a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b55a8:	b2da      	uxtb	r2, r3
   b55aa:	2a09      	cmp	r2, #9
   b55ac:	d801      	bhi.n	b55b2 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b55ae:	4618      	mov	r0, r3
   b55b0:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b55b2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b55b6:	2b05      	cmp	r3, #5
   b55b8:	d801      	bhi.n	b55be <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b55ba:	3857      	subs	r0, #87	; 0x57
   b55bc:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b55be:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b55c2:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b55c4:	bf94      	ite	ls
   b55c6:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b55c8:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b55cc:	4770      	bx	lr
	...

000b55d0 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b55d0:	b510      	push	{r4, lr}
            locked_(false) {
   b55d2:	2300      	movs	r3, #0
   b55d4:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b55d6:	4b04      	ldr	r3, [pc, #16]	; (b55e8 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b55d8:	4604      	mov	r4, r0
   b55da:	6818      	ldr	r0, [r3, #0]
   b55dc:	f7ff fafe 	bl	b4bdc <os_mutex_recursive_lock>
        locked_ = true;
   b55e0:	2301      	movs	r3, #1
   b55e2:	7023      	strb	r3, [r4, #0]
    }
   b55e4:	4620      	mov	r0, r4
   b55e6:	bd10      	pop	{r4, pc}
   b55e8:	2003e6a4 	.word	0x2003e6a4

000b55ec <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b55ec:	b510      	push	{r4, lr}
        if (locked_) {
   b55ee:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b55f0:	4604      	mov	r4, r0
        if (locked_) {
   b55f2:	b11b      	cbz	r3, b55fc <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b55f4:	4b02      	ldr	r3, [pc, #8]	; (b5600 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b55f6:	6818      	ldr	r0, [r3, #0]
   b55f8:	f7ff faf8 	bl	b4bec <os_mutex_recursive_unlock>
    }
   b55fc:	4620      	mov	r0, r4
   b55fe:	bd10      	pop	{r4, pc}
   b5600:	2003e6a4 	.word	0x2003e6a4

000b5604 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b5604:	b082      	sub	sp, #8
   b5606:	4603      	mov	r3, r0
    address_ = addr;
   b5608:	6808      	ldr	r0, [r1, #0]
   b560a:	6849      	ldr	r1, [r1, #4]
   b560c:	466a      	mov	r2, sp
   b560e:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b5610:	466a      	mov	r2, sp
   b5612:	ca03      	ldmia	r2!, {r0, r1}
   b5614:	6018      	str	r0, [r3, #0]
}
   b5616:	4618      	mov	r0, r3
    address_ = addr.address_;
   b5618:	6059      	str	r1, [r3, #4]
}
   b561a:	b002      	add	sp, #8
   b561c:	4770      	bx	lr

000b561e <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b561e:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b5620:	7982      	ldrb	r2, [r0, #6]
   b5622:	798b      	ldrb	r3, [r1, #6]
   b5624:	429a      	cmp	r2, r3
   b5626:	d106      	bne.n	b5636 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b5628:	2206      	movs	r2, #6
   b562a:	f002 ff9b 	bl	b8564 <memcmp>
   b562e:	fab0 f080 	clz	r0, r0
   b5632:	0940      	lsrs	r0, r0, #5
}
   b5634:	bd08      	pop	{r3, pc}
    return false;
   b5636:	2000      	movs	r0, #0
   b5638:	e7fc      	b.n	b5634 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b563a <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b563a:	f04f 33ff 	mov.w	r3, #4294967295
   b563e:	6003      	str	r3, [r0, #0]
   b5640:	8083      	strh	r3, [r0, #4]
}
   b5642:	2000      	movs	r0, #0
   b5644:	4770      	bx	lr

000b5646 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b5646:	b508      	push	{r3, lr}
   b5648:	4602      	mov	r2, r0
        : address_{} {
   b564a:	2100      	movs	r1, #0
   b564c:	6001      	str	r1, [r0, #0]
   b564e:	6041      	str	r1, [r0, #4]
    clear();
   b5650:	f7ff fff3 	bl	b563a <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b5654:	7191      	strb	r1, [r2, #6]
}
   b5656:	4610      	mov	r0, r2
   b5658:	bd08      	pop	{r3, pc}
	...

000b565c <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b565c:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b565e:	2301      	movs	r3, #1
   b5660:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5662:	4b05      	ldr	r3, [pc, #20]	; (b5678 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b5664:	4602      	mov	r2, r0
   b5666:	f103 0110 	add.w	r1, r3, #16
   b566a:	f853 4b04 	ldr.w	r4, [r3], #4
   b566e:	f842 4b04 	str.w	r4, [r2], #4
   b5672:	428b      	cmp	r3, r1
   b5674:	d1f9      	bne.n	b566a <_ZN8particle7BleUuidC1Ev+0xe>
}
   b5676:	bd10      	pop	{r4, pc}
   b5678:	000b88d2 	.word	0x000b88d2

000b567c <_ZNK8particle7BleUuid4typeEv>:
}
   b567c:	6900      	ldr	r0, [r0, #16]
   b567e:	4770      	bx	lr

000b5680 <_ZNK8particle7BleUuid7shortedEv>:
}
   b5680:	8980      	ldrh	r0, [r0, #12]
   b5682:	4770      	bx	lr

000b5684 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b5684:	4770      	bx	lr
	...

000b5688 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b5688:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b568a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b568e:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5690:	4b34      	ldr	r3, [pc, #208]	; (b5764 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b5692:	460c      	mov	r4, r1
   b5694:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5696:	4602      	mov	r2, r0
   b5698:	f103 0110 	add.w	r1, r3, #16
   b569c:	f853 0b04 	ldr.w	r0, [r3], #4
   b56a0:	f842 0b04 	str.w	r0, [r2], #4
   b56a4:	428b      	cmp	r3, r1
   b56a6:	d1f9      	bne.n	b569c <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b56a8:	b344      	cbz	r4, b56fc <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b56aa:	2124      	movs	r1, #36	; 0x24
   b56ac:	4620      	mov	r0, r4
   b56ae:	f002 fffa 	bl	b86a6 <strnlen>
   b56b2:	2804      	cmp	r0, #4
   b56b4:	f04f 0500 	mov.w	r5, #0
   b56b8:	d123      	bne.n	b5702 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b56ba:	f8ad 5004 	strh.w	r5, [sp, #4]
   b56be:	af01      	add	r7, sp, #4
   b56c0:	1ca5      	adds	r5, r4, #2
   b56c2:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b56c4:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b56c8:	f7ff ff6c 	bl	b55a4 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b56cc:	f1b0 0800 	subs.w	r8, r0, #0
   b56d0:	db12      	blt.n	b56f8 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b56d2:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b56d6:	f7ff ff65 	bl	b55a4 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b56da:	2800      	cmp	r0, #0
   b56dc:	db0c      	blt.n	b56f8 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b56de:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b56e0:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b56e4:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b56e6:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b56ea:	d1eb      	bne.n	b56c4 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b56ec:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b56f0:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b56f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b56f6:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b56f8:	2300      	movs	r3, #0
   b56fa:	6133      	str	r3, [r6, #16]
}
   b56fc:	b002      	add	sp, #8
   b56fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b5702:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b5706:	2124      	movs	r1, #36	; 0x24
   b5708:	4620      	mov	r0, r4
   b570a:	f002 ffcc 	bl	b86a6 <strnlen>
   b570e:	42a8      	cmp	r0, r5
   b5710:	d807      	bhi.n	b5722 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b5712:	4642      	mov	r2, r8
   b5714:	2100      	movs	r1, #0
   b5716:	4630      	mov	r0, r6
}
   b5718:	b002      	add	sp, #8
   b571a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b571e:	f002 bf59 	b.w	b85d4 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b5722:	f1b8 0f00 	cmp.w	r8, #0
   b5726:	d0e9      	beq.n	b56fc <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b5728:	5d60      	ldrb	r0, [r4, r5]
   b572a:	f7ff ff3b 	bl	b55a4 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b572e:	0603      	lsls	r3, r0, #24
   b5730:	d415      	bmi.n	b575e <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b5732:	0100      	lsls	r0, r0, #4
   b5734:	f108 38ff 	add.w	r8, r8, #4294967295
   b5738:	b2c7      	uxtb	r7, r0
   b573a:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b573e:	2124      	movs	r1, #36	; 0x24
   b5740:	4620      	mov	r0, r4
   b5742:	f002 ffb0 	bl	b86a6 <strnlen>
   b5746:	3501      	adds	r5, #1
   b5748:	42a8      	cmp	r0, r5
   b574a:	d908      	bls.n	b575e <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b574c:	5d60      	ldrb	r0, [r4, r5]
   b574e:	f7ff ff29 	bl	b55a4 <_ZN8particle11hexToNibbleEc>
   b5752:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b5754:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b5756:	bfa4      	itt	ge
   b5758:	4338      	orrge	r0, r7
   b575a:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b575e:	3501      	adds	r5, #1
   b5760:	e7d1      	b.n	b5706 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b5762:	bf00      	nop
   b5764:	000b88d2 	.word	0x000b88d2

000b5768 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b5768:	b513      	push	{r0, r1, r4, lr}
   b576a:	4604      	mov	r4, r0
   b576c:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b576e:	f7ff ff75 	bl	b565c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b5772:	4620      	mov	r0, r4
   b5774:	9901      	ldr	r1, [sp, #4]
   b5776:	f7ff ff87 	bl	b5688 <_ZN8particle7BleUuid9constructEPKc>
}
   b577a:	4620      	mov	r0, r4
   b577c:	b002      	add	sp, #8
   b577e:	bd10      	pop	{r4, pc}

000b5780 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:

    void onAttMtuExchangedCallback(const BleOnAttMtuExchangedStdFunction& callback) {
        attMtuExchangedCallback_ = callback;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b5780:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b5782:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b5786:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b578a:	4293      	cmp	r3, r2
   b578c:	4618      	mov	r0, r3
   b578e:	d006      	beq.n	b579e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b5790:	6804      	ldr	r4, [r0, #0]
   b5792:	8824      	ldrh	r4, [r4, #0]
   b5794:	428c      	cmp	r4, r1
   b5796:	f103 0308 	add.w	r3, r3, #8
   b579a:	d1f6      	bne.n	b578a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
                return &peer;
            }
        }
        return nullptr;
    }
   b579c:	bd10      	pop	{r4, pc}
        return nullptr;
   b579e:	2000      	movs	r0, #0
   b57a0:	e7fc      	b.n	b579c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b57a4 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b57a4:	b570      	push	{r4, r5, r6, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b57a6:	2500      	movs	r5, #0
   b57a8:	6005      	str	r5, [r0, #0]
   b57aa:	4606      	mov	r6, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b57ac:	2030      	movs	r0, #48	; 0x30
   b57ae:	f7fe fc82 	bl	b40b6 <_Znwj>
	  auto __pi = ::new (__mem)
   b57b2:	4604      	mov	r4, r0
   b57b4:	b188      	cbz	r0, b57da <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b57b6:	2301      	movs	r3, #1
   b57b8:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b57bc:	4b09      	ldr	r3, [pc, #36]	; (b57e4 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b57be:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b57c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b57c4:	8183      	strh	r3, [r0, #12]
   b57c6:	300e      	adds	r0, #14
   b57c8:	f7ff ff3d 	bl	b5646 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b57cc:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b57d0:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b57d4:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b57d8:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b57da:	6074      	str	r4, [r6, #4]
   b57dc:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b57de:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b57e0:	4630      	mov	r0, r6
   b57e2:	bd70      	pop	{r4, r5, r6, pc}
   b57e4:	000b8b70 	.word	0x000b8b70

000b57e8 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b57e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b57ea:	460d      	mov	r5, r1
   b57ec:	4604      	mov	r4, r0
    WiringBleLock lk;
   b57ee:	a801      	add	r0, sp, #4
   b57f0:	f7ff feee 	bl	b55d0 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b57f4:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b57f6:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b57fa:	6023      	str	r3, [r4, #0]
   b57fc:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b5800:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b5802:	a801      	add	r0, sp, #4
   b5804:	f7ff fef2 	bl	b55ec <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b5808:	4620      	mov	r0, r4
   b580a:	b003      	add	sp, #12
   b580c:	bd30      	pop	{r4, r5, pc}

000b580e <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b580e:	b530      	push	{r4, r5, lr}
   b5810:	4605      	mov	r5, r0
   b5812:	b087      	sub	sp, #28
   b5814:	460c      	mov	r4, r1
    WiringBleLock lk;
   b5816:	a801      	add	r0, sp, #4
   b5818:	f7ff feda 	bl	b55d0 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b581c:	682a      	ldr	r2, [r5, #0]
   b581e:	6823      	ldr	r3, [r4, #0]
   b5820:	8812      	ldrh	r2, [r2, #0]
   b5822:	881b      	ldrh	r3, [r3, #0]
   b5824:	429a      	cmp	r2, r3
   b5826:	d10d      	bne.n	b5844 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b5828:	4629      	mov	r1, r5
   b582a:	a802      	add	r0, sp, #8
   b582c:	f7ff ffdc 	bl	b57e8 <_ZNK8particle13BlePeerDevice7addressEv>
   b5830:	4621      	mov	r1, r4
   b5832:	a804      	add	r0, sp, #16
   b5834:	f7ff ffd8 	bl	b57e8 <_ZNK8particle13BlePeerDevice7addressEv>
   b5838:	a904      	add	r1, sp, #16
   b583a:	a802      	add	r0, sp, #8
   b583c:	f7ff feef 	bl	b561e <_ZNK8particle10BleAddresseqERKS0_>
   b5840:	4604      	mov	r4, r0
   b5842:	b900      	cbnz	r0, b5846 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b5844:	2400      	movs	r4, #0
    WiringBleLock lk;
   b5846:	a801      	add	r0, sp, #4
   b5848:	f7ff fed0 	bl	b55ec <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b584c:	4620      	mov	r0, r4
   b584e:	b007      	add	sp, #28
   b5850:	bd30      	pop	{r4, r5, pc}
	...

000b5854 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b5854:	b510      	push	{r4, lr}
   b5856:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b5858:	2064      	movs	r0, #100	; 0x64
   b585a:	f7fe fc2c 	bl	b40b6 <_Znwj>
   b585e:	b168      	cbz	r0, b587c <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b5860:	2300      	movs	r3, #0
   b5862:	e9c0 3300 	strd	r3, r3, [r0]
   b5866:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b586a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b586e:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b5872:	6203      	str	r3, [r0, #32]
    _Function_base() : _M_manager(nullptr) { }
   b5874:	62c3      	str	r3, [r0, #44]	; 0x2c
   b5876:	63c3      	str	r3, [r0, #60]	; 0x3c
   b5878:	64c3      	str	r3, [r0, #76]	; 0x4c
   b587a:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b587c:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b587e:	b920      	cbnz	r0, b588a <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b5880:	4a0a      	ldr	r2, [pc, #40]	; (b58ac <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b5882:	490b      	ldr	r1, [pc, #44]	; (b58b0 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b5884:	200a      	movs	r0, #10
   b5886:	f7ff fb09 	bl	b4e9c <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b588a:	2000      	movs	r0, #0
   b588c:	f7ff f93a 	bl	b4b04 <hal_ble_stack_init>
   b5890:	b120      	cbz	r0, b589c <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b5892:	4a06      	ldr	r2, [pc, #24]	; (b58ac <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b5894:	4907      	ldr	r1, [pc, #28]	; (b58b4 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b5896:	200a      	movs	r0, #10
   b5898:	f7ff fb00 	bl	b4e9c <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b589c:	6821      	ldr	r1, [r4, #0]
   b589e:	4806      	ldr	r0, [pc, #24]	; (b58b8 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b58a0:	2200      	movs	r2, #0
   b58a2:	f7ff f969 	bl	b4b78 <hal_ble_set_callback_on_periph_link_events>
}
   b58a6:	4620      	mov	r0, r4
   b58a8:	bd10      	pop	{r4, pc}
   b58aa:	bf00      	nop
   b58ac:	000b4ae5 	.word	0x000b4ae5
   b58b0:	000b8aa8 	.word	0x000b8aa8
   b58b4:	000b8ae6 	.word	0x000b8ae6
   b58b8:	000b5dd9 	.word	0x000b5dd9

000b58bc <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b58bc:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b58be:	4c0a      	ldr	r4, [pc, #40]	; (b58e8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b58c0:	7823      	ldrb	r3, [r4, #0]
   b58c2:	f3bf 8f5b 	dmb	ish
   b58c6:	07db      	lsls	r3, r3, #31
   b58c8:	d40c      	bmi.n	b58e4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b58ca:	4620      	mov	r0, r4
   b58cc:	f7fe fc08 	bl	b40e0 <__cxa_guard_acquire>
   b58d0:	b140      	cbz	r0, b58e4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b58d2:	4806      	ldr	r0, [pc, #24]	; (b58ec <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b58d4:	f7ff ffbe 	bl	b5854 <_ZN8particle14BleLocalDeviceC1Ev>
   b58d8:	4620      	mov	r0, r4
   b58da:	f7fe fc06 	bl	b40ea <__cxa_guard_release>
   b58de:	4804      	ldr	r0, [pc, #16]	; (b58f0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b58e0:	f002 fe32 	bl	b8548 <atexit>
    return instance;
}
   b58e4:	4801      	ldr	r0, [pc, #4]	; (b58ec <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b58e6:	bd10      	pop	{r4, pc}
   b58e8:	2003e6a0 	.word	0x2003e6a0
   b58ec:	2003e6a8 	.word	0x2003e6a8
   b58f0:	000b5ac9 	.word	0x000b5ac9

000b58f4 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b58f4:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b58f6:	2000      	movs	r0, #0
   b58f8:	f7ff f904 	bl	b4b04 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b58fc:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b5900:	bd08      	pop	{r3, pc}

000b5902 <_ZNK8particle14BleLocalDevice22setAdvertisingIntervalEt>:

bool BleLocalDevice::getProvisioningStatus() const {
    return system_ble_prov_get_status(nullptr);
}

int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
   b5902:	b530      	push	{r4, r5, lr}
   b5904:	b085      	sub	sp, #20
    hal_ble_adv_params_t advParams = {};
   b5906:	2400      	movs	r4, #0
    advParams.size = sizeof(hal_ble_adv_params_t);
   b5908:	230c      	movs	r3, #12
   b590a:	f8ad 3006 	strh.w	r3, [sp, #6]
int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
   b590e:	460d      	mov	r5, r1
    advParams.version = BLE_API_VERSION;
   b5910:	2303      	movs	r3, #3
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
   b5912:	4621      	mov	r1, r4
   b5914:	a801      	add	r0, sp, #4
    hal_ble_adv_params_t advParams = {};
   b5916:	e9cd 4402 	strd	r4, r4, [sp, #8]
    advParams.version = BLE_API_VERSION;
   b591a:	f8ad 3004 	strh.w	r3, [sp, #4]
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
   b591e:	f7ff f901 	bl	b4b24 <hal_ble_gap_get_advertising_parameters>
   b5922:	2800      	cmp	r0, #0
   b5924:	db05      	blt.n	b5932 <_ZNK8particle14BleLocalDevice22setAdvertisingIntervalEt+0x30>
    advParams.interval = interval;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
   b5926:	4621      	mov	r1, r4
   b5928:	a801      	add	r0, sp, #4
    advParams.interval = interval;
   b592a:	f8ad 5008 	strh.w	r5, [sp, #8]
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
   b592e:	f7ff f8f1 	bl	b4b14 <hal_ble_gap_set_advertising_parameters>
}
   b5932:	b005      	add	sp, #20
   b5934:	bd30      	pop	{r4, r5, pc}

000b5936 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b5936:	b919      	cbnz	r1, b5940 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b5938:	460a      	mov	r2, r1
   b593a:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b593c:	f7ff b8fa 	b.w	b4b34 <hal_ble_gap_set_advertising_data>
   b5940:	e9d1 0100 	ldrd	r0, r1, [r1]
   b5944:	2200      	movs	r2, #0
   b5946:	e7f9      	b.n	b593c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b5948 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5948:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b594a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b594e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5950:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b5954:	42ae      	cmp	r6, r5
   b5956:	d004      	beq.n	b5962 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b5958:	4628      	mov	r0, r5
   b595a:	f7ff fce9 	bl	b5330 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b595e:	3510      	adds	r5, #16
   b5960:	e7f8      	b.n	b5954 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b5962:	6820      	ldr	r0, [r4, #0]
   b5964:	f7ff fb5e 	bl	b5024 <free>
}
   b5968:	4620      	mov	r0, r4
   b596a:	bd70      	pop	{r4, r5, r6, pc}

000b596c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b596c:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b596e:	1e14      	subs	r4, r2, #0
   b5970:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b5972:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b5974:	db02      	blt.n	b597c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b5976:	1862      	adds	r2, r4, r1
   b5978:	429a      	cmp	r2, r3
   b597a:	dd00      	ble.n	b597e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b597c:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b597e:	682a      	ldr	r2, [r5, #0]
   b5980:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b5982:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b5984:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5986:	1a52      	subs	r2, r2, r1
   b5988:	f002 fe0a 	bl	b85a0 <memmove>
    size_ -= n;
   b598c:	686a      	ldr	r2, [r5, #4]
   b598e:	1b12      	subs	r2, r2, r4
   b5990:	606a      	str	r2, [r5, #4]
}
   b5992:	bd38      	pop	{r3, r4, r5, pc}

000b5994 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b5994:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b5996:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b5998:	4604      	mov	r4, r0
   b599a:	460d      	mov	r5, r1
   b599c:	ab01      	add	r3, sp, #4
   b599e:	e9d0 0100 	ldrd	r0, r1, [r0]
   b59a2:	f7ff fda7 	bl	b54f4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b59a6:	4602      	mov	r2, r0
   b59a8:	b138      	cbz	r0, b59ba <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b59aa:	9901      	ldr	r1, [sp, #4]
   b59ac:	4620      	mov	r0, r4
   b59ae:	f7ff ffdd 	bl	b596c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b59b2:	4629      	mov	r1, r5
   b59b4:	4620      	mov	r0, r4
   b59b6:	f7ff ffed 	bl	b5994 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b59ba:	b003      	add	sp, #12
   b59bc:	bd30      	pop	{r4, r5, pc}

000b59be <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b59be:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b59c0:	460c      	mov	r4, r1
   b59c2:	b929      	cbnz	r1, b59d0 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b59c4:	460a      	mov	r2, r1
   b59c6:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b59c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b59cc:	f7ff b8ba 	b.w	b4b44 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b59d0:	2101      	movs	r1, #1
   b59d2:	4620      	mov	r0, r4
   b59d4:	f7ff ffde 	bl	b5994 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b59d8:	e9d4 0100 	ldrd	r0, r1, [r4]
   b59dc:	2200      	movs	r2, #0
   b59de:	e7f3      	b.n	b59c8 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b59e0 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b59e0:	b538      	push	{r3, r4, r5, lr}
   b59e2:	4604      	mov	r4, r0
   b59e4:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b59e6:	f7ff ffa6 	bl	b5936 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b59ea:	2800      	cmp	r0, #0
   b59ec:	db0a      	blt.n	b5a04 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b59ee:	4629      	mov	r1, r5
   b59f0:	4620      	mov	r0, r4
   b59f2:	f7ff ffe4 	bl	b59be <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b59f6:	2800      	cmp	r0, #0
   b59f8:	db04      	blt.n	b5a04 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b59fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b59fe:	2000      	movs	r0, #0
   b5a00:	f7ff b8a8 	b.w	b4b54 <hal_ble_gap_start_advertising>
}
   b5a04:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5a08 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
   b5a08:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5a0a:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b5a0c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b5a0e:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5a10:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b5a12:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5a14:	f7fe fb4f 	bl	b40b6 <_Znwj>
   b5a18:	b118      	cbz	r0, b5a22 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b5a1a:	682b      	ldr	r3, [r5, #0]
   b5a1c:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5a1e:	686b      	ldr	r3, [r5, #4]
   b5a20:	6043      	str	r3, [r0, #4]
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   b5a22:	4b03      	ldr	r3, [pc, #12]	; (b5a30 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x28>)
   b5a24:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5a26:	4b03      	ldr	r3, [pc, #12]	; (b5a34 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5a28:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5a2a:	60a3      	str	r3, [r4, #8]
	  }
      }
   b5a2c:	4620      	mov	r0, r4
   b5a2e:	bd38      	pop	{r3, r4, r5, pc}
   b5a30:	000b551f 	.word	0x000b551f
   b5a34:	000b552b 	.word	0x000b552b

000b5a38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b5a38:	680b      	ldr	r3, [r1, #0]
   b5a3a:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b5a3c:	b113      	cbz	r3, b5a44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b5a3e:	685a      	ldr	r2, [r3, #4]
   b5a40:	3201      	adds	r2, #1
   b5a42:	605a      	str	r2, [r3, #4]
      }
   b5a44:	4770      	bx	lr

000b5a46 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5a46:	b510      	push	{r4, lr}
   b5a48:	f851 3b04 	ldr.w	r3, [r1], #4
   b5a4c:	4604      	mov	r4, r0
   b5a4e:	f840 3b04 	str.w	r3, [r0], #4
   b5a52:	f7ff fff1 	bl	b5a38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b5a56:	4620      	mov	r0, r4
   b5a58:	bd10      	pop	{r4, pc}

000b5a5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b5a5a:	b510      	push	{r4, lr}
   b5a5c:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b5a5e:	6800      	ldr	r0, [r0, #0]
   b5a60:	b108      	cbz	r0, b5a66 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b5a62:	f7ff fd8b 	bl	b557c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b5a66:	4620      	mov	r0, r4
   b5a68:	bd10      	pop	{r4, pc}

000b5a6a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5a6a:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5a6c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5a70:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5a72:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b5a76:	42ae      	cmp	r6, r5
   b5a78:	d004      	beq.n	b5a84 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
      ~__shared_ptr() = default;
   b5a7a:	1d28      	adds	r0, r5, #4
   b5a7c:	f7ff ffed 	bl	b5a5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5a80:	3508      	adds	r5, #8
   b5a82:	e7f8      	b.n	b5a76 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b5a84:	6820      	ldr	r0, [r4, #0]
   b5a86:	f7ff facd 	bl	b5024 <free>
}
   b5a8a:	4620      	mov	r0, r4
   b5a8c:	bd70      	pop	{r4, r5, r6, pc}

000b5a8e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5a8e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5a90:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5a94:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5a96:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b5a9a:	42ae      	cmp	r6, r5
   b5a9c:	d004      	beq.n	b5aa8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b5a9e:	1d28      	adds	r0, r5, #4
   b5aa0:	f7ff ffdb 	bl	b5a5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5aa4:	3508      	adds	r5, #8
   b5aa6:	e7f8      	b.n	b5a9a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b5aa8:	6820      	ldr	r0, [r4, #0]
   b5aaa:	f7ff fabb 	bl	b5024 <free>
}
   b5aae:	4620      	mov	r0, r4
   b5ab0:	bd70      	pop	{r4, r5, r6, pc}

000b5ab2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5ab2:	b510      	push	{r4, lr}
   b5ab4:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b5ab6:	3024      	adds	r0, #36	; 0x24
   b5ab8:	f7ff ffe9 	bl	b5a8e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b5abc:	f104 0018 	add.w	r0, r4, #24
   b5ac0:	f7ff ffd3 	bl	b5a6a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b5ac4:	bd10      	pop	{r4, pc}
	...

000b5ac8 <__tcf_0>:
    static BleLocalDevice instance;
   b5ac8:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b5aca:	4b17      	ldr	r3, [pc, #92]	; (b5b28 <__tcf_0+0x60>)
   b5acc:	681c      	ldr	r4, [r3, #0]
   b5ace:	b354      	cbz	r4, b5b26 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b5ad0:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b5ad4:	f7ff fd49 	bl	b556a <_ZNSt14_Function_baseD1Ev>
   b5ad8:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b5adc:	f7ff fd45 	bl	b556a <_ZNSt14_Function_baseD1Ev>
   b5ae0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b5ae4:	f7ff fd41 	bl	b556a <_ZNSt14_Function_baseD1Ev>
   b5ae8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b5aec:	f7ff fd3d 	bl	b556a <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b5af0:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b5af4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b5af8:	42ae      	cmp	r6, r5
   b5afa:	d004      	beq.n	b5b06 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b5afc:	1d28      	adds	r0, r5, #4
   b5afe:	f7ff ffac 	bl	b5a5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5b02:	3508      	adds	r5, #8
   b5b04:	e7f8      	b.n	b5af8 <__tcf_0+0x30>
    ::free(ptr);
   b5b06:	69a0      	ldr	r0, [r4, #24]
   b5b08:	f7ff fa8c 	bl	b5024 <free>
    ~BleLocalDeviceImpl() = default;
   b5b0c:	f104 000c 	add.w	r0, r4, #12
   b5b10:	f7ff ffbd 	bl	b5a8e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b5b14:	4620      	mov	r0, r4
   b5b16:	f7ff ffa8 	bl	b5a6a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b5b1a:	4620      	mov	r0, r4
   b5b1c:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b5b1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b5b22:	f7fe bace 	b.w	b40c2 <_ZdlPvj>
   b5b26:	bd70      	pop	{r4, r5, r6, pc}
   b5b28:	2003e6a8 	.word	0x2003e6a8

000b5b2c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b5b2c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5b2e:	b510      	push	{r4, lr}
      if (_M_empty())
   b5b30:	b90a      	cbnz	r2, b5b36 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b5b32:	f002 fbf3 	bl	b831c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b5b36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5b3a:	68c3      	ldr	r3, [r0, #12]
   b5b3c:	4718      	bx	r3

000b5b3e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b5b3e:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b5b40:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b5b42:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b5b44:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b5b46:	dd03      	ble.n	b5b50 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b5b48:	f7ff fa74 	bl	b5034 <realloc>
            if (!d) {
   b5b4c:	b918      	cbnz	r0, b5b56 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b5b4e:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b5b50:	f7ff fa68 	bl	b5024 <free>
        T* d = nullptr;
   b5b54:	2000      	movs	r0, #0
        data_ = d;
   b5b56:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b5b58:	60a5      	str	r5, [r4, #8]
        return true;
   b5b5a:	2001      	movs	r0, #1
   b5b5c:	e7f7      	b.n	b5b4e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b5b5e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b5b5e:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b5b60:	6883      	ldr	r3, [r0, #8]
   b5b62:	428b      	cmp	r3, r1
   b5b64:	da02      	bge.n	b5b6c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b5b66:	f7ff ffea 	bl	b5b3e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b5b6a:	bd08      	pop	{r3, pc}
    return true;
   b5b6c:	2001      	movs	r0, #1
   b5b6e:	e7fc      	b.n	b5b6a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b5b70 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b5b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5b74:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5b76:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b5b78:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5b7a:	4419      	add	r1, r3
   b5b7c:	6883      	ldr	r3, [r0, #8]
   b5b7e:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b5b80:	4604      	mov	r4, r0
   b5b82:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5b84:	dc12      	bgt.n	b5bac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b5b86:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5b88:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5b8a:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5b8c:	1bd2      	subs	r2, r2, r7
   b5b8e:	4631      	mov	r1, r6
   b5b90:	1970      	adds	r0, r6, r5
   b5b92:	f002 fd05 	bl	b85a0 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b5b96:	462a      	mov	r2, r5
   b5b98:	4641      	mov	r1, r8
   b5b9a:	4630      	mov	r0, r6
   b5b9c:	f002 fcf2 	bl	b8584 <memcpy>
    size_ += n;
   b5ba0:	6863      	ldr	r3, [r4, #4]
   b5ba2:	442b      	add	r3, r5
   b5ba4:	6063      	str	r3, [r4, #4]
    return true;
   b5ba6:	2001      	movs	r0, #1
}
   b5ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5bac:	f7ff ffc7 	bl	b5b3e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b5bb0:	2800      	cmp	r0, #0
   b5bb2:	d1e8      	bne.n	b5b86 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b5bb4:	e7f8      	b.n	b5ba8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b5bb6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b5bb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5bb8:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5bba:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b5bbe:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b5bc0:	4604      	mov	r4, r0
   b5bc2:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5bc4:	da0b      	bge.n	b5bde <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b5bc6:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5bc8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5bca:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5bcc:	1b52      	subs	r2, r2, r5
   b5bce:	1c48      	adds	r0, r1, #1
   b5bd0:	f002 fce6 	bl	b85a0 <memmove>
    new(p) T(std::move(value));
   b5bd4:	557e      	strb	r6, [r7, r5]
    ++size_;
   b5bd6:	6863      	ldr	r3, [r4, #4]
   b5bd8:	3301      	adds	r3, #1
   b5bda:	6063      	str	r3, [r4, #4]
}
   b5bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5bde:	3101      	adds	r1, #1
   b5be0:	f7ff ffad 	bl	b5b3e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b5be4:	2800      	cmp	r0, #0
   b5be6:	d1ee      	bne.n	b5bc6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b5be8:	e7f8      	b.n	b5bdc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b5bea <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5bea:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b5bec:	6841      	ldr	r1, [r0, #4]
   b5bee:	f7ff bfe2 	b.w	b5bb6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b5bf2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b5bf2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b5bf6:	4604      	mov	r4, r0
   b5bf8:	461d      	mov	r5, r3
   b5bfa:	460f      	mov	r7, r1
   b5bfc:	ab01      	add	r3, sp, #4
   b5bfe:	4690      	mov	r8, r2
   b5c00:	460a      	mov	r2, r1
   b5c02:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5c06:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b5c0a:	f7ff fc73 	bl	b54f4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b5c0e:	1cae      	adds	r6, r5, #2
   b5c10:	6863      	ldr	r3, [r4, #4]
   b5c12:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b5c14:	f1b9 0f00 	cmp.w	r9, #0
   b5c18:	d126      	bne.n	b5c68 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b5c1a:	b328      	cbz	r0, b5c68 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b5c1c:	4433      	add	r3, r6
   b5c1e:	1a1b      	subs	r3, r3, r0
   b5c20:	2bff      	cmp	r3, #255	; 0xff
   b5c22:	d809      	bhi.n	b5c38 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b5c24:	9901      	ldr	r1, [sp, #4]
   b5c26:	4620      	mov	r0, r4
   b5c28:	f7ff fea0 	bl	b596c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b5c2c:	6861      	ldr	r1, [r4, #4]
   b5c2e:	4620      	mov	r0, r4
   b5c30:	4431      	add	r1, r6
   b5c32:	f7ff ff94 	bl	b5b5e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b5c36:	b918      	cbnz	r0, b5c40 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b5c38:	6860      	ldr	r0, [r4, #4]
}
   b5c3a:	b003      	add	sp, #12
   b5c3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b5c40:	1c6a      	adds	r2, r5, #1
   b5c42:	9901      	ldr	r1, [sp, #4]
   b5c44:	b2d2      	uxtb	r2, r2
   b5c46:	4620      	mov	r0, r4
   b5c48:	f7ff ffb5 	bl	b5bb6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b5c4c:	9901      	ldr	r1, [sp, #4]
   b5c4e:	463a      	mov	r2, r7
   b5c50:	3101      	adds	r1, #1
   b5c52:	4620      	mov	r0, r4
   b5c54:	f7ff ffaf 	bl	b5bb6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b5c58:	9901      	ldr	r1, [sp, #4]
   b5c5a:	462b      	mov	r3, r5
   b5c5c:	4642      	mov	r2, r8
   b5c5e:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b5c60:	4620      	mov	r0, r4
   b5c62:	f7ff ff85 	bl	b5b70 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b5c66:	e7e7      	b.n	b5c38 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b5c68:	18f1      	adds	r1, r6, r3
   b5c6a:	29ff      	cmp	r1, #255	; 0xff
   b5c6c:	d8e4      	bhi.n	b5c38 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b5c6e:	4620      	mov	r0, r4
   b5c70:	f7ff ff75 	bl	b5b5e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b5c74:	2800      	cmp	r0, #0
   b5c76:	d0df      	beq.n	b5c38 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b5c78:	1c69      	adds	r1, r5, #1
   b5c7a:	b2c9      	uxtb	r1, r1
   b5c7c:	4620      	mov	r0, r4
   b5c7e:	f7ff ffb4 	bl	b5bea <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b5c82:	4639      	mov	r1, r7
   b5c84:	4620      	mov	r0, r4
   b5c86:	f7ff ffb0 	bl	b5bea <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b5c8a:	6861      	ldr	r1, [r4, #4]
   b5c8c:	462b      	mov	r3, r5
   b5c8e:	4642      	mov	r2, r8
   b5c90:	e7e6      	b.n	b5c60 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b5c92 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b5c92:	b430      	push	{r4, r5}
   b5c94:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b5c98:	b11a      	cbz	r2, b5ca2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b5c9a:	9502      	str	r5, [sp, #8]
}
   b5c9c:	bc30      	pop	{r4, r5}
   b5c9e:	f7ff bfa8 	b.w	b5bf2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b5ca2:	6840      	ldr	r0, [r0, #4]
}
   b5ca4:	bc30      	pop	{r4, r5}
   b5ca6:	4770      	bx	lr

000b5ca8 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b5ca8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b5caa:	2300      	movs	r3, #0
   b5cac:	e9c0 3300 	strd	r3, r3, [r0]
   b5cb0:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b5cb2:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b5cb4:	9300      	str	r3, [sp, #0]
   b5cb6:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b5cb8:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b5cbc:	4619      	mov	r1, r3
   b5cbe:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b5cc2:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b5cc4:	f7ff ffe5 	bl	b5c92 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b5cc8:	4620      	mov	r0, r4
   b5cca:	b004      	add	sp, #16
   b5ccc:	bd10      	pop	{r4, pc}

000b5cce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b5cce:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5cd2:	4604      	mov	r4, r0
   b5cd4:	460d      	mov	r5, r1
   b5cd6:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5cd8:	d914      	bls.n	b5d04 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b5cda:	4290      	cmp	r0, r2
   b5cdc:	d213      	bcs.n	b5d06 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b5cde:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b5ce2:	1a75      	subs	r5, r6, r1
   b5ce4:	f1a1 0708 	sub.w	r7, r1, #8
   b5ce8:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5cea:	42b7      	cmp	r7, r6
   b5cec:	d018      	beq.n	b5d20 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b5cee:	b11c      	cbz	r4, b5cf8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b5cf0:	4631      	mov	r1, r6
   b5cf2:	4620      	mov	r0, r4
   b5cf4:	f7ff fea7 	bl	b5a46 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b5cf8:	1d30      	adds	r0, r6, #4
   b5cfa:	f7ff feae 	bl	b5a5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b5cfe:	3e08      	subs	r6, #8
   b5d00:	3c08      	subs	r4, #8
   b5d02:	e7f2      	b.n	b5cea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b5d04:	d00c      	beq.n	b5d20 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b5d06:	42b5      	cmp	r5, r6
   b5d08:	d00a      	beq.n	b5d20 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b5d0a:	b11c      	cbz	r4, b5d14 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b5d0c:	4629      	mov	r1, r5
   b5d0e:	4620      	mov	r0, r4
   b5d10:	f7ff fe99 	bl	b5a46 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b5d14:	1d28      	adds	r0, r5, #4
   b5d16:	f7ff fea0 	bl	b5a5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b5d1a:	3508      	adds	r5, #8
   b5d1c:	3408      	adds	r4, #8
   b5d1e:	e7f2      	b.n	b5d06 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b5d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5d22 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5d22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5d24:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b5d26:	6846      	ldr	r6, [r0, #4]
   b5d28:	4668      	mov	r0, sp
   b5d2a:	f7ff fe8c 	bl	b5a46 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5d2e:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b5d32:	429f      	cmp	r7, r3
   b5d34:	db12      	blt.n	b5d5c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b5d36:	3701      	adds	r7, #1
        if (n > 0) {
   b5d38:	2f00      	cmp	r7, #0
   b5d3a:	dd29      	ble.n	b5d90 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b5d3c:	00f8      	lsls	r0, r7, #3
   b5d3e:	f7ff f969 	bl	b5014 <malloc>
            if (!d) {
   b5d42:	4605      	mov	r5, r0
   b5d44:	b1f0      	cbz	r0, b5d84 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b5d46:	e9d4 1200 	ldrd	r1, r2, [r4]
   b5d4a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b5d4e:	f7ff ffbe 	bl	b5cce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b5d52:	6820      	ldr	r0, [r4, #0]
   b5d54:	f7ff f966 	bl	b5024 <free>
        data_ = d;
   b5d58:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b5d5a:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b5d5c:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b5d5e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5d60:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b5d64:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b5d68:	4631      	mov	r1, r6
   b5d6a:	f106 0008 	add.w	r0, r6, #8
   b5d6e:	f7ff ffae 	bl	b5cce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b5d72:	b11e      	cbz	r6, b5d7c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b5d74:	4669      	mov	r1, sp
   b5d76:	4630      	mov	r0, r6
   b5d78:	f7ff fe65 	bl	b5a46 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b5d7c:	6863      	ldr	r3, [r4, #4]
   b5d7e:	3301      	adds	r3, #1
   b5d80:	6063      	str	r3, [r4, #4]
    return true;
   b5d82:	2501      	movs	r5, #1
   b5d84:	a801      	add	r0, sp, #4
   b5d86:	f7ff fe68 	bl	b5a5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5d8a:	4628      	mov	r0, r5
   b5d8c:	b003      	add	sp, #12
   b5d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b5d90:	2500      	movs	r5, #0
   b5d92:	e7de      	b.n	b5d52 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b5d94 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b5d96:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5d9a:	4605      	mov	r5, r0
   b5d9c:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b5d9e:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b5da2:	42a6      	cmp	r6, r4
   b5da4:	d005      	beq.n	b5db2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b5da6:	4639      	mov	r1, r7
   b5da8:	4620      	mov	r0, r4
   b5daa:	f7ff fd30 	bl	b580e <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b5dae:	b108      	cbz	r0, b5db4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b5db0:	b914      	cbnz	r4, b5db8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b5db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b5db4:	3408      	adds	r4, #8
   b5db6:	e7f4      	b.n	b5da2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b5db8:	1d20      	adds	r0, r4, #4
   b5dba:	f7ff fe4e 	bl	b5a5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b5dbe:	e9d5 3200 	ldrd	r3, r2, [r5]
   b5dc2:	f104 0108 	add.w	r1, r4, #8
   b5dc6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b5dca:	4620      	mov	r0, r4
   b5dcc:	f7ff ff7f 	bl	b5cce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b5dd0:	686b      	ldr	r3, [r5, #4]
   b5dd2:	3b01      	subs	r3, #1
   b5dd4:	606b      	str	r3, [r5, #4]
    return true;
   b5dd6:	e7ec      	b.n	b5db2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>

000b5dd8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b5dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5ddc:	4605      	mov	r5, r0
   b5dde:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b5de0:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b5de2:	460c      	mov	r4, r1
        WiringBleLock lk;
   b5de4:	f7ff fbf4 	bl	b55d0 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b5de8:	682e      	ldr	r6, [r5, #0]
   b5dea:	1ef3      	subs	r3, r6, #3
   b5dec:	2b0d      	cmp	r3, #13
   b5dee:	d83c      	bhi.n	b5e6a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b5df0:	e8df f013 	tbh	[pc, r3, lsl #1]
   b5df4:	0057000e 	.word	0x0057000e
   b5df8:	00d3003b 	.word	0x00d3003b
   b5dfc:	003b003b 	.word	0x003b003b
   b5e00:	003b003b 	.word	0x003b003b
   b5e04:	009d003b 	.word	0x009d003b
   b5e08:	009d009d 	.word	0x009d009d
   b5e0c:	009d009d 	.word	0x009d009d
                    BlePeerDevice peer;
   b5e10:	a804      	add	r0, sp, #16
   b5e12:	f7ff fcc7 	bl	b57a4 <_ZN8particle13BlePeerDeviceC1Ev>
                    peer.impl()->connHandle() = event->conn_handle;
   b5e16:	9b04      	ldr	r3, [sp, #16]
   b5e18:	89aa      	ldrh	r2, [r5, #12]
   b5e1a:	801a      	strh	r2, [r3, #0]
                    peer.impl()->address() = event->params.connected.info->address;
   b5e1c:	6869      	ldr	r1, [r5, #4]
   b5e1e:	9804      	ldr	r0, [sp, #16]
   b5e20:	3108      	adds	r1, #8
   b5e22:	3002      	adds	r0, #2
   b5e24:	f7ff fbee 	bl	b5604 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b5e28:	a904      	add	r1, sp, #16
   b5e2a:	a806      	add	r0, sp, #24
   b5e2c:	f7ff fe0b 	bl	b5a46 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    if (!impl->peers_.append(peer)) {
   b5e30:	a906      	add	r1, sp, #24
   b5e32:	f104 0018 	add.w	r0, r4, #24
   b5e36:	f7ff ff74 	bl	b5d22 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b5e3a:	4605      	mov	r5, r0
   b5e3c:	a807      	add	r0, sp, #28
   b5e3e:	f7ff fe0c 	bl	b5a5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5e42:	b9c5      	cbnz	r5, b5e76 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                        LOG(TRACE, "Failed to append peer Central device.");
   b5e44:	2320      	movs	r3, #32
   b5e46:	e9cd 3506 	strd	r3, r5, [sp, #24]
   b5e4a:	4b5e      	ldr	r3, [pc, #376]	; (b5fc4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b5e4c:	495e      	ldr	r1, [pc, #376]	; (b5fc8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b5e4e:	9300      	str	r3, [sp, #0]
   b5e50:	aa06      	add	r2, sp, #24
   b5e52:	462b      	mov	r3, r5
   b5e54:	2001      	movs	r0, #1
   b5e56:	f7ff f829 	bl	b4eac <log_message>
                        hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b5e5a:	9b04      	ldr	r3, [sp, #16]
   b5e5c:	4629      	mov	r1, r5
   b5e5e:	8818      	ldrh	r0, [r3, #0]
   b5e60:	f7fe fe80 	bl	b4b64 <hal_ble_gap_disconnect>
   b5e64:	a805      	add	r0, sp, #20
   b5e66:	f7ff fdf8 	bl	b5a5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b5e6a:	a803      	add	r0, sp, #12
   b5e6c:	f7ff fbbe 	bl	b55ec <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b5e70:	b00e      	add	sp, #56	; 0x38
   b5e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if (impl->connectedCallback_) {
   b5e76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b5e78:	b123      	cbz	r3, b5e84 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xac>
                        impl->connectedCallback_(peer);
   b5e7a:	a904      	add	r1, sp, #16
   b5e7c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b5e80:	f7ff fe54 	bl	b5b2c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b5e84:	a805      	add	r0, sp, #20
   b5e86:	f7ff fde8 	bl	b5a5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                LOG(TRACE, "Connected");
   b5e8a:	2120      	movs	r1, #32
   b5e8c:	2300      	movs	r3, #0
   b5e8e:	e9cd 1306 	strd	r1, r3, [sp, #24]
   b5e92:	4a4e      	ldr	r2, [pc, #312]	; (b5fcc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
                    LOG(TRACE, "Disconnected");
   b5e94:	9200      	str	r2, [sp, #0]
   b5e96:	494c      	ldr	r1, [pc, #304]	; (b5fc8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b5e98:	aa06      	add	r2, sp, #24
   b5e9a:	2001      	movs	r0, #1
   b5e9c:	f7ff f806 	bl	b4eac <log_message>
   b5ea0:	e7e3      	b.n	b5e6a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b5ea2:	89a9      	ldrh	r1, [r5, #12]
   b5ea4:	4620      	mov	r0, r4
   b5ea6:	f7ff fc6b 	bl	b5780 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b5eaa:	4606      	mov	r6, r0
   b5eac:	2800      	cmp	r0, #0
   b5eae:	d0dc      	beq.n	b5e6a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b5eb0:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b5eb2:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b5eb6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b5eba:	8029      	strh	r1, [r5, #0]
   b5ebc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b5ec0:	429a      	cmp	r2, r3
   b5ec2:	d003      	beq.n	b5ecc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
   b5ec4:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b5ec8:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b5eca:	e7f9      	b.n	b5ec0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe8>
    destruct(data_, data_ + size_);
   b5ecc:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b5ed0:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b5ed4:	45b8      	cmp	r8, r7
   b5ed6:	d004      	beq.n	b5ee2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10a>
      ~__shared_ptr() = default;
   b5ed8:	1d38      	adds	r0, r7, #4
   b5eda:	f7ff fdbe 	bl	b5a5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5ede:	3708      	adds	r7, #8
   b5ee0:	e7f8      	b.n	b5ed4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfc>
    size_ = 0;
   b5ee2:	2300      	movs	r3, #0
   b5ee4:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b5ee6:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b5eea:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b5eee:	45b8      	cmp	r8, r7
   b5ef0:	d004      	beq.n	b5efc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x124>
   b5ef2:	1d38      	adds	r0, r7, #4
   b5ef4:	f7ff fdb1 	bl	b5a5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5ef8:	3708      	adds	r7, #8
   b5efa:	e7f8      	b.n	b5eee <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x116>
    size_ = 0;
   b5efc:	2300      	movs	r3, #0
   b5efe:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b5f00:	72ab      	strb	r3, [r5, #10]
                        if (impl->disconnectedCallback_) {
   b5f02:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b5f04:	b123      	cbz	r3, b5f10 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>
                            impl->disconnectedCallback_(*peer);
   b5f06:	4631      	mov	r1, r6
   b5f08:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b5f0c:	f7ff fe0e 	bl	b5b2c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
      { return _M_ptr; }
   b5f10:	6833      	ldr	r3, [r6, #0]
                        peer->impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b5f12:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b5f16:	801a      	strh	r2, [r3, #0]
                        impl->peers_.removeOne(*peer);
   b5f18:	4631      	mov	r1, r6
   b5f1a:	f104 0018 	add.w	r0, r4, #24
   b5f1e:	f7ff ff39 	bl	b5d94 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
                    LOG(TRACE, "Disconnected");
   b5f22:	2220      	movs	r2, #32
   b5f24:	2300      	movs	r3, #0
   b5f26:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b5f2a:	4a29      	ldr	r2, [pc, #164]	; (b5fd0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f8>)
   b5f2c:	e7b2      	b.n	b5e94 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbc>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b5f2e:	89a9      	ldrh	r1, [r5, #12]
   b5f30:	4620      	mov	r0, r4
   b5f32:	f7ff fc25 	bl	b5780 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b5f36:	2800      	cmp	r0, #0
   b5f38:	d097      	beq.n	b5e6a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b5f3a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b5f3c:	2b00      	cmp	r3, #0
   b5f3e:	d094      	beq.n	b5e6a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b5f40:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b5f42:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b5f44:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b5f48:	d001      	beq.n	b5f4e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x176>
   b5f4a:	2e10      	cmp	r6, #16
   b5f4c:	d117      	bne.n	b5f7e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a6>
                        BlePairingEventPayload payload = {};
   b5f4e:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b5f50:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b5f52:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b5f54:	2506      	movs	r5, #6
                        };
   b5f56:	f88d 3015 	strb.w	r3, [sp, #21]
   b5f5a:	9104      	str	r1, [sp, #16]
   b5f5c:	f88d 2014 	strb.w	r2, [sp, #20]
   b5f60:	9006      	str	r0, [sp, #24]
   b5f62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b5f66:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b5f68:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b5f6c:	9508      	str	r5, [sp, #32]
   b5f6e:	e883 0003 	stmia.w	r3, {r0, r1}
   b5f72:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b5f74:	a906      	add	r1, sp, #24
   b5f76:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b5f7a:	4798      	blx	r3
   b5f7c:	e775      	b.n	b5e6a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b5f7e:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b5f80:	bf01      	itttt	eq
   b5f82:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b5f84:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b5f86:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b5f8a:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b5f8c:	bf0f      	iteee	eq
   b5f8e:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b5f92:	461a      	movne	r2, r3
   b5f94:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b5f96:	461d      	movne	r5, r3
   b5f98:	e7dd      	b.n	b5f56 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b5f9a:	89a9      	ldrh	r1, [r5, #12]
   b5f9c:	4620      	mov	r0, r4
   b5f9e:	f7ff fbef 	bl	b5780 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b5fa2:	4601      	mov	r1, r0
   b5fa4:	2800      	cmp	r0, #0
   b5fa6:	f43f af60 	beq.w	b5e6a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b5faa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b5fac:	2b00      	cmp	r3, #0
   b5fae:	f43f af5c 	beq.w	b5e6a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b5fb2:	686b      	ldr	r3, [r5, #4]
   b5fb4:	9306      	str	r3, [sp, #24]
   b5fb6:	aa06      	add	r2, sp, #24
   b5fb8:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b5fba:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b5fbe:	4798      	blx	r3
   b5fc0:	e753      	b.n	b5e6a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b5fc2:	bf00      	nop
   b5fc4:	000b8b28 	.word	0x000b8b28
   b5fc8:	000b8abf 	.word	0x000b8abf
   b5fcc:	000b8b4e 	.word	0x000b8b4e
   b5fd0:	000b8b58 	.word	0x000b8b58

000b5fd4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b5fd4:	b513      	push	{r0, r1, r4, lr}
   b5fd6:	460b      	mov	r3, r1
   b5fd8:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5fda:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5fde:	466c      	mov	r4, sp
   b5fe0:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5fe4:	e893 0003 	ldmia.w	r3, {r0, r1}
   b5fe8:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5fec:	e894 0003 	ldmia.w	r4, {r0, r1}
   b5ff0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b5ff4:	b002      	add	sp, #8
   b5ff6:	bd10      	pop	{r4, pc}

000b5ff8 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>:
      void swap(function& __x) noexcept
   b5ff8:	b538      	push	{r3, r4, r5, lr}
   b5ffa:	4605      	mov	r5, r0
   b5ffc:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b5ffe:	f7ff ffe9 	bl	b5fd4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6002:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b6004:	68a2      	ldr	r2, [r4, #8]
   b6006:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6008:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b600a:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b600c:	68e2      	ldr	r2, [r4, #12]
   b600e:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6010:	60e3      	str	r3, [r4, #12]
      }
   b6012:	bd38      	pop	{r3, r4, r5, pc}

000b6014 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onDisconnected(BleOnDisconnectedCallback callback, void* context) const {
   b6014:	b510      	push	{r4, lr}
        disconnectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnDisconnectedStdFunction)nullptr;
   b6016:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onDisconnected(BleOnDisconnectedCallback callback, void* context) const {
   b6018:	b08a      	sub	sp, #40	; 0x28
        disconnectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnDisconnectedStdFunction)nullptr;
   b601a:	3434      	adds	r4, #52	; 0x34
   b601c:	b1b9      	cbz	r1, b604e <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x3a>
   b601e:	e9cd 1200 	strd	r1, r2, [sp]
   b6022:	a802      	add	r0, sp, #8
   b6024:	4669      	mov	r1, sp
   b6026:	f7ff fcef 	bl	b5a08 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b602a:	2300      	movs	r3, #0
	__x.swap(*this);
   b602c:	a906      	add	r1, sp, #24
   b602e:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b6030:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b6032:	f7ff ffe1 	bl	b5ff8 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   b6036:	4621      	mov	r1, r4
   b6038:	a806      	add	r0, sp, #24
   b603a:	f7ff ffdd 	bl	b5ff8 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   b603e:	a806      	add	r0, sp, #24
   b6040:	f7ff fa93 	bl	b556a <_ZNSt14_Function_baseD1Ev>
   b6044:	a802      	add	r0, sp, #8
   b6046:	f7ff fa90 	bl	b556a <_ZNSt14_Function_baseD1Ev>
}
   b604a:	b00a      	add	sp, #40	; 0x28
   b604c:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b604e:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b6050:	e7eb      	b.n	b602a <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000b6052 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b6052:	b510      	push	{r4, lr}
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b6054:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b6056:	b08a      	sub	sp, #40	; 0x28
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b6058:	3424      	adds	r4, #36	; 0x24
   b605a:	b1b9      	cbz	r1, b608c <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x3a>
   b605c:	e9cd 1200 	strd	r1, r2, [sp]
   b6060:	a802      	add	r0, sp, #8
   b6062:	4669      	mov	r1, sp
   b6064:	f7ff fcd0 	bl	b5a08 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b6068:	2300      	movs	r3, #0
	__x.swap(*this);
   b606a:	a906      	add	r1, sp, #24
   b606c:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b606e:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b6070:	f7ff ffc2 	bl	b5ff8 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   b6074:	4621      	mov	r1, r4
   b6076:	a806      	add	r0, sp, #24
   b6078:	f7ff ffbe 	bl	b5ff8 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   b607c:	a806      	add	r0, sp, #24
   b607e:	f7ff fa74 	bl	b556a <_ZNSt14_Function_baseD1Ev>
   b6082:	a802      	add	r0, sp, #8
   b6084:	f7ff fa71 	bl	b556a <_ZNSt14_Function_baseD1Ev>
}
   b6088:	b00a      	add	sp, #40	; 0x28
   b608a:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b608c:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b608e:	e7eb      	b.n	b6068 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000b6090 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b6090:	4802      	ldr	r0, [pc, #8]	; (b609c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6092:	2300      	movs	r3, #0
   b6094:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b6096:	f7fe bd91 	b.w	b4bbc <os_mutex_recursive_create>
   b609a:	bf00      	nop
   b609c:	2003e6a4 	.word	0x2003e6a4

000b60a0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b60a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b60a2:	4606      	mov	r6, r0
   b60a4:	460d      	mov	r5, r1
  size_t n = 0;
   b60a6:	188f      	adds	r7, r1, r2
   b60a8:	2400      	movs	r4, #0
  while (size--) {
   b60aa:	42bd      	cmp	r5, r7
   b60ac:	d00c      	beq.n	b60c8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b60ae:	6833      	ldr	r3, [r6, #0]
   b60b0:	f815 1b01 	ldrb.w	r1, [r5], #1
   b60b4:	689b      	ldr	r3, [r3, #8]
   b60b6:	4630      	mov	r0, r6
   b60b8:	4798      	blx	r3
     if (chunk>=0)
   b60ba:	1e03      	subs	r3, r0, #0
   b60bc:	db01      	blt.n	b60c2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b60be:	441c      	add	r4, r3
  while (size--) {
   b60c0:	e7f3      	b.n	b60aa <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b60c2:	2c00      	cmp	r4, #0
   b60c4:	bf08      	it	eq
   b60c6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b60c8:	4620      	mov	r0, r4
   b60ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b60cc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b60cc:	b513      	push	{r0, r1, r4, lr}
   b60ce:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b60d0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b60d2:	b159      	cbz	r1, b60ec <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b60d4:	9101      	str	r1, [sp, #4]
   b60d6:	f7fd ffab 	bl	b4030 <strlen>
   b60da:	6823      	ldr	r3, [r4, #0]
   b60dc:	9901      	ldr	r1, [sp, #4]
   b60de:	68db      	ldr	r3, [r3, #12]
   b60e0:	4602      	mov	r2, r0
   b60e2:	4620      	mov	r0, r4
    }
   b60e4:	b002      	add	sp, #8
   b60e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b60ea:	4718      	bx	r3
    }
   b60ec:	b002      	add	sp, #8
   b60ee:	bd10      	pop	{r4, pc}

000b60f0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b60f0:	b508      	push	{r3, lr}
  return write(str);
   b60f2:	f7ff ffeb 	bl	b60cc <_ZN5Print5writeEPKc>
}
   b60f6:	bd08      	pop	{r3, pc}

000b60f8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b60f8:	6803      	ldr	r3, [r0, #0]
   b60fa:	689b      	ldr	r3, [r3, #8]
   b60fc:	4718      	bx	r3

000b60fe <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b60fe:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6100:	210d      	movs	r1, #13
{
   b6102:	4605      	mov	r5, r0
  size_t n = print('\r');
   b6104:	f7ff fff8 	bl	b60f8 <_ZN5Print5printEc>
  n += print('\n');
   b6108:	210a      	movs	r1, #10
  size_t n = print('\r');
   b610a:	4604      	mov	r4, r0
  n += print('\n');
   b610c:	4628      	mov	r0, r5
   b610e:	f7ff fff3 	bl	b60f8 <_ZN5Print5printEc>
  return n;
}
   b6112:	4420      	add	r0, r4
   b6114:	bd38      	pop	{r3, r4, r5, pc}

000b6116 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b6116:	b538      	push	{r3, r4, r5, lr}
   b6118:	4605      	mov	r5, r0
  return write(str);
   b611a:	f7ff ffd7 	bl	b60cc <_ZN5Print5writeEPKc>
   b611e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b6120:	4628      	mov	r0, r5
   b6122:	f7ff ffec 	bl	b60fe <_ZN5Print7printlnEv>
  return n;
}
   b6126:	4420      	add	r0, r4
   b6128:	bd38      	pop	{r3, r4, r5, pc}

000b612a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b612a:	b530      	push	{r4, r5, lr}
   b612c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b612e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6130:	2a01      	cmp	r2, #1
  *str = '\0';
   b6132:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b6136:	bf98      	it	ls
   b6138:	220a      	movls	r2, #10
   b613a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b613c:	460d      	mov	r5, r1
   b613e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6142:	fb01 5312 	mls	r3, r1, r2, r5
   b6146:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b614a:	2b09      	cmp	r3, #9
   b614c:	bf94      	ite	ls
   b614e:	3330      	addls	r3, #48	; 0x30
   b6150:	3337      	addhi	r3, #55	; 0x37
   b6152:	b2db      	uxtb	r3, r3
  } while(n);
   b6154:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6156:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b615a:	d9ef      	bls.n	b613c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b615c:	4621      	mov	r1, r4
   b615e:	f7ff ffb5 	bl	b60cc <_ZN5Print5writeEPKc>
}
   b6162:	b00b      	add	sp, #44	; 0x2c
   b6164:	bd30      	pop	{r4, r5, pc}

000b6166 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b6166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b616a:	b086      	sub	sp, #24
   b616c:	af00      	add	r7, sp, #0
   b616e:	4605      	mov	r5, r0
   b6170:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b6172:	1d38      	adds	r0, r7, #4
   b6174:	2114      	movs	r1, #20
{
   b6176:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6178:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b617a:	f7fe ff63 	bl	b5044 <vsnprintf>

    if (n<bufsize)
   b617e:	2813      	cmp	r0, #19
   b6180:	d80e      	bhi.n	b61a0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6182:	1d39      	adds	r1, r7, #4
   b6184:	4628      	mov	r0, r5
   b6186:	f7ff ffa1 	bl	b60cc <_ZN5Print5writeEPKc>
   b618a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b618c:	b11e      	cbz	r6, b6196 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b618e:	4628      	mov	r0, r5
   b6190:	f7ff ffb5 	bl	b60fe <_ZN5Print7printlnEv>
   b6194:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b6196:	4620      	mov	r0, r4
   b6198:	3718      	adds	r7, #24
   b619a:	46bd      	mov	sp, r7
   b619c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b61a0:	f100 0308 	add.w	r3, r0, #8
   b61a4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b61a8:	46e8      	mov	r8, sp
        char bigger[n+1];
   b61aa:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b61ae:	4622      	mov	r2, r4
   b61b0:	1c41      	adds	r1, r0, #1
   b61b2:	683b      	ldr	r3, [r7, #0]
   b61b4:	4668      	mov	r0, sp
   b61b6:	f7fe ff45 	bl	b5044 <vsnprintf>
  return write(str);
   b61ba:	4669      	mov	r1, sp
   b61bc:	4628      	mov	r0, r5
   b61be:	f7ff ff85 	bl	b60cc <_ZN5Print5writeEPKc>
   b61c2:	4604      	mov	r4, r0
   b61c4:	46c5      	mov	sp, r8
   b61c6:	e7e1      	b.n	b618c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b61c8 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b61c8:	6880      	ldr	r0, [r0, #8]
   b61ca:	6803      	ldr	r3, [r0, #0]
   b61cc:	68db      	ldr	r3, [r3, #12]
   b61ce:	4718      	bx	r3

000b61d0 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b61d0:	4770      	bx	lr

000b61d2 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b61d2:	4608      	mov	r0, r1
   b61d4:	b111      	cbz	r1, b61dc <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b61d6:	680b      	ldr	r3, [r1, #0]
   b61d8:	685b      	ldr	r3, [r3, #4]
   b61da:	4718      	bx	r3
}
   b61dc:	4770      	bx	lr

000b61de <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b61de:	4770      	bx	lr

000b61e0 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b61e0:	4770      	bx	lr

000b61e2 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b61e2:	4770      	bx	lr

000b61e4 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b61e4:	4770      	bx	lr

000b61e6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b61e6:	b538      	push	{r3, r4, r5, lr}
   b61e8:	4604      	mov	r4, r0
   b61ea:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b61ec:	6800      	ldr	r0, [r0, #0]
   b61ee:	212e      	movs	r1, #46	; 0x2e
   b61f0:	f002 fa33 	bl	b865a <strchrnul>
    size = s - category;
   b61f4:	6823      	ldr	r3, [r4, #0]
   b61f6:	1ac3      	subs	r3, r0, r3
   b61f8:	602b      	str	r3, [r5, #0]
    if (size) {
   b61fa:	b123      	cbz	r3, b6206 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b61fc:	7803      	ldrb	r3, [r0, #0]
   b61fe:	b103      	cbz	r3, b6202 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b6200:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
   b6202:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b6204:	6020      	str	r0, [r4, #0]
}
   b6206:	4618      	mov	r0, r3
   b6208:	bd38      	pop	{r3, r4, r5, pc}

000b620a <_ZN5spark16JSONStreamWriterD0Ev>:
   b620a:	b510      	push	{r4, lr}
   b620c:	210c      	movs	r1, #12
   b620e:	4604      	mov	r4, r0
   b6210:	f7fd ff57 	bl	b40c2 <_ZdlPvj>
   b6214:	4620      	mov	r0, r4
   b6216:	bd10      	pop	{r4, pc}

000b6218 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b6218:	b510      	push	{r4, lr}
   b621a:	2104      	movs	r1, #4
   b621c:	4604      	mov	r4, r0
   b621e:	f7fd ff50 	bl	b40c2 <_ZdlPvj>
   b6222:	4620      	mov	r0, r4
   b6224:	bd10      	pop	{r4, pc}

000b6226 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b6226:	b510      	push	{r4, lr}
   b6228:	2104      	movs	r1, #4
   b622a:	4604      	mov	r4, r0
   b622c:	f7fd ff49 	bl	b40c2 <_ZdlPvj>
   b6230:	4620      	mov	r0, r4
   b6232:	bd10      	pop	{r4, pc}

000b6234 <_ZN14RecursiveMutex4lockEv.isra.0>:
    void lock() { os_mutex_recursive_lock(handle_); }
   b6234:	f7fe bcd2 	b.w	b4bdc <os_mutex_recursive_lock>

000b6238 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b6238:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b623a:	f7fd feef 	bl	b401c <strcmp>
}
   b623e:	fab0 f080 	clz	r0, r0
   b6242:	0940      	lsrs	r0, r0, #5
   b6244:	bd08      	pop	{r3, pc}

000b6246 <__tcf_1>:
   b6246:	4770      	bx	lr

000b6248 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b6248:	b510      	push	{r4, lr}
   b624a:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b624c:	f001 f92c 	bl	b74a8 <_Z16_fetch_usbserialv>
   b6250:	4284      	cmp	r4, r0
   b6252:	d010      	beq.n	b6276 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b6254:	f001 fffa 	bl	b824c <_Z22__fetch_global_Serial1v>
   b6258:	4284      	cmp	r4, r0
   b625a:	d105      	bne.n	b6268 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b625c:	f001 fff6 	bl	b824c <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b6260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b6264:	f001 b99f 	b.w	b75a6 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b6268:	b12c      	cbz	r4, b6276 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b626a:	6823      	ldr	r3, [r4, #0]
   b626c:	4620      	mov	r0, r4
   b626e:	685b      	ldr	r3, [r3, #4]
}
   b6270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6274:	4718      	bx	r3
   b6276:	bd10      	pop	{r4, pc}

000b6278 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6278:	680b      	ldr	r3, [r1, #0]
   b627a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b627c:	684b      	ldr	r3, [r1, #4]
   b627e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b6280:	b113      	cbz	r3, b6288 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b6282:	685a      	ldr	r2, [r3, #4]
   b6284:	3201      	adds	r2, #1
   b6286:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6288:	4770      	bx	lr

000b628a <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b628a:	b513      	push	{r0, r1, r4, lr}
   b628c:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b628e:	4608      	mov	r0, r1
   b6290:	9101      	str	r1, [sp, #4]
   b6292:	f7fd fecd 	bl	b4030 <strlen>
   b6296:	9901      	ldr	r1, [sp, #4]
   b6298:	4602      	mov	r2, r0
   b629a:	4620      	mov	r0, r4
}
   b629c:	b002      	add	sp, #8
   b629e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b62a2:	f001 bf51 	b.w	b8148 <_ZN5spark10JSONWriter5valueEPKcj>

000b62a6 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b62a6:	b513      	push	{r0, r1, r4, lr}
   b62a8:	4604      	mov	r4, r0
    write(str, strlen(str));
   b62aa:	4608      	mov	r0, r1
   b62ac:	9101      	str	r1, [sp, #4]
   b62ae:	f7fd febf 	bl	b4030 <strlen>
   b62b2:	6823      	ldr	r3, [r4, #0]
   b62b4:	9901      	ldr	r1, [sp, #4]
   b62b6:	68db      	ldr	r3, [r3, #12]
   b62b8:	4602      	mov	r2, r0
   b62ba:	4620      	mov	r0, r4
}
   b62bc:	b002      	add	sp, #8
   b62be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b62c2:	4718      	bx	r3

000b62c4 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b62c4:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b62c6:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b62c8:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b62cc:	68db      	ldr	r3, [r3, #12]
   b62ce:	2201      	movs	r2, #1
   b62d0:	f10d 0107 	add.w	r1, sp, #7
   b62d4:	4798      	blx	r3
}
   b62d6:	b003      	add	sp, #12
   b62d8:	f85d fb04 	ldr.w	pc, [sp], #4

000b62dc <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b62dc:	680a      	ldr	r2, [r1, #0]
   b62de:	6002      	str	r2, [r0, #0]
   b62e0:	684a      	ldr	r2, [r1, #4]
   b62e2:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b62e4:	2200      	movs	r2, #0
   b62e6:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b62ea:	b510      	push	{r4, lr}
   b62ec:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b62ee:	688c      	ldr	r4, [r1, #8]
   b62f0:	6084      	str	r4, [r0, #8]
   b62f2:	68cc      	ldr	r4, [r1, #12]
   b62f4:	60c4      	str	r4, [r0, #12]
   b62f6:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b62f8:	608a      	str	r2, [r1, #8]
   b62fa:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b62fc:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b62fe:	610a      	str	r2, [r1, #16]
   b6300:	bd10      	pop	{r4, pc}
	...

000b6304 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b6304:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b6308:	e9d0 8400 	ldrd	r8, r4, [r0]
   b630c:	f04f 0a14 	mov.w	sl, #20
   b6310:	9300      	str	r3, [sp, #0]
   b6312:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b6316:	4b18      	ldr	r3, [pc, #96]	; (b6378 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b6318:	10a4      	asrs	r4, r4, #2
   b631a:	4617      	mov	r7, r2
   b631c:	435c      	muls	r4, r3
   b631e:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b6320:	2c00      	cmp	r4, #0
   b6322:	dd21      	ble.n	b6368 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b6324:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b6326:	fb0a f006 	mul.w	r0, sl, r6
   b632a:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b632e:	463a      	mov	r2, r7
   b6330:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b6334:	5828      	ldr	r0, [r5, r0]
   b6336:	9101      	str	r1, [sp, #4]
   b6338:	455f      	cmp	r7, fp
   b633a:	bf28      	it	cs
   b633c:	465a      	movcs	r2, fp
   b633e:	f002 f99e 	bl	b867e <strncmp>
                if (cmp == 0) {
   b6342:	2800      	cmp	r0, #0
   b6344:	9901      	ldr	r1, [sp, #4]
   b6346:	f04f 0301 	mov.w	r3, #1
   b634a:	d10b      	bne.n	b6364 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b634c:	455f      	cmp	r7, fp
   b634e:	d103      	bne.n	b6358 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b6350:	9a00      	ldr	r2, [sp, #0]
   b6352:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b6354:	4634      	mov	r4, r6
   b6356:	e7e3      	b.n	b6320 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b6358:	d9fc      	bls.n	b6354 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b635a:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b635c:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b6360:	3e01      	subs	r6, #1
   b6362:	e7f7      	b.n	b6354 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b6364:	dbf9      	blt.n	b635a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b6366:	e7f5      	b.n	b6354 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b6368:	eba5 0508 	sub.w	r5, r5, r8
}
   b636c:	4802      	ldr	r0, [pc, #8]	; (b6378 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b636e:	10ad      	asrs	r5, r5, #2
   b6370:	4368      	muls	r0, r5
   b6372:	b003      	add	sp, #12
   b6374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6378:	cccccccd 	.word	0xcccccccd

000b637c <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b637c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b637e:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b6380:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b6382:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b6384:	b303      	cbz	r3, b63c8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b6386:	b1f9      	cbz	r1, b63c8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b6388:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b638a:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b638e:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b6390:	a903      	add	r1, sp, #12
   b6392:	a801      	add	r0, sp, #4
   b6394:	f7ff ff27 	bl	b61e6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b6398:	4601      	mov	r1, r0
   b639a:	b1a8      	cbz	r0, b63c8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b639c:	f10d 030b 	add.w	r3, sp, #11
   b63a0:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b63a2:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b63a6:	4620      	mov	r0, r4
   b63a8:	f7ff ffac 	bl	b6304 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b63ac:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b63b0:	b153      	cbz	r3, b63c8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b63b2:	6823      	ldr	r3, [r4, #0]
   b63b4:	2414      	movs	r4, #20
   b63b6:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b63ba:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b63bc:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b63c0:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b63c2:	bfa8      	it	ge
   b63c4:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b63c6:	e7e3      	b.n	b6390 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b63c8:	4628      	mov	r0, r5
   b63ca:	b004      	add	sp, #16
   b63cc:	bd70      	pop	{r4, r5, r6, pc}

000b63ce <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b63ce:	b40e      	push	{r1, r2, r3}
   b63d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b63d2:	b08c      	sub	sp, #48	; 0x30
   b63d4:	af00      	add	r7, sp, #0
   b63d6:	f107 0544 	add.w	r5, r7, #68	; 0x44
   b63da:	4604      	mov	r4, r0
   b63dc:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b63e0:	607a      	str	r2, [r7, #4]
   b63e2:	462b      	mov	r3, r5
   b63e4:	2120      	movs	r1, #32
   b63e6:	f107 0010 	add.w	r0, r7, #16
    va_start(args, fmt);
   b63ea:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b63ec:	f7fe fe2a 	bl	b5044 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
   b63f0:	281f      	cmp	r0, #31
   b63f2:	687a      	ldr	r2, [r7, #4]
   b63f4:	d91a      	bls.n	b642c <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
   b63f6:	f100 0308 	add.w	r3, r0, #8
   b63fa:	f023 0307 	bic.w	r3, r3, #7
        }
   b63fe:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
   b6400:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6404:	1c41      	adds	r1, r0, #1
   b6406:	462b      	mov	r3, r5
   b6408:	4668      	mov	r0, sp
        va_start(args, fmt);
   b640a:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b640c:	f7fe fe1a 	bl	b5044 <vsnprintf>
        if (n > 0) {
   b6410:	1e02      	subs	r2, r0, #0
   b6412:	dd04      	ble.n	b641e <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
   b6414:	6823      	ldr	r3, [r4, #0]
   b6416:	4669      	mov	r1, sp
   b6418:	68db      	ldr	r3, [r3, #12]
   b641a:	4620      	mov	r0, r4
   b641c:	4798      	blx	r3
   b641e:	46b5      	mov	sp, r6
}
   b6420:	3730      	adds	r7, #48	; 0x30
   b6422:	46bd      	mov	sp, r7
   b6424:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b6428:	b003      	add	sp, #12
   b642a:	4770      	bx	lr
    } else if (n > 0) {
   b642c:	2800      	cmp	r0, #0
   b642e:	d0f7      	beq.n	b6420 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
   b6430:	6823      	ldr	r3, [r4, #0]
   b6432:	4602      	mov	r2, r0
   b6434:	68db      	ldr	r3, [r3, #12]
   b6436:	f107 0110 	add.w	r1, r7, #16
   b643a:	4620      	mov	r0, r4
   b643c:	4798      	blx	r3
}
   b643e:	e7ef      	b.n	b6420 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

000b6440 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b6440:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b6442:	4c09      	ldr	r4, [pc, #36]	; (b6468 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b6444:	7823      	ldrb	r3, [r4, #0]
   b6446:	f3bf 8f5b 	dmb	ish
   b644a:	07db      	lsls	r3, r3, #31
   b644c:	d409      	bmi.n	b6462 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b644e:	4620      	mov	r0, r4
   b6450:	f7fd fe46 	bl	b40e0 <__cxa_guard_acquire>
   b6454:	b128      	cbz	r0, b6462 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b6456:	4620      	mov	r0, r4
   b6458:	f7fd fe47 	bl	b40ea <__cxa_guard_release>
   b645c:	4803      	ldr	r0, [pc, #12]	; (b646c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b645e:	f002 f873 	bl	b8548 <atexit>
}
   b6462:	4803      	ldr	r0, [pc, #12]	; (b6470 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b6464:	bd10      	pop	{r4, pc}
   b6466:	bf00      	nop
   b6468:	2003e6b0 	.word	0x2003e6b0
   b646c:	000b61df 	.word	0x000b61df
   b6470:	2003e53c 	.word	0x2003e53c

000b6474 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b6474:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b6476:	4c09      	ldr	r4, [pc, #36]	; (b649c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b6478:	7823      	ldrb	r3, [r4, #0]
   b647a:	f3bf 8f5b 	dmb	ish
   b647e:	07db      	lsls	r3, r3, #31
   b6480:	d409      	bmi.n	b6496 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b6482:	4620      	mov	r0, r4
   b6484:	f7fd fe2c 	bl	b40e0 <__cxa_guard_acquire>
   b6488:	b128      	cbz	r0, b6496 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b648a:	4620      	mov	r0, r4
   b648c:	f7fd fe2d 	bl	b40ea <__cxa_guard_release>
   b6490:	4803      	ldr	r0, [pc, #12]	; (b64a0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b6492:	f002 f859 	bl	b8548 <atexit>
    return &factory;
}
   b6496:	4803      	ldr	r0, [pc, #12]	; (b64a4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b6498:	bd10      	pop	{r4, pc}
   b649a:	bf00      	nop
   b649c:	2003e6b4 	.word	0x2003e6b4
   b64a0:	000b6247 	.word	0x000b6247
   b64a4:	2003e540 	.word	0x2003e540

000b64a8 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b64a8:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b64aa:	2500      	movs	r5, #0
   b64ac:	4604      	mov	r4, r0
   b64ae:	e9c0 5500 	strd	r5, r5, [r0]
   b64b2:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b64b6:	6085      	str	r5, [r0, #8]
   b64b8:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b64ba:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b64be:	f7fe fb7d 	bl	b4bbc <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b64c2:	f7ff ffbd 	bl	b6440 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b64c6:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b64c8:	f7ff ffd4 	bl	b6474 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b64cc:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b64ce:	6220      	str	r0, [r4, #32]
}
   b64d0:	4620      	mov	r0, r4
   b64d2:	bd38      	pop	{r3, r4, r5, pc}

000b64d4 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b64d4:	b510      	push	{r4, lr}
    static LogManager mgr;
   b64d6:	4c0a      	ldr	r4, [pc, #40]	; (b6500 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b64d8:	7823      	ldrb	r3, [r4, #0]
   b64da:	f3bf 8f5b 	dmb	ish
   b64de:	07db      	lsls	r3, r3, #31
   b64e0:	d40c      	bmi.n	b64fc <_ZN5spark10LogManager8instanceEv+0x28>
   b64e2:	4620      	mov	r0, r4
   b64e4:	f7fd fdfc 	bl	b40e0 <__cxa_guard_acquire>
   b64e8:	b140      	cbz	r0, b64fc <_ZN5spark10LogManager8instanceEv+0x28>
   b64ea:	4806      	ldr	r0, [pc, #24]	; (b6504 <_ZN5spark10LogManager8instanceEv+0x30>)
   b64ec:	f7ff ffdc 	bl	b64a8 <_ZN5spark10LogManagerC1Ev>
   b64f0:	4620      	mov	r0, r4
   b64f2:	f7fd fdfa 	bl	b40ea <__cxa_guard_release>
   b64f6:	4804      	ldr	r0, [pc, #16]	; (b6508 <_ZN5spark10LogManager8instanceEv+0x34>)
   b64f8:	f002 f826 	bl	b8548 <atexit>
    return &mgr;
}
   b64fc:	4801      	ldr	r0, [pc, #4]	; (b6504 <_ZN5spark10LogManager8instanceEv+0x30>)
   b64fe:	bd10      	pop	{r4, pc}
   b6500:	2003e6ac 	.word	0x2003e6ac
   b6504:	2003e6bc 	.word	0x2003e6bc
   b6508:	000b6a29 	.word	0x000b6a29

000b650c <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b650c:	4a02      	ldr	r2, [pc, #8]	; (b6518 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b650e:	4903      	ldr	r1, [pc, #12]	; (b651c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b6510:	4803      	ldr	r0, [pc, #12]	; (b6520 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b6512:	2300      	movs	r3, #0
   b6514:	f7fe bce2 	b.w	b4edc <log_set_callbacks>
   b6518:	000b680d 	.word	0x000b680d
   b651c:	000b6799 	.word	0x000b6799
   b6520:	000b6719 	.word	0x000b6719

000b6524 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b6524:	2300      	movs	r3, #0
   b6526:	461a      	mov	r2, r3
   b6528:	4619      	mov	r1, r3
   b652a:	4618      	mov	r0, r3
   b652c:	f7fe bcd6 	b.w	b4edc <log_set_callbacks>

000b6530 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b6530:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b6532:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b6534:	4604      	mov	r4, r0
   b6536:	4668      	mov	r0, sp
   b6538:	f7ff fe9e 	bl	b6278 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b653c:	466a      	mov	r2, sp
   b653e:	4629      	mov	r1, r5
   b6540:	4620      	mov	r0, r4
   b6542:	f001 fd21 	bl	b7f88 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b6546:	a801      	add	r0, sp, #4
   b6548:	f7ff fa87 	bl	b5a5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b654c:	4620      	mov	r0, r4
   b654e:	b003      	add	sp, #12
   b6550:	bd30      	pop	{r4, r5, pc}

000b6552 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b6552:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b6554:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b6556:	4604      	mov	r4, r0
   b6558:	4668      	mov	r0, sp
   b655a:	f7ff fe8d 	bl	b6278 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b655e:	466a      	mov	r2, sp
   b6560:	4629      	mov	r1, r5
   b6562:	4620      	mov	r0, r4
   b6564:	f001 fcec 	bl	b7f40 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b6568:	a801      	add	r0, sp, #4
   b656a:	f7ff fa76 	bl	b5a5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b656e:	4620      	mov	r0, r4
   b6570:	b003      	add	sp, #12
   b6572:	bd30      	pop	{r4, r5, pc}

000b6574 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b6574:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b6576:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b6578:	4604      	mov	r4, r0
   b657a:	4668      	mov	r0, sp
   b657c:	f7ff fe7c 	bl	b6278 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b6580:	466a      	mov	r2, sp
   b6582:	4629      	mov	r1, r5
   b6584:	4620      	mov	r0, r4
   b6586:	f001 fc84 	bl	b7e92 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b658a:	a801      	add	r0, sp, #4
   b658c:	f7ff fa65 	bl	b5a5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6590:	4620      	mov	r0, r4
   b6592:	b003      	add	sp, #12
   b6594:	bd30      	pop	{r4, r5, pc}
	...

000b6598 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b6598:	b570      	push	{r4, r5, r6, lr}
   b659a:	b08a      	sub	sp, #40	; 0x28
   b659c:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b659e:	4601      	mov	r1, r0
   b65a0:	a804      	add	r0, sp, #16
   b65a2:	f7ff ffc5 	bl	b6530 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b65a6:	4e14      	ldr	r6, [pc, #80]	; (b65f8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b65a8:	a804      	add	r0, sp, #16
   b65aa:	f001 fd05 	bl	b7fb8 <_ZN5spark18JSONObjectIterator4nextEv>
   b65ae:	b1e8      	cbz	r0, b65ec <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b65b0:	a904      	add	r1, sp, #16
   b65b2:	4668      	mov	r0, sp
   b65b4:	f7ff ffcd 	bl	b6552 <_ZNK5spark18JSONObjectIterator4nameEv>
   b65b8:	9802      	ldr	r0, [sp, #8]
   b65ba:	4631      	mov	r1, r6
   b65bc:	f7ff fe3c 	bl	b6238 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b65c0:	4604      	mov	r4, r0
   b65c2:	b110      	cbz	r0, b65ca <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b65c4:	1e2c      	subs	r4, r5, #0
   b65c6:	bf18      	it	ne
   b65c8:	2401      	movne	r4, #1
   b65ca:	a801      	add	r0, sp, #4
   b65cc:	f7ff fa45 	bl	b5a5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b65d0:	2c00      	cmp	r4, #0
   b65d2:	d0e9      	beq.n	b65a8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b65d4:	a904      	add	r1, sp, #16
   b65d6:	4668      	mov	r0, sp
   b65d8:	f7ff ffcc 	bl	b6574 <_ZNK5spark18JSONObjectIterator5valueEv>
   b65dc:	4668      	mov	r0, sp
   b65de:	f001 fc8e 	bl	b7efe <_ZNK5spark9JSONValue5toIntEv>
   b65e2:	6028      	str	r0, [r5, #0]
   b65e4:	a801      	add	r0, sp, #4
   b65e6:	f7ff fa38 	bl	b5a5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b65ea:	e7dd      	b.n	b65a8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b65ec:	a805      	add	r0, sp, #20
   b65ee:	f7ff fa34 	bl	b5a5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b65f2:	b00a      	add	sp, #40	; 0x28
   b65f4:	bd70      	pop	{r4, r5, r6, pc}
   b65f6:	bf00      	nop
   b65f8:	000b8b8c 	.word	0x000b8b8c

000b65fc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b65fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b65fe:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b6600:	4620      	mov	r0, r4
   b6602:	4913      	ldr	r1, [pc, #76]	; (b6650 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b6604:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b6606:	f7fd fd09 	bl	b401c <strcmp>
   b660a:	b950      	cbnz	r0, b6622 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b660c:	f000 ff4c 	bl	b74a8 <_Z16_fetch_usbserialv>
   b6610:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b6614:	f000 ff38 	bl	b7488 <_ZN9USBSerial5beginEl>
}
   b6618:	b003      	add	sp, #12
   b661a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b661e:	f000 bf43 	b.w	b74a8 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b6622:	490c      	ldr	r1, [pc, #48]	; (b6654 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b6624:	4620      	mov	r0, r4
   b6626:	f7fd fcf9 	bl	b401c <strcmp>
   b662a:	b978      	cbnz	r0, b664c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b662c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b6630:	a901      	add	r1, sp, #4
   b6632:	4628      	mov	r0, r5
        int baud = 9600;
   b6634:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b6636:	f7ff ffaf 	bl	b6598 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b663a:	f001 fe07 	bl	b824c <_Z22__fetch_global_Serial1v>
   b663e:	9901      	ldr	r1, [sp, #4]
   b6640:	f000 ffae 	bl	b75a0 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b6644:	f001 fe02 	bl	b824c <_Z22__fetch_global_Serial1v>
}
   b6648:	b003      	add	sp, #12
   b664a:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b664c:	2000      	movs	r0, #0
   b664e:	e7fb      	b.n	b6648 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b6650:	000b8b91 	.word	0x000b8b91
   b6654:	000b8b98 	.word	0x000b8b98

000b6658 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6658:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b665a:	e9d0 5300 	ldrd	r5, r3, [r0]
   b665e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6660:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6662:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b6666:	42ae      	cmp	r6, r5
   b6668:	d005      	beq.n	b6676 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b666a:	f105 0008 	add.w	r0, r5, #8
   b666e:	f7ff fff3 	bl	b6658 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b6672:	3514      	adds	r5, #20
   b6674:	e7f7      	b.n	b6666 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b6676:	6820      	ldr	r0, [r4, #0]
   b6678:	f7fe fcd4 	bl	b5024 <free>
}
   b667c:	4620      	mov	r0, r4
   b667e:	bd70      	pop	{r4, r5, r6, pc}

000b6680 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b6680:	b510      	push	{r4, lr}
   b6682:	4604      	mov	r4, r0
   b6684:	300c      	adds	r0, #12
   b6686:	f7ff ffe7 	bl	b6658 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b668a:	4620      	mov	r0, r4
   b668c:	f7ff f95c 	bl	b5948 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b6690:	4620      	mov	r0, r4
   b6692:	bd10      	pop	{r4, pc}

000b6694 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b6694:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b6696:	4b04      	ldr	r3, [pc, #16]	; (b66a8 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b6698:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b669a:	f840 3b04 	str.w	r3, [r0], #4
   b669e:	f7ff ffef 	bl	b6680 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b66a2:	4620      	mov	r0, r4
   b66a4:	bd10      	pop	{r4, pc}
   b66a6:	bf00      	nop
   b66a8:	000b89e8 	.word	0x000b89e8

000b66ac <_ZN5spark16StreamLogHandlerD0Ev>:
   b66ac:	b510      	push	{r4, lr}
   b66ae:	4604      	mov	r4, r0
   b66b0:	f7ff fff0 	bl	b6694 <_ZN5spark16StreamLogHandlerD1Ev>
   b66b4:	4620      	mov	r0, r4
   b66b6:	2124      	movs	r1, #36	; 0x24
   b66b8:	f7fd fd03 	bl	b40c2 <_ZdlPvj>
   b66bc:	4620      	mov	r0, r4
   b66be:	bd10      	pop	{r4, pc}

000b66c0 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b66c0:	b510      	push	{r4, lr}
   b66c2:	4b03      	ldr	r3, [pc, #12]	; (b66d0 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b66c4:	6003      	str	r3, [r0, #0]
   b66c6:	4604      	mov	r4, r0
   b66c8:	f7ff ffe4 	bl	b6694 <_ZN5spark16StreamLogHandlerD1Ev>
   b66cc:	4620      	mov	r0, r4
   b66ce:	bd10      	pop	{r4, pc}
   b66d0:	000b8c38 	.word	0x000b8c38

000b66d4 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b66d4:	b510      	push	{r4, lr}
   b66d6:	4604      	mov	r4, r0
   b66d8:	f7ff fff2 	bl	b66c0 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b66dc:	4620      	mov	r0, r4
   b66de:	2124      	movs	r1, #36	; 0x24
   b66e0:	f7fd fcef 	bl	b40c2 <_ZdlPvj>
   b66e4:	4620      	mov	r0, r4
   b66e6:	bd10      	pop	{r4, pc}

000b66e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b66e8:	2200      	movs	r2, #0
   b66ea:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b66ee:	b510      	push	{r4, lr}
        capacity_(0) {
   b66f0:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b66f2:	680c      	ldr	r4, [r1, #0]
   b66f4:	6004      	str	r4, [r0, #0]
   b66f6:	684c      	ldr	r4, [r1, #4]
   b66f8:	6044      	str	r4, [r0, #4]
   b66fa:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b66fc:	600a      	str	r2, [r1, #0]
   b66fe:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6700:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6702:	608a      	str	r2, [r1, #8]
}
   b6704:	bd10      	pop	{r4, pc}

000b6706 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b6706:	b510      	push	{r4, lr}
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b6708:	6803      	ldr	r3, [r0, #0]
   b670a:	4604      	mov	r4, r0
   b670c:	6818      	ldr	r0, [r3, #0]
   b670e:	f7fe fa6d 	bl	b4bec <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b6712:	4620      	mov	r0, r4
   b6714:	bd10      	pop	{r4, pc}
	...

000b6718 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b6718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b671c:	b087      	sub	sp, #28
   b671e:	4680      	mov	r8, r0
   b6720:	9303      	str	r3, [sp, #12]
    #endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)

static inline bool hal_interrupt_is_isr() {
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b6722:	4b1c      	ldr	r3, [pc, #112]	; (b6794 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b6724:	685b      	ldr	r3, [r3, #4]
   b6726:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b672a:	4689      	mov	r9, r1
   b672c:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
   b672e:	b96b      	cbnz	r3, b674c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b6730:	f7ff fed0 	bl	b64d4 <_ZN5spark10LogManager8instanceEv>
   b6734:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b6736:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b673a:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b673c:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b673e:	f7ff fd79 	bl	b6234 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b6742:	7b23      	ldrb	r3, [r4, #12]
   b6744:	b12b      	cbz	r3, b6752 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b6746:	a805      	add	r0, sp, #20
   b6748:	f7ff ffdd 	bl	b6706 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b674c:	b007      	add	sp, #28
   b674e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b6752:	2301      	movs	r3, #1
   b6754:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b6756:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b675a:	fa5f f989 	uxtb.w	r9, r9
   b675e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b6762:	45aa      	cmp	sl, r5
   b6764:	d012      	beq.n	b678c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b6766:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b676a:	4631      	mov	r1, r6
   b676c:	1d38      	adds	r0, r7, #4
   b676e:	f7ff fe05 	bl	b637c <_ZNK5spark6detail9LogFilter5levelEPKc>
   b6772:	4581      	cmp	r9, r0
   b6774:	d3f5      	bcc.n	b6762 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b6776:	683b      	ldr	r3, [r7, #0]
   b6778:	9a03      	ldr	r2, [sp, #12]
   b677a:	9200      	str	r2, [sp, #0]
   b677c:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b6780:	464a      	mov	r2, r9
   b6782:	4633      	mov	r3, r6
   b6784:	4641      	mov	r1, r8
   b6786:	4638      	mov	r0, r7
   b6788:	47d8      	blx	fp
   b678a:	e7ea      	b.n	b6762 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b678c:	2300      	movs	r3, #0
   b678e:	7323      	strb	r3, [r4, #12]
   b6790:	e7d9      	b.n	b6746 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b6792:	bf00      	nop
   b6794:	e000ed00 	.word	0xe000ed00

000b6798 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b6798:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b679c:	469b      	mov	fp, r3
   b679e:	4b1a      	ldr	r3, [pc, #104]	; (b6808 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b67a0:	685b      	ldr	r3, [r3, #4]
   b67a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b67a6:	4680      	mov	r8, r0
   b67a8:	4689      	mov	r9, r1
   b67aa:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
   b67ac:	b96b      	cbnz	r3, b67ca <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b67ae:	f7ff fe91 	bl	b64d4 <_ZN5spark10LogManager8instanceEv>
   b67b2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b67b4:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b67b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b67ba:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b67bc:	f7ff fd3a 	bl	b6234 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b67c0:	7b23      	ldrb	r3, [r4, #12]
   b67c2:	b12b      	cbz	r3, b67d0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b67c4:	a801      	add	r0, sp, #4
   b67c6:	f7ff ff9e 	bl	b6706 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b67ca:	b003      	add	sp, #12
   b67cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b67d0:	2301      	movs	r3, #1
   b67d2:	7323      	strb	r3, [r4, #12]
   b67d4:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b67d8:	b2f6      	uxtb	r6, r6
   b67da:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b67de:	4555      	cmp	r5, sl
   b67e0:	d00e      	beq.n	b6800 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b67e2:	f855 7b04 	ldr.w	r7, [r5], #4
   b67e6:	4659      	mov	r1, fp
   b67e8:	1d38      	adds	r0, r7, #4
   b67ea:	f7ff fdc7 	bl	b637c <_ZNK5spark6detail9LogFilter5levelEPKc>
   b67ee:	4286      	cmp	r6, r0
   b67f0:	d3f5      	bcc.n	b67de <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b67f2:	683b      	ldr	r3, [r7, #0]
   b67f4:	464a      	mov	r2, r9
   b67f6:	68db      	ldr	r3, [r3, #12]
   b67f8:	4641      	mov	r1, r8
   b67fa:	4638      	mov	r0, r7
   b67fc:	4798      	blx	r3
   b67fe:	e7ee      	b.n	b67de <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b6800:	2300      	movs	r3, #0
   b6802:	7323      	strb	r3, [r4, #12]
   b6804:	e7de      	b.n	b67c4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b6806:	bf00      	nop
   b6808:	e000ed00 	.word	0xe000ed00

000b680c <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b680c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6810:	4b16      	ldr	r3, [pc, #88]	; (b686c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b6812:	685b      	ldr	r3, [r3, #4]
   b6814:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b6818:	4605      	mov	r5, r0
   b681a:	460f      	mov	r7, r1
    if (hal_interrupt_is_isr()) {
   b681c:	bb1b      	cbnz	r3, b6866 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b681e:	f7ff fe59 	bl	b64d4 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b6822:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b6826:	4604      	mov	r4, r0
   b6828:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b682a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b682c:	f7ff fd02 	bl	b6234 <_ZN14RecursiveMutex4lockEv.isra.0>
   b6830:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b6834:	2446      	movs	r4, #70	; 0x46
   b6836:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b683a:	45b0      	cmp	r8, r6
   b683c:	d109      	bne.n	b6852 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b683e:	a801      	add	r0, sp, #4
   b6840:	f7ff ff61 	bl	b6706 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b6844:	42a5      	cmp	r5, r4
   b6846:	bfb4      	ite	lt
   b6848:	2000      	movlt	r0, #0
   b684a:	2001      	movge	r0, #1
}
   b684c:	b002      	add	sp, #8
   b684e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b6852:	f856 0b04 	ldr.w	r0, [r6], #4
   b6856:	4639      	mov	r1, r7
   b6858:	3004      	adds	r0, #4
   b685a:	f7ff fd8f 	bl	b637c <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b685e:	4284      	cmp	r4, r0
   b6860:	bfa8      	it	ge
   b6862:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b6864:	e7e9      	b.n	b683a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b6866:	2000      	movs	r0, #0
   b6868:	e7f0      	b.n	b684c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b686a:	bf00      	nop
   b686c:	e000ed00 	.word	0xe000ed00

000b6870 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6872:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b6876:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6878:	4604      	mov	r4, r0
   b687a:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b687c:	db0d      	blt.n	b689a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b687e:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b6880:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b6882:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b6884:	dd04      	ble.n	b6890 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b6886:	00b9      	lsls	r1, r7, #2
   b6888:	f7fe fbd4 	bl	b5034 <realloc>
            if (!d) {
   b688c:	b918      	cbnz	r0, b6896 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b688e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b6890:	f7fe fbc8 	bl	b5024 <free>
        T* d = nullptr;
   b6894:	2000      	movs	r0, #0
        data_ = d;
   b6896:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b6898:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b689a:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b689c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b689e:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b68a2:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b68a4:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b68a8:	1d08      	adds	r0, r1, #4
   b68aa:	f001 fe79 	bl	b85a0 <memmove>
    new(p) T(std::move(value));
   b68ae:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b68b2:	6863      	ldr	r3, [r4, #4]
   b68b4:	3301      	adds	r3, #1
   b68b6:	6063      	str	r3, [r4, #4]
    return true;
   b68b8:	2001      	movs	r0, #1
   b68ba:	e7e8      	b.n	b688e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b68bc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b68bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b68be:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b68c2:	4604      	mov	r4, r0
   b68c4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b68c6:	9301      	str	r3, [sp, #4]
   b68c8:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b68ca:	f7ff fcb3 	bl	b6234 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b68ce:	e9d4 3200 	ldrd	r3, r2, [r4]
   b68d2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b68d6:	4293      	cmp	r3, r2
   b68d8:	4619      	mov	r1, r3
   b68da:	d00b      	beq.n	b68f4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b68dc:	6809      	ldr	r1, [r1, #0]
   b68de:	42a9      	cmp	r1, r5
   b68e0:	f103 0304 	add.w	r3, r3, #4
   b68e4:	d1f7      	bne.n	b68d6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b68e6:	a801      	add	r0, sp, #4
   b68e8:	f7ff ff0d 	bl	b6706 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b68ec:	2500      	movs	r5, #0
}
   b68ee:	4628      	mov	r0, r5
   b68f0:	b003      	add	sp, #12
   b68f2:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b68f4:	4629      	mov	r1, r5
   b68f6:	4620      	mov	r0, r4
   b68f8:	f7ff ffba 	bl	b6870 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b68fc:	4605      	mov	r5, r0
   b68fe:	2800      	cmp	r0, #0
   b6900:	d0f1      	beq.n	b68e6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b6902:	6863      	ldr	r3, [r4, #4]
   b6904:	2b01      	cmp	r3, #1
   b6906:	d101      	bne.n	b690c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b6908:	f7ff fe00 	bl	b650c <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b690c:	a801      	add	r0, sp, #4
   b690e:	f7ff fefa 	bl	b6706 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b6912:	e7ec      	b.n	b68ee <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b6914 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b6914:	b570      	push	{r4, r5, r6, lr}
   b6916:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b6918:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b691c:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b691e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b6922:	4282      	cmp	r2, r0
   b6924:	d00f      	beq.n	b6946 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b6926:	4601      	mov	r1, r0
            if (*p == value) {
   b6928:	681d      	ldr	r5, [r3, #0]
   b692a:	f851 6b04 	ldr.w	r6, [r1], #4
   b692e:	42ae      	cmp	r6, r5
   b6930:	d107      	bne.n	b6942 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6932:	1a52      	subs	r2, r2, r1
   b6934:	f001 fe34 	bl	b85a0 <memmove>
    --size_;
   b6938:	6863      	ldr	r3, [r4, #4]
   b693a:	3b01      	subs	r3, #1
   b693c:	6063      	str	r3, [r4, #4]
    return true;
   b693e:	2001      	movs	r0, #1
}
   b6940:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b6942:	4608      	mov	r0, r1
   b6944:	e7ed      	b.n	b6922 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b6946:	2000      	movs	r0, #0
   b6948:	e7fa      	b.n	b6940 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b694a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b694a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b694c:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b6950:	4604      	mov	r4, r0
   b6952:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b6954:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6956:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b6958:	f7ff fc6c 	bl	b6234 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b695c:	a901      	add	r1, sp, #4
   b695e:	4620      	mov	r0, r4
   b6960:	f7ff ffd8 	bl	b6914 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b6964:	b118      	cbz	r0, b696e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b6966:	6863      	ldr	r3, [r4, #4]
   b6968:	b90b      	cbnz	r3, b696e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b696a:	f7ff fddb 	bl	b6524 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b696e:	a803      	add	r0, sp, #12
   b6970:	f7ff fec9 	bl	b6706 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b6974:	b004      	add	sp, #16
   b6976:	bd10      	pop	{r4, pc}

000b6978 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b6978:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b697a:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b697e:	2318      	movs	r3, #24
   b6980:	4604      	mov	r4, r0
   b6982:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b6986:	42ae      	cmp	r6, r5
   b6988:	d015      	beq.n	b69b6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b698a:	f105 0110 	add.w	r1, r5, #16
   b698e:	4620      	mov	r0, r4
   b6990:	f7ff ffc0 	bl	b6914 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b6994:	6863      	ldr	r3, [r4, #4]
   b6996:	b90b      	cbnz	r3, b699c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b6998:	f7ff fdc4 	bl	b6524 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b699c:	69e0      	ldr	r0, [r4, #28]
   b699e:	6929      	ldr	r1, [r5, #16]
   b69a0:	6803      	ldr	r3, [r0, #0]
   b69a2:	68db      	ldr	r3, [r3, #12]
   b69a4:	4798      	blx	r3
        if (h.stream) {
   b69a6:	6969      	ldr	r1, [r5, #20]
   b69a8:	b119      	cbz	r1, b69b2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b69aa:	6a20      	ldr	r0, [r4, #32]
   b69ac:	6803      	ldr	r3, [r0, #0]
   b69ae:	68db      	ldr	r3, [r3, #12]
   b69b0:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b69b2:	3518      	adds	r5, #24
   b69b4:	e7e7      	b.n	b6986 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b69b6:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b69ba:	2618      	movs	r6, #24
   b69bc:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b69c0:	42ae      	cmp	r6, r5
   b69c2:	d004      	beq.n	b69ce <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b69c4:	4628      	mov	r0, r5
   b69c6:	f7fe fcb3 	bl	b5330 <_ZN6StringD1Ev>
   b69ca:	3518      	adds	r5, #24
   b69cc:	e7f8      	b.n	b69c0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b69ce:	2300      	movs	r3, #0
   b69d0:	6163      	str	r3, [r4, #20]
}
   b69d2:	bd70      	pop	{r4, r5, r6, pc}

000b69d4 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b69d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b69d6:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b69d8:	f7ff fda4 	bl	b6524 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b69dc:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b69e0:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b69e2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b69e4:	f7ff fc26 	bl	b6234 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b69e8:	4620      	mov	r0, r4
   b69ea:	f7ff ffc5 	bl	b6978 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b69ee:	a801      	add	r0, sp, #4
   b69f0:	f7ff fe89 	bl	b6706 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b69f4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b69f6:	b108      	cbz	r0, b69fc <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b69f8:	f7fe f8e8 	bl	b4bcc <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b69fc:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b6a00:	2618      	movs	r6, #24
   b6a02:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b6a06:	42ae      	cmp	r6, r5
   b6a08:	d004      	beq.n	b6a14 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b6a0a:	4628      	mov	r0, r5
   b6a0c:	f7fe fc90 	bl	b5330 <_ZN6StringD1Ev>
   b6a10:	3518      	adds	r5, #24
   b6a12:	e7f8      	b.n	b6a06 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b6a14:	6920      	ldr	r0, [r4, #16]
   b6a16:	f7fe fb05 	bl	b5024 <free>
   b6a1a:	6820      	ldr	r0, [r4, #0]
   b6a1c:	f7fe fb02 	bl	b5024 <free>
}
   b6a20:	4620      	mov	r0, r4
   b6a22:	b002      	add	sp, #8
   b6a24:	bd70      	pop	{r4, r5, r6, pc}
	...

000b6a28 <__tcf_2>:
    static LogManager mgr;
   b6a28:	4801      	ldr	r0, [pc, #4]	; (b6a30 <__tcf_2+0x8>)
   b6a2a:	f7ff bfd3 	b.w	b69d4 <_ZN5spark10LogManagerD1Ev>
   b6a2e:	bf00      	nop
   b6a30:	2003e6bc 	.word	0x2003e6bc

000b6a34 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b6a34:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6a36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6a38:	4604      	mov	r4, r0
   b6a3a:	460d      	mov	r5, r1
   b6a3c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6a3e:	d915      	bls.n	b6a6c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b6a40:	4290      	cmp	r0, r2
   b6a42:	d214      	bcs.n	b6a6e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b6a44:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b6a48:	1a75      	subs	r5, r6, r1
   b6a4a:	f1a1 0714 	sub.w	r7, r1, #20
   b6a4e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6a50:	42b7      	cmp	r7, r6
   b6a52:	d01a      	beq.n	b6a8a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b6a54:	b11c      	cbz	r4, b6a5e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b6a56:	4631      	mov	r1, r6
   b6a58:	4620      	mov	r0, r4
   b6a5a:	f7ff fc3f 	bl	b62dc <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b6a5e:	f106 0008 	add.w	r0, r6, #8
   b6a62:	f7ff fdf9 	bl	b6658 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b6a66:	3e14      	subs	r6, #20
   b6a68:	3c14      	subs	r4, #20
   b6a6a:	e7f1      	b.n	b6a50 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b6a6c:	d00d      	beq.n	b6a8a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b6a6e:	42b5      	cmp	r5, r6
   b6a70:	d00b      	beq.n	b6a8a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b6a72:	b11c      	cbz	r4, b6a7c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b6a74:	4629      	mov	r1, r5
   b6a76:	4620      	mov	r0, r4
   b6a78:	f7ff fc30 	bl	b62dc <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b6a7c:	f105 0008 	add.w	r0, r5, #8
   b6a80:	f7ff fdea 	bl	b6658 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b6a84:	3514      	adds	r5, #20
   b6a86:	3414      	adds	r4, #20
   b6a88:	e7f1      	b.n	b6a6e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b6a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6a8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b6a8c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6a8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6a90:	4604      	mov	r4, r0
   b6a92:	460d      	mov	r5, r1
   b6a94:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6a96:	d914      	bls.n	b6ac2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b6a98:	4290      	cmp	r0, r2
   b6a9a:	d213      	bcs.n	b6ac4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b6a9c:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b6aa0:	1a75      	subs	r5, r6, r1
   b6aa2:	f1a1 0710 	sub.w	r7, r1, #16
   b6aa6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6aa8:	42b7      	cmp	r7, r6
   b6aaa:	d018      	beq.n	b6ade <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b6aac:	b11c      	cbz	r4, b6ab6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b6aae:	4631      	mov	r1, r6
   b6ab0:	4620      	mov	r0, r4
   b6ab2:	f7fe fcb9 	bl	b5428 <_ZN6StringC1EOS_>
                end->~T();
   b6ab6:	4630      	mov	r0, r6
   b6ab8:	f7fe fc3a 	bl	b5330 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b6abc:	3e10      	subs	r6, #16
   b6abe:	3c10      	subs	r4, #16
   b6ac0:	e7f2      	b.n	b6aa8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b6ac2:	d00c      	beq.n	b6ade <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b6ac4:	42b5      	cmp	r5, r6
   b6ac6:	d00a      	beq.n	b6ade <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b6ac8:	b11c      	cbz	r4, b6ad2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b6aca:	4629      	mov	r1, r5
   b6acc:	4620      	mov	r0, r4
   b6ace:	f7fe fcab 	bl	b5428 <_ZN6StringC1EOS_>
                p->~T();
   b6ad2:	4628      	mov	r0, r5
   b6ad4:	f7fe fc2c 	bl	b5330 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b6ad8:	3510      	adds	r5, #16
   b6ada:	3410      	adds	r4, #16
   b6adc:	e7f2      	b.n	b6ac4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b6ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6ae0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b6ae0:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b6ae2:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b6ae4:	4605      	mov	r5, r0
        if (n > 0) {
   b6ae6:	dd11      	ble.n	b6b0c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b6ae8:	0130      	lsls	r0, r6, #4
   b6aea:	f7fe fa93 	bl	b5014 <malloc>
            if (!d) {
   b6aee:	4604      	mov	r4, r0
   b6af0:	b158      	cbz	r0, b6b0a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b6af2:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6af6:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b6afa:	f7ff ffc7 	bl	b6a8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b6afe:	6828      	ldr	r0, [r5, #0]
   b6b00:	f7fe fa90 	bl	b5024 <free>
        data_ = d;
   b6b04:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b6b06:	60ae      	str	r6, [r5, #8]
        return true;
   b6b08:	2001      	movs	r0, #1
    }
   b6b0a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b6b0c:	2400      	movs	r4, #0
   b6b0e:	e7f6      	b.n	b6afe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b6b10 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b6b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6b14:	4690      	mov	r8, r2
   b6b16:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b6b18:	2300      	movs	r3, #0
   b6b1a:	9103      	str	r1, [sp, #12]
    return size_;
   b6b1c:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b6b20:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b6b22:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b6b24:	4299      	cmp	r1, r3
        capacity_(0) {
   b6b26:	e9c0 3300 	strd	r3, r3, [r0]
   b6b2a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b6b2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b6b32:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b6b36:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b6b38:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b6b3a:	dc23      	bgt.n	b6b84 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b6b3c:	e9d8 5700 	ldrd	r5, r7, [r8]
   b6b40:	2314      	movs	r3, #20
   b6b42:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b6b46:	42af      	cmp	r7, r5
   b6b48:	d03b      	beq.n	b6bc2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b6b4a:	4629      	mov	r1, r5
   b6b4c:	a80b      	add	r0, sp, #44	; 0x2c
   b6b4e:	f7fe fc6b 	bl	b5428 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b6b52:	a90b      	add	r1, sp, #44	; 0x2c
   b6b54:	a80f      	add	r0, sp, #60	; 0x3c
   b6b56:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b6b58:	f7fe fc66 	bl	b5428 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6b5c:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b6b60:	4299      	cmp	r1, r3
   b6b62:	da1b      	bge.n	b6b9c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b6b64:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b6b66:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b6b68:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b6b6c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b6b70:	4631      	mov	r1, r6
   b6b72:	f106 0010 	add.w	r0, r6, #16
   b6b76:	f7ff ff89 	bl	b6a8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b6b7a:	b9ee      	cbnz	r6, b6bb8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b6b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b6b7e:	3301      	adds	r3, #1
   b6b80:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b6b82:	e011      	b.n	b6ba8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b6b84:	a808      	add	r0, sp, #32
   b6b86:	f7ff ffab 	bl	b6ae0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b6b8a:	2800      	cmp	r0, #0
   b6b8c:	d1d6      	bne.n	b6b3c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b6b8e:	a808      	add	r0, sp, #32
   b6b90:	f7fe feda 	bl	b5948 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b6b94:	4620      	mov	r0, r4
   b6b96:	b015      	add	sp, #84	; 0x54
   b6b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6b9c:	3101      	adds	r1, #1
   b6b9e:	a808      	add	r0, sp, #32
   b6ba0:	f7ff ff9e 	bl	b6ae0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b6ba4:	2800      	cmp	r0, #0
   b6ba6:	d1dd      	bne.n	b6b64 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b6ba8:	a80f      	add	r0, sp, #60	; 0x3c
   b6baa:	f7fe fbc1 	bl	b5330 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b6bae:	a80b      	add	r0, sp, #44	; 0x2c
   b6bb0:	f7fe fbbe 	bl	b5330 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b6bb4:	3514      	adds	r5, #20
   b6bb6:	e7c6      	b.n	b6b46 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b6bb8:	a90f      	add	r1, sp, #60	; 0x3c
   b6bba:	4630      	mov	r0, r6
   b6bbc:	f7fe fc34 	bl	b5428 <_ZN6StringC1EOS_>
   b6bc0:	e7dc      	b.n	b6b7c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b6bc2:	2600      	movs	r6, #0
   b6bc4:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b6bc8:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b6bca:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b6bce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b6bd2:	429e      	cmp	r6, r3
   b6bd4:	da7c      	bge.n	b6cd0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b6bd6:	0133      	lsls	r3, r6, #4
   b6bd8:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b6bda:	9306      	str	r3, [sp, #24]
        if (!category) {
   b6bdc:	b90b      	cbnz	r3, b6be2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b6bde:	3601      	adds	r6, #1
   b6be0:	e7f5      	b.n	b6bce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b6be2:	2300      	movs	r3, #0
   b6be4:	9307      	str	r3, [sp, #28]
   b6be6:	fb09 f306 	mul.w	r3, r9, r6
   b6bea:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b6bec:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b6bee:	a907      	add	r1, sp, #28
   b6bf0:	a806      	add	r0, sp, #24
   b6bf2:	f7ff faf8 	bl	b61e6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b6bf6:	4682      	mov	sl, r0
   b6bf8:	2800      	cmp	r0, #0
   b6bfa:	d0f0      	beq.n	b6bde <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b6bfc:	f04f 0300 	mov.w	r3, #0
   b6c00:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b6c04:	4601      	mov	r1, r0
   b6c06:	9a07      	ldr	r2, [sp, #28]
   b6c08:	f10d 0317 	add.w	r3, sp, #23
   b6c0c:	4628      	mov	r0, r5
   b6c0e:	f7ff fb79 	bl	b6304 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b6c12:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b6c16:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b6c18:	2f00      	cmp	r7, #0
   b6c1a:	d14a      	bne.n	b6cb2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b6c1c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b6c20:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b6c24:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b6c28:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6c2c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b6c30:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b6c34:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6c36:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b6c3a:	4293      	cmp	r3, r2
   b6c3c:	db17      	blt.n	b6c6e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b6c3e:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b6c42:	f1ba 0f00 	cmp.w	sl, #0
   b6c46:	dd30      	ble.n	b6caa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b6c48:	fb09 f00a 	mul.w	r0, r9, sl
   b6c4c:	f7fe f9e2 	bl	b5014 <malloc>
            if (!d) {
   b6c50:	4683      	mov	fp, r0
   b6c52:	b360      	cbz	r0, b6cae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b6c54:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6c58:	fb09 1202 	mla	r2, r9, r2, r1
   b6c5c:	f7ff feea 	bl	b6a34 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b6c60:	6828      	ldr	r0, [r5, #0]
   b6c62:	f7fe f9df 	bl	b5024 <free>
        data_ = d;
   b6c66:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b6c6a:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b6c6e:	682b      	ldr	r3, [r5, #0]
   b6c70:	9a01      	ldr	r2, [sp, #4]
   b6c72:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b6c76:	686a      	ldr	r2, [r5, #4]
   b6c78:	4651      	mov	r1, sl
   b6c7a:	fb09 3202 	mla	r2, r9, r2, r3
   b6c7e:	f10a 0014 	add.w	r0, sl, #20
   b6c82:	f7ff fed7 	bl	b6a34 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b6c86:	f1ba 0f00 	cmp.w	sl, #0
   b6c8a:	d003      	beq.n	b6c94 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b6c8c:	a90f      	add	r1, sp, #60	; 0x3c
   b6c8e:	4650      	mov	r0, sl
   b6c90:	f7ff fb24 	bl	b62dc <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b6c94:	686b      	ldr	r3, [r5, #4]
   b6c96:	3301      	adds	r3, #1
   b6c98:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b6c9a:	a811      	add	r0, sp, #68	; 0x44
   b6c9c:	f7ff fcdc 	bl	b6658 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b6ca0:	b13f      	cbz	r7, b6cb2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b6ca2:	a80b      	add	r0, sp, #44	; 0x2c
   b6ca4:	f7ff fcd8 	bl	b6658 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b6ca8:	e771      	b.n	b6b8e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b6caa:	46bb      	mov	fp, r7
   b6cac:	e7d8      	b.n	b6c60 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b6cae:	2701      	movs	r7, #1
   b6cb0:	e7f3      	b.n	b6c9a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b6cb2:	9b01      	ldr	r3, [sp, #4]
   b6cb4:	682d      	ldr	r5, [r5, #0]
   b6cb6:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b6cba:	9b06      	ldr	r3, [sp, #24]
   b6cbc:	781b      	ldrb	r3, [r3, #0]
   b6cbe:	b92b      	cbnz	r3, b6ccc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b6cc0:	f8d8 3000 	ldr.w	r3, [r8]
   b6cc4:	9a02      	ldr	r2, [sp, #8]
   b6cc6:	4413      	add	r3, r2
   b6cc8:	7c1b      	ldrb	r3, [r3, #16]
   b6cca:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b6ccc:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b6cce:	e78e      	b.n	b6bee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6cd0:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b6cd2:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6cd4:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6cd6:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6cd8:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6cda:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b6cdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b6cde:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6ce0:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b6ce2:	60a2      	str	r2, [r4, #8]
   b6ce4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b6ce6:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6ce8:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b6cea:	60e2      	str	r2, [r4, #12]
   b6cec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b6cee:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6cf0:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6cf2:	6122      	str	r2, [r4, #16]
   b6cf4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b6cf6:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b6cf8:	9b03      	ldr	r3, [sp, #12]
   b6cfa:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b6cfc:	6162      	str	r2, [r4, #20]
   b6cfe:	7623      	strb	r3, [r4, #24]
   b6d00:	e7cf      	b.n	b6ca2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b6d04 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b6d04:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6d06:	4604      	mov	r4, r0
   b6d08:	b087      	sub	sp, #28
   b6d0a:	460d      	mov	r5, r1
        filter_(level, filters) {
   b6d0c:	4626      	mov	r6, r4
        stream_(&stream) {
   b6d0e:	4619      	mov	r1, r3
   b6d10:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b6d12:	4617      	mov	r7, r2
        stream_(&stream) {
   b6d14:	f7fd fb5b 	bl	b43ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b6d18:	4b0b      	ldr	r3, [pc, #44]	; (b6d48 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b6d1a:	f846 3b04 	str.w	r3, [r6], #4
   b6d1e:	4669      	mov	r1, sp
   b6d20:	a803      	add	r0, sp, #12
   b6d22:	f7fd fb54 	bl	b43ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b6d26:	aa03      	add	r2, sp, #12
   b6d28:	4639      	mov	r1, r7
   b6d2a:	4630      	mov	r0, r6
   b6d2c:	f7ff fef0 	bl	b6b10 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6d30:	a803      	add	r0, sp, #12
   b6d32:	f7fd fb0b 	bl	b434c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b6d36:	4668      	mov	r0, sp
   b6d38:	f7fd fb08 	bl	b434c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6d3c:	4b03      	ldr	r3, [pc, #12]	; (b6d4c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b6d3e:	6023      	str	r3, [r4, #0]
}
   b6d40:	4620      	mov	r0, r4
        stream_(&stream) {
   b6d42:	6225      	str	r5, [r4, #32]
}
   b6d44:	b007      	add	sp, #28
   b6d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6d48:	000b89e8 	.word	0x000b89e8
   b6d4c:	000b8c20 	.word	0x000b8c20

000b6d50 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b6d50:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6d52:	460f      	mov	r7, r1
   b6d54:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b6d56:	491d      	ldr	r1, [pc, #116]	; (b6dcc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b6d58:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b6d5a:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b6d5c:	4616      	mov	r6, r2
   b6d5e:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b6d60:	f7fd f95c 	bl	b401c <strcmp>
   b6d64:	b9c0      	cbnz	r0, b6d98 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b6d66:	b1a4      	cbz	r4, b6d92 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b6d68:	4629      	mov	r1, r5
   b6d6a:	a801      	add	r0, sp, #4
   b6d6c:	f7ff fcbc 	bl	b66e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b6d70:	4917      	ldr	r1, [pc, #92]	; (b6dd0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b6d72:	2024      	movs	r0, #36	; 0x24
   b6d74:	f001 face 	bl	b8314 <_ZnwjRKSt9nothrow_t>
   b6d78:	4605      	mov	r5, r0
   b6d7a:	b130      	cbz	r0, b6d8a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b6d7c:	ab01      	add	r3, sp, #4
   b6d7e:	4632      	mov	r2, r6
   b6d80:	4621      	mov	r1, r4
   b6d82:	f7ff ffbf 	bl	b6d04 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6d86:	4b13      	ldr	r3, [pc, #76]	; (b6dd4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b6d88:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b6d8a:	a801      	add	r0, sp, #4
   b6d8c:	f7fd fade 	bl	b434c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6d90:	462c      	mov	r4, r5
}
   b6d92:	4620      	mov	r0, r4
   b6d94:	b005      	add	sp, #20
   b6d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b6d98:	490f      	ldr	r1, [pc, #60]	; (b6dd8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b6d9a:	4638      	mov	r0, r7
   b6d9c:	f7fd f93e 	bl	b401c <strcmp>
   b6da0:	b990      	cbnz	r0, b6dc8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b6da2:	2c00      	cmp	r4, #0
   b6da4:	d0f5      	beq.n	b6d92 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b6da6:	4629      	mov	r1, r5
   b6da8:	a801      	add	r0, sp, #4
   b6daa:	f7ff fc9d 	bl	b66e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b6dae:	4908      	ldr	r1, [pc, #32]	; (b6dd0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b6db0:	2024      	movs	r0, #36	; 0x24
   b6db2:	f001 faaf 	bl	b8314 <_ZnwjRKSt9nothrow_t>
   b6db6:	4605      	mov	r5, r0
   b6db8:	2800      	cmp	r0, #0
   b6dba:	d0e6      	beq.n	b6d8a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b6dbc:	ab01      	add	r3, sp, #4
   b6dbe:	4632      	mov	r2, r6
   b6dc0:	4621      	mov	r1, r4
   b6dc2:	f7ff ff9f 	bl	b6d04 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6dc6:	e7e0      	b.n	b6d8a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b6dc8:	2400      	movs	r4, #0
   b6dca:	e7e2      	b.n	b6d92 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b6dcc:	000b8ba0 	.word	0x000b8ba0
   b6dd0:	000b8e31 	.word	0x000b8e31
   b6dd4:	000b8c38 	.word	0x000b8c38
   b6dd8:	000b8ba4 	.word	0x000b8ba4

000b6ddc <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b6ddc:	4b01      	ldr	r3, [pc, #4]	; (b6de4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6dde:	4a02      	ldr	r2, [pc, #8]	; (b6de8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6de0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b6de2:	4770      	bx	lr
   b6de4:	2003e6b8 	.word	0x2003e6b8
   b6de8:	000b8bb5 	.word	0x000b8bb5

000b6dec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6df0:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b6df2:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6df6:	4604      	mov	r4, r0
   b6df8:	460e      	mov	r6, r1
   b6dfa:	4617      	mov	r7, r2
   b6dfc:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b6dfe:	f000 fb53 	bl	b74a8 <_Z16_fetch_usbserialv>
   b6e02:	4581      	cmp	r9, r0
   b6e04:	d04c      	beq.n	b6ea0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b6e06:	792b      	ldrb	r3, [r5, #4]
   b6e08:	0719      	lsls	r1, r3, #28
   b6e0a:	d504      	bpl.n	b6e16 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b6e0c:	696a      	ldr	r2, [r5, #20]
   b6e0e:	4954      	ldr	r1, [pc, #336]	; (b6f60 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b6e10:	4620      	mov	r0, r4
   b6e12:	f7ff fadc 	bl	b63ce <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b6e16:	f1b8 0f00 	cmp.w	r8, #0
   b6e1a:	d00d      	beq.n	b6e38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b6e1c:	215b      	movs	r1, #91	; 0x5b
   b6e1e:	4620      	mov	r0, r4
   b6e20:	f7ff fa50 	bl	b62c4 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b6e24:	4641      	mov	r1, r8
   b6e26:	4620      	mov	r0, r4
   b6e28:	f7ff fa3d 	bl	b62a6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b6e2c:	6823      	ldr	r3, [r4, #0]
   b6e2e:	494d      	ldr	r1, [pc, #308]	; (b6f64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b6e30:	68db      	ldr	r3, [r3, #12]
   b6e32:	2202      	movs	r2, #2
   b6e34:	4620      	mov	r0, r4
   b6e36:	4798      	blx	r3
    if (attr.has_file) {
   b6e38:	792b      	ldrb	r3, [r5, #4]
   b6e3a:	07da      	lsls	r2, r3, #31
   b6e3c:	d523      	bpl.n	b6e86 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b6e3e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b6e42:	212f      	movs	r1, #47	; 0x2f
   b6e44:	4640      	mov	r0, r8
   b6e46:	f001 fc3a 	bl	b86be <strrchr>
    if (s1) {
   b6e4a:	b108      	cbz	r0, b6e50 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b6e4c:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b6e50:	4641      	mov	r1, r8
   b6e52:	4620      	mov	r0, r4
   b6e54:	f7ff fa27 	bl	b62a6 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b6e58:	792b      	ldrb	r3, [r5, #4]
   b6e5a:	079b      	lsls	r3, r3, #30
   b6e5c:	d508      	bpl.n	b6e70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b6e5e:	213a      	movs	r1, #58	; 0x3a
   b6e60:	4620      	mov	r0, r4
   b6e62:	f7ff fa2f 	bl	b62c4 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b6e66:	68ea      	ldr	r2, [r5, #12]
   b6e68:	493f      	ldr	r1, [pc, #252]	; (b6f68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b6e6a:	4620      	mov	r0, r4
   b6e6c:	f7ff faaf 	bl	b63ce <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b6e70:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b6e72:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b6e74:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b6e78:	68db      	ldr	r3, [r3, #12]
   b6e7a:	bf14      	ite	ne
   b6e7c:	493b      	ldrne	r1, [pc, #236]	; (b6f6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b6e7e:	493c      	ldreq	r1, [pc, #240]	; (b6f70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b6e80:	2202      	movs	r2, #2
            write(": ", 2);
   b6e82:	4620      	mov	r0, r4
   b6e84:	4798      	blx	r3
    if (attr.has_function) {
   b6e86:	792b      	ldrb	r3, [r5, #4]
   b6e88:	0758      	lsls	r0, r3, #29
   b6e8a:	d51d      	bpl.n	b6ec8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b6e8c:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b6e8e:	460b      	mov	r3, r1
   b6e90:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b6e92:	f813 0b01 	ldrb.w	r0, [r3], #1
   b6e96:	b160      	cbz	r0, b6eb2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b6e98:	2820      	cmp	r0, #32
   b6e9a:	d108      	bne.n	b6eae <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b6e9c:	4619      	mov	r1, r3
   b6e9e:	e7f7      	b.n	b6e90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b6ea0:	4834      	ldr	r0, [pc, #208]	; (b6f74 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b6ea2:	f000 ff0e 	bl	b7cc2 <_ZN5spark12NetworkClass9listeningEv>
   b6ea6:	2800      	cmp	r0, #0
   b6ea8:	d0ad      	beq.n	b6e06 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b6eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b6eae:	2828      	cmp	r0, #40	; 0x28
   b6eb0:	d1ee      	bne.n	b6e90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b6eb2:	6823      	ldr	r3, [r4, #0]
   b6eb4:	1a52      	subs	r2, r2, r1
   b6eb6:	68db      	ldr	r3, [r3, #12]
   b6eb8:	4620      	mov	r0, r4
   b6eba:	4798      	blx	r3
        write("(): ", 4);
   b6ebc:	6823      	ldr	r3, [r4, #0]
   b6ebe:	492e      	ldr	r1, [pc, #184]	; (b6f78 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b6ec0:	68db      	ldr	r3, [r3, #12]
   b6ec2:	2204      	movs	r2, #4
   b6ec4:	4620      	mov	r0, r4
   b6ec6:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b6ec8:	2100      	movs	r1, #0
   b6eca:	4638      	mov	r0, r7
   b6ecc:	f7fd fffe 	bl	b4ecc <log_level_name>
   b6ed0:	4601      	mov	r1, r0
    write(s);
   b6ed2:	4620      	mov	r0, r4
   b6ed4:	f7ff f9e7 	bl	b62a6 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b6ed8:	6823      	ldr	r3, [r4, #0]
   b6eda:	4925      	ldr	r1, [pc, #148]	; (b6f70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b6edc:	68db      	ldr	r3, [r3, #12]
   b6ede:	2202      	movs	r2, #2
   b6ee0:	4620      	mov	r0, r4
   b6ee2:	4798      	blx	r3
    if (msg) {
   b6ee4:	b11e      	cbz	r6, b6eee <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b6ee6:	4631      	mov	r1, r6
   b6ee8:	4620      	mov	r0, r4
   b6eea:	f7ff f9dc 	bl	b62a6 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b6eee:	792b      	ldrb	r3, [r5, #4]
   b6ef0:	f013 0f30 	tst.w	r3, #48	; 0x30
   b6ef4:	d02c      	beq.n	b6f50 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b6ef6:	6823      	ldr	r3, [r4, #0]
   b6ef8:	4920      	ldr	r1, [pc, #128]	; (b6f7c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b6efa:	68db      	ldr	r3, [r3, #12]
   b6efc:	2202      	movs	r2, #2
   b6efe:	4620      	mov	r0, r4
   b6f00:	4798      	blx	r3
        if (attr.has_code) {
   b6f02:	792b      	ldrb	r3, [r5, #4]
   b6f04:	06d9      	lsls	r1, r3, #27
   b6f06:	d50a      	bpl.n	b6f1e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b6f08:	6823      	ldr	r3, [r4, #0]
   b6f0a:	491d      	ldr	r1, [pc, #116]	; (b6f80 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b6f0c:	68db      	ldr	r3, [r3, #12]
   b6f0e:	2207      	movs	r2, #7
   b6f10:	4620      	mov	r0, r4
   b6f12:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b6f14:	69aa      	ldr	r2, [r5, #24]
   b6f16:	491b      	ldr	r1, [pc, #108]	; (b6f84 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b6f18:	4620      	mov	r0, r4
   b6f1a:	f7ff fa58 	bl	b63ce <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b6f1e:	792b      	ldrb	r3, [r5, #4]
   b6f20:	069a      	lsls	r2, r3, #26
   b6f22:	d511      	bpl.n	b6f48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b6f24:	06db      	lsls	r3, r3, #27
   b6f26:	d505      	bpl.n	b6f34 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b6f28:	6823      	ldr	r3, [r4, #0]
   b6f2a:	4910      	ldr	r1, [pc, #64]	; (b6f6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b6f2c:	68db      	ldr	r3, [r3, #12]
   b6f2e:	2202      	movs	r2, #2
   b6f30:	4620      	mov	r0, r4
   b6f32:	4798      	blx	r3
            write("details = ", 10);
   b6f34:	6823      	ldr	r3, [r4, #0]
   b6f36:	4914      	ldr	r1, [pc, #80]	; (b6f88 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b6f38:	68db      	ldr	r3, [r3, #12]
   b6f3a:	4620      	mov	r0, r4
   b6f3c:	220a      	movs	r2, #10
   b6f3e:	4798      	blx	r3
            write(attr.details);
   b6f40:	69e9      	ldr	r1, [r5, #28]
   b6f42:	4620      	mov	r0, r4
   b6f44:	f7ff f9af 	bl	b62a6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b6f48:	215d      	movs	r1, #93	; 0x5d
   b6f4a:	4620      	mov	r0, r4
   b6f4c:	f7ff f9ba 	bl	b62c4 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b6f50:	6823      	ldr	r3, [r4, #0]
   b6f52:	490e      	ldr	r1, [pc, #56]	; (b6f8c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b6f54:	68db      	ldr	r3, [r3, #12]
   b6f56:	4620      	mov	r0, r4
   b6f58:	2202      	movs	r2, #2
}
   b6f5a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b6f5e:	4718      	bx	r3
   b6f60:	000b8bb9 	.word	0x000b8bb9
   b6f64:	000b8bc0 	.word	0x000b8bc0
   b6f68:	000b8d44 	.word	0x000b8d44
   b6f6c:	000b8bc3 	.word	0x000b8bc3
   b6f70:	000b8bc8 	.word	0x000b8bc8
   b6f74:	2003e720 	.word	0x2003e720
   b6f78:	000b8bc6 	.word	0x000b8bc6
   b6f7c:	000b8bcb 	.word	0x000b8bcb
   b6f80:	000b8bce 	.word	0x000b8bce
   b6f84:	000b8bd6 	.word	0x000b8bd6
   b6f88:	000b8bd9 	.word	0x000b8bd9
   b6f8c:	000b8be4 	.word	0x000b8be4

000b6f90 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b6f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6f94:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
   b6f96:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b6f98:	460d      	mov	r5, r1
   b6f9a:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
   b6f9c:	f000 fa84 	bl	b74a8 <_Z16_fetch_usbserialv>
   b6fa0:	4287      	cmp	r7, r0
   b6fa2:	d007      	beq.n	b6fb4 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
   b6fa4:	6a20      	ldr	r0, [r4, #32]
   b6fa6:	6803      	ldr	r3, [r0, #0]
   b6fa8:	4632      	mov	r2, r6
   b6faa:	4629      	mov	r1, r5
   b6fac:	68db      	ldr	r3, [r3, #12]
}
   b6fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
   b6fb2:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
   b6fb4:	4803      	ldr	r0, [pc, #12]	; (b6fc4 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
   b6fb6:	f000 fe84 	bl	b7cc2 <_ZN5spark12NetworkClass9listeningEv>
   b6fba:	2800      	cmp	r0, #0
   b6fbc:	d0f2      	beq.n	b6fa4 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
   b6fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6fc2:	bf00      	nop
   b6fc4:	2003e720 	.word	0x2003e720

000b6fc8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6fc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6fcc:	b085      	sub	sp, #20
    return stream_;
   b6fce:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b6fd2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b6fd4:	4605      	mov	r5, r0
   b6fd6:	460f      	mov	r7, r1
   b6fd8:	4690      	mov	r8, r2
   b6fda:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b6fdc:	f000 fa64 	bl	b74a8 <_Z16_fetch_usbserialv>
   b6fe0:	4581      	cmp	r9, r0
   b6fe2:	d105      	bne.n	b6ff0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b6fe4:	4849      	ldr	r0, [pc, #292]	; (b710c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b6fe6:	f000 fe6c 	bl	b7cc2 <_ZN5spark12NetworkClass9listeningEv>
   b6fea:	2800      	cmp	r0, #0
   b6fec:	f040 808a 	bne.w	b7104 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b6ff0:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b6ff2:	4a47      	ldr	r2, [pc, #284]	; (b7110 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b6ff4:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b6ff6:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b6ffa:	a801      	add	r0, sp, #4
        strm_(stream) {
   b6ffc:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b6ffe:	f88d 9008 	strb.w	r9, [sp, #8]
   b7002:	f001 f802 	bl	b800a <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b7006:	4649      	mov	r1, r9
   b7008:	4640      	mov	r0, r8
   b700a:	f7fd ff5f 	bl	b4ecc <log_level_name>
    json.name("l", 1).value(s);
   b700e:	4941      	ldr	r1, [pc, #260]	; (b7114 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b7010:	4680      	mov	r8, r0
   b7012:	2201      	movs	r2, #1
   b7014:	a801      	add	r0, sp, #4
   b7016:	f001 f887 	bl	b8128 <_ZN5spark10JSONWriter4nameEPKcj>
   b701a:	4641      	mov	r1, r8
   b701c:	f7ff f935 	bl	b628a <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b7020:	b13f      	cbz	r7, b7032 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b7022:	493d      	ldr	r1, [pc, #244]	; (b7118 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b7024:	2201      	movs	r2, #1
   b7026:	a801      	add	r0, sp, #4
   b7028:	f001 f87e 	bl	b8128 <_ZN5spark10JSONWriter4nameEPKcj>
   b702c:	4639      	mov	r1, r7
   b702e:	f7ff f92c 	bl	b628a <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b7032:	b13e      	cbz	r6, b7044 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b7034:	4939      	ldr	r1, [pc, #228]	; (b711c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b7036:	2201      	movs	r2, #1
   b7038:	a801      	add	r0, sp, #4
   b703a:	f001 f875 	bl	b8128 <_ZN5spark10JSONWriter4nameEPKcj>
   b703e:	4631      	mov	r1, r6
   b7040:	f7ff f923 	bl	b628a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b7044:	7923      	ldrb	r3, [r4, #4]
   b7046:	07df      	lsls	r7, r3, #31
   b7048:	d50e      	bpl.n	b7068 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b704a:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b704c:	212f      	movs	r1, #47	; 0x2f
   b704e:	4630      	mov	r0, r6
   b7050:	f001 fb35 	bl	b86be <strrchr>
    if (s1) {
   b7054:	b100      	cbz	r0, b7058 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b7056:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b7058:	4931      	ldr	r1, [pc, #196]	; (b7120 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b705a:	2201      	movs	r2, #1
   b705c:	a801      	add	r0, sp, #4
   b705e:	f001 f863 	bl	b8128 <_ZN5spark10JSONWriter4nameEPKcj>
   b7062:	4631      	mov	r1, r6
   b7064:	f7ff f911 	bl	b628a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b7068:	7923      	ldrb	r3, [r4, #4]
   b706a:	079e      	lsls	r6, r3, #30
   b706c:	d507      	bpl.n	b707e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b706e:	492d      	ldr	r1, [pc, #180]	; (b7124 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b7070:	2202      	movs	r2, #2
   b7072:	a801      	add	r0, sp, #4
   b7074:	f001 f858 	bl	b8128 <_ZN5spark10JSONWriter4nameEPKcj>
   b7078:	68e1      	ldr	r1, [r4, #12]
   b707a:	f000 ffd3 	bl	b8024 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b707e:	7923      	ldrb	r3, [r4, #4]
   b7080:	0758      	lsls	r0, r3, #29
   b7082:	d514      	bpl.n	b70ae <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b7084:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b7086:	4633      	mov	r3, r6
   b7088:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b708a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b708e:	b12a      	cbz	r2, b709c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b7090:	2a20      	cmp	r2, #32
   b7092:	d101      	bne.n	b7098 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b7094:	461e      	mov	r6, r3
   b7096:	e7f7      	b.n	b7088 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b7098:	2a28      	cmp	r2, #40	; 0x28
   b709a:	d1f5      	bne.n	b7088 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b709c:	4922      	ldr	r1, [pc, #136]	; (b7128 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b709e:	2202      	movs	r2, #2
   b70a0:	a801      	add	r0, sp, #4
   b70a2:	f001 f841 	bl	b8128 <_ZN5spark10JSONWriter4nameEPKcj>
   b70a6:	1bba      	subs	r2, r7, r6
   b70a8:	4631      	mov	r1, r6
   b70aa:	f001 f84d 	bl	b8148 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b70ae:	7923      	ldrb	r3, [r4, #4]
   b70b0:	0719      	lsls	r1, r3, #28
   b70b2:	d507      	bpl.n	b70c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b70b4:	491d      	ldr	r1, [pc, #116]	; (b712c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b70b6:	2201      	movs	r2, #1
   b70b8:	a801      	add	r0, sp, #4
   b70ba:	f001 f835 	bl	b8128 <_ZN5spark10JSONWriter4nameEPKcj>
   b70be:	6961      	ldr	r1, [r4, #20]
   b70c0:	f000 ffc2 	bl	b8048 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b70c4:	7923      	ldrb	r3, [r4, #4]
   b70c6:	06da      	lsls	r2, r3, #27
   b70c8:	d508      	bpl.n	b70dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b70ca:	2204      	movs	r2, #4
   b70cc:	4918      	ldr	r1, [pc, #96]	; (b7130 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b70ce:	eb0d 0002 	add.w	r0, sp, r2
   b70d2:	f001 f829 	bl	b8128 <_ZN5spark10JSONWriter4nameEPKcj>
   b70d6:	69a1      	ldr	r1, [r4, #24]
   b70d8:	f000 ffa4 	bl	b8024 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b70dc:	7923      	ldrb	r3, [r4, #4]
   b70de:	069b      	lsls	r3, r3, #26
   b70e0:	d507      	bpl.n	b70f2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b70e2:	4914      	ldr	r1, [pc, #80]	; (b7134 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b70e4:	2206      	movs	r2, #6
   b70e6:	a801      	add	r0, sp, #4
   b70e8:	f001 f81e 	bl	b8128 <_ZN5spark10JSONWriter4nameEPKcj>
   b70ec:	69e1      	ldr	r1, [r4, #28]
   b70ee:	f7ff f8cc 	bl	b628a <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b70f2:	a801      	add	r0, sp, #4
   b70f4:	f000 ff73 	bl	b7fde <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b70f8:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b70fa:	490f      	ldr	r1, [pc, #60]	; (b7138 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b70fc:	6803      	ldr	r3, [r0, #0]
   b70fe:	2202      	movs	r2, #2
   b7100:	68db      	ldr	r3, [r3, #12]
   b7102:	4798      	blx	r3
}
   b7104:	b005      	add	sp, #20
   b7106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b710a:	bf00      	nop
   b710c:	2003e720 	.word	0x2003e720
   b7110:	000b8c08 	.word	0x000b8c08
   b7114:	000b8b96 	.word	0x000b8b96
   b7118:	000b89a4 	.word	0x000b89a4
   b711c:	000b8fb7 	.word	0x000b8fb7
   b7120:	000b8be7 	.word	0x000b8be7
   b7124:	000b8be9 	.word	0x000b8be9
   b7128:	000b8bec 	.word	0x000b8bec
   b712c:	000b8bef 	.word	0x000b8bef
   b7130:	000b8bf1 	.word	0x000b8bf1
   b7134:	000b8bf6 	.word	0x000b8bf6
   b7138:	000b8be4 	.word	0x000b8be4

000b713c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b713c:	4b02      	ldr	r3, [pc, #8]	; (b7148 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b713e:	681a      	ldr	r2, [r3, #0]
   b7140:	4b02      	ldr	r3, [pc, #8]	; (b714c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7142:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7144:	4770      	bx	lr
   b7146:	bf00      	nop
   b7148:	2003e544 	.word	0x2003e544
   b714c:	2003e6e4 	.word	0x2003e6e4

000b7150 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b7150:	2100      	movs	r1, #0
   b7152:	f7fd bed3 	b.w	b4efc <system_delay_ms>
	...

000b7158 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b7158:	b510      	push	{r4, lr}
   b715a:	4b04      	ldr	r3, [pc, #16]	; (b716c <_ZN9TCPClientD1Ev+0x14>)
   b715c:	6003      	str	r3, [r0, #0]
   b715e:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b7160:	6980      	ldr	r0, [r0, #24]
   b7162:	b108      	cbz	r0, b7168 <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b7164:	f7fe fa0a 	bl	b557c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b7168:	4620      	mov	r0, r4
   b716a:	bd10      	pop	{r4, pc}
   b716c:	000b8d6c 	.word	0x000b8d6c

000b7170 <_ZN9TCPClientD0Ev>:
   b7170:	b510      	push	{r4, lr}
   b7172:	4604      	mov	r4, r0
   b7174:	f7ff fff0 	bl	b7158 <_ZN9TCPClientD1Ev>
   b7178:	4620      	mov	r0, r4
   b717a:	211c      	movs	r1, #28
   b717c:	f7fc ffa1 	bl	b40c2 <_ZdlPvj>
   b7180:	4620      	mov	r0, r4
   b7182:	bd10      	pop	{r4, pc}

000b7184 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b7184:	4b01      	ldr	r3, [pc, #4]	; (b718c <_GLOBAL__sub_I_RGB+0x8>)
   b7186:	2200      	movs	r2, #0
   b7188:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b718a:	4770      	bx	lr
   b718c:	2003e6e8 	.word	0x2003e6e8

000b7190 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7190:	4b01      	ldr	r3, [pc, #4]	; (b7198 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b7192:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7194:	4770      	bx	lr
   b7196:	bf00      	nop
   b7198:	2003e548 	.word	0x2003e548

000b719c <serialEventRun>:
{
   b719c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b719e:	4b0b      	ldr	r3, [pc, #44]	; (b71cc <serialEventRun+0x30>)
   b71a0:	b143      	cbz	r3, b71b4 <serialEventRun+0x18>
   b71a2:	f000 f981 	bl	b74a8 <_Z16_fetch_usbserialv>
   b71a6:	6803      	ldr	r3, [r0, #0]
   b71a8:	691b      	ldr	r3, [r3, #16]
   b71aa:	4798      	blx	r3
   b71ac:	2800      	cmp	r0, #0
   b71ae:	dd01      	ble.n	b71b4 <serialEventRun+0x18>
        serialEvent();
   b71b0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b71b4:	4b06      	ldr	r3, [pc, #24]	; (b71d0 <serialEventRun+0x34>)
   b71b6:	b143      	cbz	r3, b71ca <serialEventRun+0x2e>
   b71b8:	f001 f848 	bl	b824c <_Z22__fetch_global_Serial1v>
   b71bc:	6803      	ldr	r3, [r0, #0]
   b71be:	691b      	ldr	r3, [r3, #16]
   b71c0:	4798      	blx	r3
   b71c2:	2800      	cmp	r0, #0
   b71c4:	dd01      	ble.n	b71ca <serialEventRun+0x2e>
        serialEvent1();
   b71c6:	f3af 8000 	nop.w
}
   b71ca:	bd08      	pop	{r3, pc}
	...

000b71d4 <_post_loop>:
{
   b71d4:	b508      	push	{r3, lr}
	serialEventRun();
   b71d6:	f7ff ffe1 	bl	b719c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b71da:	f7fd fc8b 	bl	b4af4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b71de:	4b01      	ldr	r3, [pc, #4]	; (b71e4 <_post_loop+0x10>)
   b71e0:	6018      	str	r0, [r3, #0]
}
   b71e2:	bd08      	pop	{r3, pc}
   b71e4:	2003e740 	.word	0x2003e740

000b71e8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b71e8:	4805      	ldr	r0, [pc, #20]	; (b7200 <_Z33system_initialize_user_backup_ramv+0x18>)
   b71ea:	4a06      	ldr	r2, [pc, #24]	; (b7204 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b71ec:	4906      	ldr	r1, [pc, #24]	; (b7208 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b71ee:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b71f0:	1a12      	subs	r2, r2, r0
   b71f2:	f001 f9c7 	bl	b8584 <memcpy>
    __backup_sram_signature = signature;
   b71f6:	4b05      	ldr	r3, [pc, #20]	; (b720c <_Z33system_initialize_user_backup_ramv+0x24>)
   b71f8:	4a05      	ldr	r2, [pc, #20]	; (b7210 <_Z33system_initialize_user_backup_ramv+0x28>)
   b71fa:	601a      	str	r2, [r3, #0]
}
   b71fc:	bd08      	pop	{r3, pc}
   b71fe:	bf00      	nop
   b7200:	2003f400 	.word	0x2003f400
   b7204:	2003f404 	.word	0x2003f404
   b7208:	000b9178 	.word	0x000b9178
   b720c:	2003f400 	.word	0x2003f400
   b7210:	9a271c1e 	.word	0x9a271c1e

000b7214 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7214:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7216:	2300      	movs	r3, #0
   b7218:	9300      	str	r3, [sp, #0]
   b721a:	461a      	mov	r2, r3
   b721c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7220:	f7fd fe86 	bl	b4f30 <system_ctrl_set_result>
}
   b7224:	b003      	add	sp, #12
   b7226:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b722c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b722c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b722e:	8843      	ldrh	r3, [r0, #2]
   b7230:	2b0a      	cmp	r3, #10
   b7232:	d008      	beq.n	b7246 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7234:	2b50      	cmp	r3, #80	; 0x50
   b7236:	d10b      	bne.n	b7250 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7238:	4b09      	ldr	r3, [pc, #36]	; (b7260 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b723a:	681b      	ldr	r3, [r3, #0]
   b723c:	b14b      	cbz	r3, b7252 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b723e:	b003      	add	sp, #12
   b7240:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7244:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b7246:	f7ff ffe5 	bl	b7214 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b724a:	b003      	add	sp, #12
   b724c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7250:	2300      	movs	r3, #0
   b7252:	9300      	str	r3, [sp, #0]
   b7254:	461a      	mov	r2, r3
   b7256:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b725a:	f7fd fe69 	bl	b4f30 <system_ctrl_set_result>
}
   b725e:	e7f4      	b.n	b724a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7260:	2003e6fc 	.word	0x2003e6fc

000b7264 <module_user_init_hook>:
{
   b7264:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b7266:	4812      	ldr	r0, [pc, #72]	; (b72b0 <module_user_init_hook+0x4c>)
   b7268:	2100      	movs	r1, #0
   b726a:	f7fd ff0b 	bl	b5084 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b726e:	4b11      	ldr	r3, [pc, #68]	; (b72b4 <module_user_init_hook+0x50>)
   b7270:	681a      	ldr	r2, [r3, #0]
   b7272:	4b11      	ldr	r3, [pc, #68]	; (b72b8 <module_user_init_hook+0x54>)
   b7274:	429a      	cmp	r2, r3
   b7276:	4b11      	ldr	r3, [pc, #68]	; (b72bc <module_user_init_hook+0x58>)
   b7278:	bf0c      	ite	eq
   b727a:	2201      	moveq	r2, #1
   b727c:	2200      	movne	r2, #0
   b727e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7280:	d001      	beq.n	b7286 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7282:	f7ff ffb1 	bl	b71e8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7286:	f7fd fc25 	bl	b4ad4 <HAL_RNG_GetRandomNumber>
   b728a:	4604      	mov	r4, r0
    srand(seed);
   b728c:	f001 f9aa 	bl	b85e4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7290:	4b0b      	ldr	r3, [pc, #44]	; (b72c0 <module_user_init_hook+0x5c>)
   b7292:	b113      	cbz	r3, b729a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7294:	4620      	mov	r0, r4
   b7296:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b729a:	2100      	movs	r1, #0
   b729c:	4808      	ldr	r0, [pc, #32]	; (b72c0 <module_user_init_hook+0x5c>)
   b729e:	f7fd feb1 	bl	b5004 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b72a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b72a6:	4807      	ldr	r0, [pc, #28]	; (b72c4 <module_user_init_hook+0x60>)
   b72a8:	2100      	movs	r1, #0
   b72aa:	f7fd be37 	b.w	b4f1c <system_ctrl_set_app_request_handler>
   b72ae:	bf00      	nop
   b72b0:	000b7191 	.word	0x000b7191
   b72b4:	2003f400 	.word	0x2003f400
   b72b8:	9a271c1e 	.word	0x9a271c1e
   b72bc:	2003e6f8 	.word	0x2003e6f8
   b72c0:	00000000 	.word	0x00000000
   b72c4:	000b722d 	.word	0x000b722d

000b72c8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b72c8:	4770      	bx	lr

000b72ca <_ZN9IPAddressD0Ev>:
   b72ca:	b510      	push	{r4, lr}
   b72cc:	2118      	movs	r1, #24
   b72ce:	4604      	mov	r4, r0
   b72d0:	f7fc fef7 	bl	b40c2 <_ZdlPvj>
   b72d4:	4620      	mov	r0, r4
   b72d6:	bd10      	pop	{r4, pc}

000b72d8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b72d8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b72da:	7d03      	ldrb	r3, [r0, #20]
   b72dc:	2b06      	cmp	r3, #6
{
   b72de:	b08d      	sub	sp, #52	; 0x34
   b72e0:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b72e2:	f100 0704 	add.w	r7, r0, #4
   b72e6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b72ea:	d012      	beq.n	b7312 <_ZNK9IPAddress7printToER5Print+0x3a>
   b72ec:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b72f0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b72f4:	220a      	movs	r2, #10
   b72f6:	4630      	mov	r0, r6
   b72f8:	f7fe ff17 	bl	b612a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b72fc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b72fe:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b7300:	d019      	beq.n	b7336 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b7302:	2c00      	cmp	r4, #0
   b7304:	d0f4      	beq.n	b72f0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b7306:	212e      	movs	r1, #46	; 0x2e
   b7308:	4630      	mov	r0, r6
   b730a:	f7fe fef5 	bl	b60f8 <_ZN5Print5printEc>
   b730e:	4404      	add	r4, r0
   b7310:	e7ee      	b.n	b72f0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7312:	232f      	movs	r3, #47	; 0x2f
   b7314:	466a      	mov	r2, sp
   b7316:	4639      	mov	r1, r7
   b7318:	200a      	movs	r0, #10
		buf[0] = 0;
   b731a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b731e:	f7fd fc6d 	bl	b4bfc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b7322:	4668      	mov	r0, sp
   b7324:	f7fc fe84 	bl	b4030 <strlen>
   b7328:	6833      	ldr	r3, [r6, #0]
   b732a:	4602      	mov	r2, r0
   b732c:	68db      	ldr	r3, [r3, #12]
   b732e:	4669      	mov	r1, sp
   b7330:	4630      	mov	r0, r6
   b7332:	4798      	blx	r3
   b7334:	4604      	mov	r4, r0
    }
    return n;
}
   b7336:	4620      	mov	r0, r4
   b7338:	b00d      	add	sp, #52	; 0x34
   b733a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b733c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b733c:	b510      	push	{r4, lr}
   b733e:	4b05      	ldr	r3, [pc, #20]	; (b7354 <_ZN9IPAddressC1Ev+0x18>)
   b7340:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b7342:	2211      	movs	r2, #17
   b7344:	f840 3b04 	str.w	r3, [r0], #4
   b7348:	2100      	movs	r1, #0
   b734a:	f001 f943 	bl	b85d4 <memset>
}
   b734e:	4620      	mov	r0, r4
   b7350:	bd10      	pop	{r4, pc}
   b7352:	bf00      	nop
   b7354:	000b8c9c 	.word	0x000b8c9c

000b7358 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b7358:	4603      	mov	r3, r0
   b735a:	4a07      	ldr	r2, [pc, #28]	; (b7378 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b735c:	b510      	push	{r4, lr}
   b735e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b7362:	f101 0210 	add.w	r2, r1, #16
   b7366:	f851 4b04 	ldr.w	r4, [r1], #4
   b736a:	f843 4b04 	str.w	r4, [r3], #4
   b736e:	4291      	cmp	r1, r2
   b7370:	d1f9      	bne.n	b7366 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b7372:	780a      	ldrb	r2, [r1, #0]
   b7374:	701a      	strb	r2, [r3, #0]
}
   b7376:	bd10      	pop	{r4, pc}
   b7378:	000b8c9c 	.word	0x000b8c9c

000b737c <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b737c:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b737e:	2b04      	cmp	r3, #4
   b7380:	d104      	bne.n	b738c <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b7382:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7384:	3800      	subs	r0, #0
   b7386:	bf18      	it	ne
   b7388:	2001      	movne	r0, #1
   b738a:	4770      	bx	lr
    } else if (version() == 6) {
   b738c:	2b06      	cmp	r3, #6
   b738e:	d107      	bne.n	b73a0 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7390:	6843      	ldr	r3, [r0, #4]
   b7392:	b93b      	cbnz	r3, b73a4 <_ZNK9IPAddresscvbEv+0x28>
   b7394:	6883      	ldr	r3, [r0, #8]
   b7396:	b92b      	cbnz	r3, b73a4 <_ZNK9IPAddresscvbEv+0x28>
   b7398:	68c3      	ldr	r3, [r0, #12]
   b739a:	b91b      	cbnz	r3, b73a4 <_ZNK9IPAddresscvbEv+0x28>
   b739c:	6900      	ldr	r0, [r0, #16]
   b739e:	e7f1      	b.n	b7384 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b73a0:	2000      	movs	r0, #0
   b73a2:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b73a4:	2001      	movs	r0, #1
}
   b73a6:	4770      	bx	lr

000b73a8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b73a8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b73aa:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b73ae:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b73b2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b73b6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b73ba:	2304      	movs	r3, #4
   b73bc:	6041      	str	r1, [r0, #4]
   b73be:	7503      	strb	r3, [r0, #20]
}
   b73c0:	bd10      	pop	{r4, pc}
	...

000b73c4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b73c4:	b507      	push	{r0, r1, r2, lr}
   b73c6:	4b06      	ldr	r3, [pc, #24]	; (b73e0 <_ZN9IPAddressC1EPKh+0x1c>)
   b73c8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b73ca:	78cb      	ldrb	r3, [r1, #3]
   b73cc:	9300      	str	r3, [sp, #0]
   b73ce:	788b      	ldrb	r3, [r1, #2]
   b73d0:	784a      	ldrb	r2, [r1, #1]
   b73d2:	7809      	ldrb	r1, [r1, #0]
   b73d4:	f7ff ffe8 	bl	b73a8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b73d8:	b003      	add	sp, #12
   b73da:	f85d fb04 	ldr.w	pc, [sp], #4
   b73de:	bf00      	nop
   b73e0:	000b8c9c 	.word	0x000b8c9c

000b73e4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b73e4:	7441      	strb	r1, [r0, #17]
}
   b73e6:	4770      	bx	lr

000b73e8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b73e8:	4770      	bx	lr

000b73ea <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b73ea:	4770      	bx	lr

000b73ec <_ZN9USBSerial4readEv>:
{
   b73ec:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b73ee:	2100      	movs	r1, #0
   b73f0:	7c00      	ldrb	r0, [r0, #16]
   b73f2:	f7fd fd3b 	bl	b4e6c <HAL_USB_USART_Receive_Data>
}
   b73f6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b73fa:	bd08      	pop	{r3, pc}

000b73fc <_ZN9USBSerial4peekEv>:
{
   b73fc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b73fe:	2101      	movs	r1, #1
   b7400:	7c00      	ldrb	r0, [r0, #16]
   b7402:	f7fd fd33 	bl	b4e6c <HAL_USB_USART_Receive_Data>
}
   b7406:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b740a:	bd08      	pop	{r3, pc}

000b740c <_ZN9USBSerial17availableForWriteEv>:
{
   b740c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b740e:	7c00      	ldrb	r0, [r0, #16]
   b7410:	f7fd fd24 	bl	b4e5c <HAL_USB_USART_Available_Data_For_Write>
}
   b7414:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7418:	bd08      	pop	{r3, pc}

000b741a <_ZN9USBSerial9availableEv>:
{
   b741a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b741c:	7c00      	ldrb	r0, [r0, #16]
   b741e:	f7fd fd15 	bl	b4e4c <HAL_USB_USART_Available_Data>
}
   b7422:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7426:	bd08      	pop	{r3, pc}

000b7428 <_ZN9USBSerial5writeEh>:
{
   b7428:	b513      	push	{r0, r1, r4, lr}
   b742a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b742c:	7c00      	ldrb	r0, [r0, #16]
{
   b742e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7430:	f7fd fd14 	bl	b4e5c <HAL_USB_USART_Available_Data_For_Write>
   b7434:	2800      	cmp	r0, #0
   b7436:	9901      	ldr	r1, [sp, #4]
   b7438:	dc01      	bgt.n	b743e <_ZN9USBSerial5writeEh+0x16>
   b743a:	7c60      	ldrb	r0, [r4, #17]
   b743c:	b120      	cbz	r0, b7448 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b743e:	7c20      	ldrb	r0, [r4, #16]
   b7440:	f7fd fd1c 	bl	b4e7c <HAL_USB_USART_Send_Data>
   b7444:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7448:	b002      	add	sp, #8
   b744a:	bd10      	pop	{r4, pc}

000b744c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b744c:	7c00      	ldrb	r0, [r0, #16]
   b744e:	f7fd bd1d 	b.w	b4e8c <HAL_USB_USART_Flush_Data>

000b7452 <_ZN9USBSerialD0Ev>:
   b7452:	b510      	push	{r4, lr}
   b7454:	2114      	movs	r1, #20
   b7456:	4604      	mov	r4, r0
   b7458:	f7fc fe33 	bl	b40c2 <_ZdlPvj>
   b745c:	4620      	mov	r0, r4
   b745e:	bd10      	pop	{r4, pc}

000b7460 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7460:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b7462:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7466:	4604      	mov	r4, r0
   b7468:	4608      	mov	r0, r1
   b746a:	2100      	movs	r1, #0
   b746c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7470:	4b04      	ldr	r3, [pc, #16]	; (b7484 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7472:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7474:	2301      	movs	r3, #1
  _serial = serial;
   b7476:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7478:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b747a:	4611      	mov	r1, r2
   b747c:	f7fd fcce 	bl	b4e1c <HAL_USB_USART_Init>
}
   b7480:	4620      	mov	r0, r4
   b7482:	bd10      	pop	{r4, pc}
   b7484:	000b8cb0 	.word	0x000b8cb0

000b7488 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7488:	7c00      	ldrb	r0, [r0, #16]
   b748a:	2200      	movs	r2, #0
   b748c:	f7fd bcce 	b.w	b4e2c <HAL_USB_USART_Begin>

000b7490 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b7490:	7c00      	ldrb	r0, [r0, #16]
   b7492:	f7fd bcd3 	b.w	b4e3c <HAL_USB_USART_End>

000b7496 <_Z19acquireSerialBufferv>:
{
   b7496:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b7498:	2214      	movs	r2, #20
{
   b749a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b749c:	2100      	movs	r1, #0
   b749e:	f001 f899 	bl	b85d4 <memset>
}
   b74a2:	4620      	mov	r0, r4
   b74a4:	bd10      	pop	{r4, pc}
	...

000b74a8 <_Z16_fetch_usbserialv>:
{
   b74a8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b74aa:	4c0f      	ldr	r4, [pc, #60]	; (b74e8 <_Z16_fetch_usbserialv+0x40>)
{
   b74ac:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b74ae:	a803      	add	r0, sp, #12
   b74b0:	f7ff fff1 	bl	b7496 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b74b4:	7821      	ldrb	r1, [r4, #0]
   b74b6:	f3bf 8f5b 	dmb	ish
   b74ba:	f011 0101 	ands.w	r1, r1, #1
   b74be:	d10f      	bne.n	b74e0 <_Z16_fetch_usbserialv+0x38>
   b74c0:	4620      	mov	r0, r4
   b74c2:	9101      	str	r1, [sp, #4]
   b74c4:	f7fc fe0c 	bl	b40e0 <__cxa_guard_acquire>
   b74c8:	9901      	ldr	r1, [sp, #4]
   b74ca:	b148      	cbz	r0, b74e0 <_Z16_fetch_usbserialv+0x38>
   b74cc:	aa03      	add	r2, sp, #12
   b74ce:	4807      	ldr	r0, [pc, #28]	; (b74ec <_Z16_fetch_usbserialv+0x44>)
   b74d0:	f7ff ffc6 	bl	b7460 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b74d4:	4620      	mov	r0, r4
   b74d6:	f7fc fe08 	bl	b40ea <__cxa_guard_release>
   b74da:	4805      	ldr	r0, [pc, #20]	; (b74f0 <_Z16_fetch_usbserialv+0x48>)
   b74dc:	f001 f834 	bl	b8548 <atexit>
	return _usbserial;
}
   b74e0:	4802      	ldr	r0, [pc, #8]	; (b74ec <_Z16_fetch_usbserialv+0x44>)
   b74e2:	b008      	add	sp, #32
   b74e4:	bd10      	pop	{r4, pc}
   b74e6:	bf00      	nop
   b74e8:	2003e700 	.word	0x2003e700
   b74ec:	2003e704 	.word	0x2003e704
   b74f0:	000b73e9 	.word	0x000b73e9

000b74f4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b74f4:	4770      	bx	lr

000b74f6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b74f6:	7441      	strb	r1, [r0, #17]
}
   b74f8:	4770      	bx	lr

000b74fa <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b74fa:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b74fc:	7c00      	ldrb	r0, [r0, #16]
   b74fe:	f7fd fbcd 	bl	b4c9c <hal_usart_available_data_for_write>
}
   b7502:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7506:	bd08      	pop	{r3, pc}

000b7508 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7508:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b750a:	7c00      	ldrb	r0, [r0, #16]
   b750c:	f7fd fb9e 	bl	b4c4c <hal_usart_available>
}
   b7510:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7514:	bd08      	pop	{r3, pc}

000b7516 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7516:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7518:	7c00      	ldrb	r0, [r0, #16]
   b751a:	f7fd fba7 	bl	b4c6c <hal_usart_peek>
}
   b751e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7522:	bd08      	pop	{r3, pc}

000b7524 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7524:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7526:	7c00      	ldrb	r0, [r0, #16]
   b7528:	f7fd fb98 	bl	b4c5c <hal_usart_read>
}
   b752c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7530:	bd08      	pop	{r3, pc}

000b7532 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b7532:	7c00      	ldrb	r0, [r0, #16]
   b7534:	f7fd bba2 	b.w	b4c7c <hal_usart_flush>

000b7538 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7538:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b753a:	7c45      	ldrb	r5, [r0, #17]
{
   b753c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b753e:	b12d      	cbz	r5, b754c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7540:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b7542:	b003      	add	sp, #12
   b7544:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7548:	f7fd bb78 	b.w	b4c3c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b754c:	7c00      	ldrb	r0, [r0, #16]
   b754e:	9101      	str	r1, [sp, #4]
   b7550:	f7fd fba4 	bl	b4c9c <hal_usart_available_data_for_write>
   b7554:	2800      	cmp	r0, #0
   b7556:	9901      	ldr	r1, [sp, #4]
   b7558:	dcf2      	bgt.n	b7540 <_ZN11USARTSerial5writeEh+0x8>
}
   b755a:	4628      	mov	r0, r5
   b755c:	b003      	add	sp, #12
   b755e:	bd30      	pop	{r4, r5, pc}

000b7560 <_ZN11USARTSerialD0Ev>:
   b7560:	b510      	push	{r4, lr}
   b7562:	2114      	movs	r1, #20
   b7564:	4604      	mov	r4, r0
   b7566:	f7fc fdac 	bl	b40c2 <_ZdlPvj>
   b756a:	4620      	mov	r0, r4
   b756c:	bd10      	pop	{r4, pc}
	...

000b7570 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7570:	b510      	push	{r4, lr}
   b7572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7576:	4604      	mov	r4, r0
   b7578:	4608      	mov	r0, r1
   b757a:	4611      	mov	r1, r2
   b757c:	2200      	movs	r2, #0
   b757e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7582:	4b04      	ldr	r3, [pc, #16]	; (b7594 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7584:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7586:	2301      	movs	r3, #1
  _serial = serial;
   b7588:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b758a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b758c:	f7fd fb96 	bl	b4cbc <hal_usart_init_ex>
}
   b7590:	4620      	mov	r0, r4
   b7592:	bd10      	pop	{r4, pc}
   b7594:	000b8ce0 	.word	0x000b8ce0

000b7598 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b7598:	7c00      	ldrb	r0, [r0, #16]
   b759a:	2300      	movs	r3, #0
   b759c:	f7fd bb86 	b.w	b4cac <hal_usart_begin_config>

000b75a0 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b75a0:	2200      	movs	r2, #0
   b75a2:	f7ff bff9 	b.w	b7598 <_ZN11USARTSerial5beginEmm>

000b75a6 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b75a6:	7c00      	ldrb	r0, [r0, #16]
   b75a8:	f7fd bb40 	b.w	b4c2c <hal_usart_end>

000b75ac <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b75ac:	4770      	bx	lr

000b75ae <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b75ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b75b0:	4606      	mov	r6, r0
   b75b2:	4615      	mov	r5, r2
   b75b4:	460c      	mov	r4, r1
   b75b6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b75b8:	42bc      	cmp	r4, r7
   b75ba:	d006      	beq.n	b75ca <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b75bc:	6833      	ldr	r3, [r6, #0]
   b75be:	f814 1b01 	ldrb.w	r1, [r4], #1
   b75c2:	689b      	ldr	r3, [r3, #8]
   b75c4:	4630      	mov	r0, r6
   b75c6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b75c8:	e7f6      	b.n	b75b8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b75ca:	4628      	mov	r0, r5
   b75cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b75ce <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b75ce:	7c00      	ldrb	r0, [r0, #16]
   b75d0:	2200      	movs	r2, #0
   b75d2:	f7fd bb7b 	b.w	b4ccc <hal_i2c_write>

000b75d6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b75d6:	7c00      	ldrb	r0, [r0, #16]
   b75d8:	2100      	movs	r1, #0
   b75da:	f7fd bb7f 	b.w	b4cdc <hal_i2c_available>

000b75de <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b75de:	7c00      	ldrb	r0, [r0, #16]
   b75e0:	2100      	movs	r1, #0
   b75e2:	f7fd bb83 	b.w	b4cec <hal_i2c_read>

000b75e6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b75e6:	7c00      	ldrb	r0, [r0, #16]
   b75e8:	2100      	movs	r1, #0
   b75ea:	f7fd bb87 	b.w	b4cfc <hal_i2c_peek>

000b75ee <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b75ee:	7c00      	ldrb	r0, [r0, #16]
   b75f0:	2100      	movs	r1, #0
   b75f2:	f7fd bb8b 	b.w	b4d0c <hal_i2c_flush>

000b75f6 <_ZN7TwoWireD0Ev>:
   b75f6:	b510      	push	{r4, lr}
   b75f8:	2114      	movs	r1, #20
   b75fa:	4604      	mov	r4, r0
   b75fc:	f7fc fd61 	bl	b40c2 <_ZdlPvj>
   b7600:	4620      	mov	r0, r4
   b7602:	bd10      	pop	{r4, pc}

000b7604 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7604:	b538      	push	{r3, r4, r5, lr}
   b7606:	4604      	mov	r4, r0
   b7608:	4615      	mov	r5, r2
   b760a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b760e:	2200      	movs	r2, #0
   b7610:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7614:	4b09      	ldr	r3, [pc, #36]	; (b763c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b7616:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7618:	4608      	mov	r0, r1
   b761a:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b761c:	4629      	mov	r1, r5
   b761e:	f7fd fb85 	bl	b4d2c <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b7622:	30bf      	adds	r0, #191	; 0xbf
   b7624:	d108      	bne.n	b7638 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b7626:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b7628:	07db      	lsls	r3, r3, #31
   b762a:	d505      	bpl.n	b7638 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b762c:	6868      	ldr	r0, [r5, #4]
   b762e:	f7fd fcf9 	bl	b5024 <free>
    free(conf.tx_buffer);
   b7632:	68e8      	ldr	r0, [r5, #12]
   b7634:	f7fd fcf6 	bl	b5024 <free>
}
   b7638:	4620      	mov	r0, r4
   b763a:	bd38      	pop	{r3, r4, r5, pc}
   b763c:	000b8d10 	.word	0x000b8d10

000b7640 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b7640:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b7642:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b7644:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b7648:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b764a:	2201      	movs	r2, #1
   b764c:	f04f 33ff 	mov.w	r3, #4294967295
   b7650:	f10d 0107 	add.w	r1, sp, #7
   b7654:	47a0      	blx	r4
}
   b7656:	b002      	add	sp, #8
   b7658:	bd10      	pop	{r4, pc}

000b765a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b765a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b765c:	6803      	ldr	r3, [r0, #0]
   b765e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b7660:	f04f 33ff 	mov.w	r3, #4294967295
   b7664:	46a4      	mov	ip, r4
}
   b7666:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b766a:	4760      	bx	ip

000b766c <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b766c:	b513      	push	{r0, r1, r4, lr}
   b766e:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b7670:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b7672:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b7676:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b7678:	f10d 0107 	add.w	r1, sp, #7
   b767c:	2201      	movs	r2, #1
   b767e:	47a0      	blx	r4
}
   b7680:	b002      	add	sp, #8
   b7682:	bd10      	pop	{r4, pc}

000b7684 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b7684:	b510      	push	{r4, lr}
      { return _M_ptr; }
   b7686:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7688:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b768c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7690:	429a      	cmp	r2, r3
int TCPClient::read() {
   b7692:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7694:	d008      	beq.n	b76a8 <_ZN9TCPClient4readEv+0x24>
   b7696:	6963      	ldr	r3, [r4, #20]
   b7698:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b769c:	1c51      	adds	r1, r2, #1
   b769e:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b76a2:	4413      	add	r3, r2
   b76a4:	7918      	ldrb	r0, [r3, #4]
}
   b76a6:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b76a8:	6803      	ldr	r3, [r0, #0]
   b76aa:	691b      	ldr	r3, [r3, #16]
   b76ac:	4798      	blx	r3
   b76ae:	2800      	cmp	r0, #0
   b76b0:	d1f1      	bne.n	b7696 <_ZN9TCPClient4readEv+0x12>
   b76b2:	f04f 30ff 	mov.w	r0, #4294967295
   b76b6:	e7f6      	b.n	b76a6 <_ZN9TCPClient4readEv+0x22>

000b76b8 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b76b8:	4770      	bx	lr

000b76ba <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b76ba:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b76bc:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b76be:	43c0      	mvns	r0, r0
   b76c0:	0fc0      	lsrs	r0, r0, #31
   b76c2:	4770      	bx	lr

000b76c4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b76c4:	4770      	bx	lr
	...

000b76c8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b76c8:	4b06      	ldr	r3, [pc, #24]	; (b76e4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b76ca:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b76cc:	b510      	push	{r4, lr}
   b76ce:	f100 040c 	add.w	r4, r0, #12
	    ||
   b76d2:	d005      	beq.n	b76e0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b76d4:	4608      	mov	r0, r1
   b76d6:	f000 fe25 	bl	b8324 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b76da:	2800      	cmp	r0, #0
   b76dc:	bf08      	it	eq
   b76de:	2400      	moveq	r4, #0
      }
   b76e0:	4620      	mov	r0, r4
   b76e2:	bd10      	pop	{r4, pc}
   b76e4:	000b8b84 	.word	0x000b8b84

000b76e8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b76e8:	b510      	push	{r4, lr}
   b76ea:	21ac      	movs	r1, #172	; 0xac
   b76ec:	4604      	mov	r4, r0
   b76ee:	f7fc fce8 	bl	b40c2 <_ZdlPvj>
   b76f2:	4620      	mov	r0, r4
   b76f4:	bd10      	pop	{r4, pc}

000b76f6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b76f6:	21ac      	movs	r1, #172	; 0xac
   b76f8:	f7fc bce3 	b.w	b40c2 <_ZdlPvj>

000b76fc <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b76fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b7700:	f04f 0800 	mov.w	r8, #0
   b7704:	b086      	sub	sp, #24
   b7706:	461c      	mov	r4, r3
   b7708:	f8c0 8004 	str.w	r8, [r0, #4]
   b770c:	4605      	mov	r5, r0
   b770e:	460e      	mov	r6, r1
   b7710:	4617      	mov	r7, r2
    struct timeval tv = {};
   b7712:	4641      	mov	r1, r8
   b7714:	2210      	movs	r2, #16
   b7716:	a802      	add	r0, sp, #8
   b7718:	f000 ff5c 	bl	b85d4 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b771c:	1c63      	adds	r3, r4, #1
   b771e:	d009      	beq.n	b7734 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b7720:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7724:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b7728:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b772c:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b7730:	435c      	muls	r4, r3
   b7732:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b7734:	6968      	ldr	r0, [r5, #20]
   b7736:	2310      	movs	r3, #16
   b7738:	9300      	str	r3, [sp, #0]
   b773a:	6800      	ldr	r0, [r0, #0]
   b773c:	ab02      	add	r3, sp, #8
   b773e:	f241 0205 	movw	r2, #4101	; 0x1005
   b7742:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7746:	f7fd faf9 	bl	b4d3c <sock_setsockopt>
    if (ret < 0) {
   b774a:	2800      	cmp	r0, #0
   b774c:	da07      	bge.n	b775e <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b774e:	f7fd fc89 	bl	b5064 <__errno>
   b7752:	6803      	ldr	r3, [r0, #0]
   b7754:	606b      	str	r3, [r5, #4]
        return 0;
   b7756:	2000      	movs	r0, #0
}
   b7758:	b006      	add	sp, #24
   b775a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b775e:	6968      	ldr	r0, [r5, #20]
   b7760:	2300      	movs	r3, #0
   b7762:	6800      	ldr	r0, [r0, #0]
   b7764:	463a      	mov	r2, r7
   b7766:	4631      	mov	r1, r6
   b7768:	f7fd fb08 	bl	b4d7c <sock_send>
    if (ret < 0) {
   b776c:	1e03      	subs	r3, r0, #0
   b776e:	dbee      	blt.n	b774e <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b7770:	4618      	mov	r0, r3
   b7772:	e7f1      	b.n	b7758 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b7774 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b7774:	b530      	push	{r4, r5, lr}
   b7776:	b087      	sub	sp, #28
   b7778:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b777a:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b777c:	4668      	mov	r0, sp
   b777e:	f7ff fe21 	bl	b73c4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7782:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7784:	3404      	adds	r4, #4
   b7786:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7788:	682b      	ldr	r3, [r5, #0]
   b778a:	7023      	strb	r3, [r4, #0]
    }
   b778c:	b007      	add	sp, #28
   b778e:	bd30      	pop	{r4, r5, pc}

000b7790 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b7790:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b7792:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b7794:	4b05      	ldr	r3, [pc, #20]	; (b77ac <_ZN9TCPClient8remoteIPEv+0x1c>)
   b7796:	4604      	mov	r4, r0
   b7798:	358c      	adds	r5, #140	; 0x8c
   b779a:	f844 3b04 	str.w	r3, [r4], #4
   b779e:	4606      	mov	r6, r0
   b77a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b77a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b77a4:	682b      	ldr	r3, [r5, #0]
   b77a6:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b77a8:	4630      	mov	r0, r6
   b77aa:	bd70      	pop	{r4, r5, r6, pc}
   b77ac:	000b8c9c 	.word	0x000b8c9c

000b77b0 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b77b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b77b4:	4698      	mov	r8, r3
    stop();
   b77b6:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b77b8:	b093      	sub	sp, #76	; 0x4c
   b77ba:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b77bc:	2400      	movs	r4, #0
    stop();
   b77be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b77c0:	4606      	mov	r6, r0
   b77c2:	4617      	mov	r7, r2
    stop();
   b77c4:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b77c6:	4628      	mov	r0, r5
   b77c8:	466b      	mov	r3, sp
   b77ca:	4622      	mov	r2, r4
   b77cc:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b77ce:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b77d0:	f7fd f960 	bl	b4a94 <netdb_getaddrinfo>
   b77d4:	4605      	mov	r5, r0
   b77d6:	2800      	cmp	r0, #0
   b77d8:	d163      	bne.n	b78a2 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b77da:	9b00      	ldr	r3, [sp, #0]
   b77dc:	2b00      	cmp	r3, #0
   b77de:	d04b      	beq.n	b7878 <_ZN9TCPClient7connectEPKctm+0xc8>
   b77e0:	695b      	ldr	r3, [r3, #20]
   b77e2:	2b00      	cmp	r3, #0
   b77e4:	d048      	beq.n	b7878 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b77e6:	a806      	add	r0, sp, #24
   b77e8:	f7ff fda8 	bl	b733c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b77ec:	9b00      	ldr	r3, [sp, #0]
   b77ee:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b77f0:	7863      	ldrb	r3, [r4, #1]
   b77f2:	2b02      	cmp	r3, #2
   b77f4:	d104      	bne.n	b7800 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b77f6:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b77f8:	a806      	add	r0, sp, #24
   b77fa:	f7ff ffbb 	bl	b7774 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b77fe:	e026      	b.n	b784e <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b7800:	2b0a      	cmp	r3, #10
   b7802:	d124      	bne.n	b784e <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b7804:	2211      	movs	r2, #17
   b7806:	4629      	mov	r1, r5
   b7808:	a801      	add	r0, sp, #4
   b780a:	f000 fee3 	bl	b85d4 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b780e:	68a3      	ldr	r3, [r4, #8]
   b7810:	2b00      	cmp	r3, #0
   b7812:	d038      	beq.n	b7886 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7814:	f104 0308 	add.w	r3, r4, #8
   b7818:	f10d 0c04 	add.w	ip, sp, #4
   b781c:	3418      	adds	r4, #24
   b781e:	6818      	ldr	r0, [r3, #0]
   b7820:	6859      	ldr	r1, [r3, #4]
   b7822:	4662      	mov	r2, ip
   b7824:	c203      	stmia	r2!, {r0, r1}
   b7826:	3308      	adds	r3, #8
   b7828:	42a3      	cmp	r3, r4
   b782a:	4694      	mov	ip, r2
   b782c:	d1f7      	bne.n	b781e <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b782e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b7830:	a901      	add	r1, sp, #4
   b7832:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b7834:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b7838:	f7ff fd8e 	bl	b7358 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b783c:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b7840:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b7844:	ac07      	add	r4, sp, #28
   b7846:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7848:	f8dc 3000 	ldr.w	r3, [ip]
   b784c:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b784e:	a806      	add	r0, sp, #24
   b7850:	f7ff fd94 	bl	b737c <_ZNK9IPAddresscvbEv>
        if (addr) {
   b7854:	b180      	cbz	r0, b7878 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b7856:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b7858:	ad07      	add	r5, sp, #28
   b785a:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b785e:	4b12      	ldr	r3, [pc, #72]	; (b78a8 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b7860:	930c      	str	r3, [sp, #48]	; 0x30
   b7862:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7864:	ac0d      	add	r4, sp, #52	; 0x34
   b7866:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7868:	682b      	ldr	r3, [r5, #0]
   b786a:	7023      	strb	r3, [r4, #0]
   b786c:	463a      	mov	r2, r7
   b786e:	4643      	mov	r3, r8
   b7870:	a90c      	add	r1, sp, #48	; 0x30
   b7872:	4630      	mov	r0, r6
   b7874:	47c8      	blx	r9
   b7876:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b7878:	9800      	ldr	r0, [sp, #0]
   b787a:	f7fd f903 	bl	b4a84 <netdb_freeaddrinfo>
}
   b787e:	4628      	mov	r0, r5
   b7880:	b013      	add	sp, #76	; 0x4c
   b7882:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7886:	68e3      	ldr	r3, [r4, #12]
   b7888:	2b00      	cmp	r3, #0
   b788a:	d1c3      	bne.n	b7814 <_ZN9TCPClient7connectEPKctm+0x64>
   b788c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b7890:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b7894:	f7fd f9ba 	bl	b4c0c <inet_htonl>
   b7898:	4581      	cmp	r9, r0
   b789a:	d1bb      	bne.n	b7814 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b789c:	f104 0114 	add.w	r1, r4, #20
   b78a0:	e7aa      	b.n	b77f8 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b78a2:	4625      	mov	r5, r4
   b78a4:	e7e8      	b.n	b7878 <_ZN9TCPClient7connectEPKctm+0xc8>
   b78a6:	bf00      	nop
   b78a8:	000b8c9c 	.word	0x000b8c9c

000b78ac <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b78ac:	b538      	push	{r3, r4, r5, lr}
   b78ae:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b78b0:	681a      	ldr	r2, [r3, #0]
   b78b2:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b78b4:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b78b6:	da10      	bge.n	b78da <_ZN9TCPClient9connectedEv+0x2e>
   b78b8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b78bc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b78c0:	429a      	cmp	r2, r3
   b78c2:	d10a      	bne.n	b78da <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b78c4:	6803      	ldr	r3, [r0, #0]
   b78c6:	691b      	ldr	r3, [r3, #16]
   b78c8:	4798      	blx	r3
        if (!rv) {
   b78ca:	4604      	mov	r4, r0
   b78cc:	b928      	cbnz	r0, b78da <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b78ce:	682b      	ldr	r3, [r5, #0]
   b78d0:	4628      	mov	r0, r5
   b78d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b78d4:	4798      	blx	r3
        rv = available();
   b78d6:	4620      	mov	r0, r4
}
   b78d8:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b78da:	2001      	movs	r0, #1
   b78dc:	e7fc      	b.n	b78d8 <_ZN9TCPClient9connectedEv+0x2c>

000b78de <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b78de:	b510      	push	{r4, lr}
   b78e0:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b78e2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b78e6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b78ea:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b78ec:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b78ee:	d005      	beq.n	b78fc <_ZN9TCPClient4peekEv+0x1e>
   b78f0:	6963      	ldr	r3, [r4, #20]
   b78f2:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b78f6:	4413      	add	r3, r2
   b78f8:	7918      	ldrb	r0, [r3, #4]
}
   b78fa:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b78fc:	6803      	ldr	r3, [r0, #0]
   b78fe:	691b      	ldr	r3, [r3, #16]
   b7900:	4798      	blx	r3
   b7902:	2800      	cmp	r0, #0
   b7904:	d1f4      	bne.n	b78f0 <_ZN9TCPClient4peekEv+0x12>
   b7906:	f04f 30ff 	mov.w	r0, #4294967295
   b790a:	e7f6      	b.n	b78fa <_ZN9TCPClient4peekEv+0x1c>

000b790c <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b790c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b790e:	6943      	ldr	r3, [r0, #20]
   b7910:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b7912:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7916:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b791a:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b791c:	4605      	mov	r5, r0
   b791e:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b7920:	d016      	beq.n	b7950 <_ZN9TCPClient4readEPhj+0x44>
   b7922:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b7924:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b7928:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b792c:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b792e:	42bc      	cmp	r4, r7
   b7930:	bf28      	it	cs
   b7932:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b7934:	3304      	adds	r3, #4
   b7936:	4622      	mov	r2, r4
   b7938:	4419      	add	r1, r3
   b793a:	4630      	mov	r0, r6
   b793c:	f000 fe22 	bl	b8584 <memcpy>
   b7940:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b7942:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b7946:	4423      	add	r3, r4
   b7948:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b794c:	4620      	mov	r0, r4
   b794e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b7950:	6803      	ldr	r3, [r0, #0]
   b7952:	691b      	ldr	r3, [r3, #16]
   b7954:	4798      	blx	r3
   b7956:	2800      	cmp	r0, #0
   b7958:	d1e3      	bne.n	b7922 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b795a:	f04f 34ff 	mov.w	r4, #4294967295
   b795e:	e7f5      	b.n	b794c <_ZN9TCPClient4readEPhj+0x40>

000b7960 <_ZN9TCPClient12flush_bufferEv>:
   b7960:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b7962:	2300      	movs	r3, #0
   b7964:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b7968:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b796a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b796e:	4770      	bx	lr

000b7970 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7974:	461f      	mov	r7, r3
    stop();
   b7976:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7978:	460c      	mov	r4, r1
    stop();
   b797a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b797c:	b08a      	sub	sp, #40	; 0x28
   b797e:	4605      	mov	r5, r0
   b7980:	4616      	mov	r6, r2
    stop();
   b7982:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b7984:	7d23      	ldrb	r3, [r4, #20]
   b7986:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b798a:	2b04      	cmp	r3, #4
   b798c:	bf0c      	ite	eq
   b798e:	2002      	moveq	r0, #2
   b7990:	200a      	movne	r0, #10
   b7992:	2206      	movs	r2, #6
   b7994:	2101      	movs	r1, #1
   b7996:	f7fd f9f9 	bl	b4d8c <sock_socket>
   b799a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b799e:	696b      	ldr	r3, [r5, #20]
   b79a0:	681b      	ldr	r3, [r3, #0]
   b79a2:	2b00      	cmp	r3, #0
   b79a4:	da08      	bge.n	b79b8 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b79a6:	682b      	ldr	r3, [r5, #0]
   b79a8:	4628      	mov	r0, r5
   b79aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b79ac:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b79ae:	4798      	blx	r3
}
   b79b0:	4620      	mov	r0, r4
   b79b2:	b00a      	add	sp, #40	; 0x28
   b79b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b79b8:	4628      	mov	r0, r5
   b79ba:	f7ff ffd1 	bl	b7960 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b79be:	b1b7      	cbz	r7, b79ee <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b79c0:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b79c2:	a903      	add	r1, sp, #12
   b79c4:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b79c6:	9303      	str	r3, [sp, #12]
   b79c8:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b79cc:	f7fd f87a 	bl	b4ac4 <if_index_to_name>
   b79d0:	2800      	cmp	r0, #0
   b79d2:	d1e8      	bne.n	b79a6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b79d4:	6968      	ldr	r0, [r5, #20]
   b79d6:	2306      	movs	r3, #6
   b79d8:	9300      	str	r3, [sp, #0]
   b79da:	6800      	ldr	r0, [r0, #0]
   b79dc:	ab03      	add	r3, sp, #12
   b79de:	f241 020b 	movw	r2, #4107	; 0x100b
   b79e2:	f640 71ff 	movw	r1, #4095	; 0xfff
   b79e6:	f7fd f9a9 	bl	b4d3c <sock_setsockopt>
   b79ea:	2800      	cmp	r0, #0
   b79ec:	d1db      	bne.n	b79a6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b79ee:	221c      	movs	r2, #28
   b79f0:	2100      	movs	r1, #0
   b79f2:	a803      	add	r0, sp, #12
   b79f4:	f000 fdee 	bl	b85d4 <memset>
    if (ip.version() == 4) {
   b79f8:	7d23      	ldrb	r3, [r4, #20]
   b79fa:	2b04      	cmp	r3, #4
   b79fc:	d11d      	bne.n	b7a3a <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b79fe:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b7a02:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b7a04:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b7a08:	f7fd f908 	bl	b4c1c <inet_htons>
   b7a0c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b7a10:	6860      	ldr	r0, [r4, #4]
   b7a12:	f7fd f8fb 	bl	b4c0c <inet_htonl>
   b7a16:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b7a18:	696b      	ldr	r3, [r5, #20]
   b7a1a:	221c      	movs	r2, #28
   b7a1c:	6818      	ldr	r0, [r3, #0]
   b7a1e:	a903      	add	r1, sp, #12
   b7a20:	f7fd f99c 	bl	b4d5c <sock_connect>
   b7a24:	2800      	cmp	r0, #0
   b7a26:	d1be      	bne.n	b79a6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b7a28:	3404      	adds	r4, #4
   b7a2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7a2c:	696d      	ldr	r5, [r5, #20]
   b7a2e:	358c      	adds	r5, #140	; 0x8c
   b7a30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7a32:	6823      	ldr	r3, [r4, #0]
   b7a34:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b7a36:	2401      	movs	r4, #1
   b7a38:	e7ba      	b.n	b79b0 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b7a3a:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b7a3e:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b7a40:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b7a44:	f7fd f8ea 	bl	b4c1c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7a48:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b7a4a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7a4e:	1d23      	adds	r3, r4, #4
   b7a50:	f104 0714 	add.w	r7, r4, #20
   b7a54:	6818      	ldr	r0, [r3, #0]
   b7a56:	6859      	ldr	r1, [r3, #4]
   b7a58:	4632      	mov	r2, r6
   b7a5a:	c203      	stmia	r2!, {r0, r1}
   b7a5c:	3308      	adds	r3, #8
   b7a5e:	42bb      	cmp	r3, r7
   b7a60:	4616      	mov	r6, r2
   b7a62:	d1f7      	bne.n	b7a54 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b7a64:	e7d8      	b.n	b7a18 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b7a68 <_ZN9TCPClient9availableEv>:
{
   b7a68:	b530      	push	{r4, r5, lr}
   b7a6a:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b7a6c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b7a70:	b08b      	sub	sp, #44	; 0x2c
   b7a72:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b7a74:	b12b      	cbz	r3, b7a82 <_ZN9TCPClient9availableEv+0x1a>
   b7a76:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b7a7a:	429a      	cmp	r2, r3
   b7a7c:	d101      	bne.n	b7a82 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b7a7e:	f7ff ff6f 	bl	b7960 <_ZN9TCPClient12flush_bufferEv>
   b7a82:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b7a84:	6808      	ldr	r0, [r1, #0]
   b7a86:	2800      	cmp	r0, #0
   b7a88:	db18      	blt.n	b7abc <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b7a8a:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b7a8e:	2d7f      	cmp	r5, #127	; 0x7f
   b7a90:	d814      	bhi.n	b7abc <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b7a92:	3104      	adds	r1, #4
   b7a94:	2308      	movs	r3, #8
   b7a96:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b7a9a:	4429      	add	r1, r5
   b7a9c:	f7fd f966 	bl	b4d6c <sock_recv>
            if (ret > 0) {
   b7aa0:	2800      	cmp	r0, #0
   b7aa2:	dd13      	ble.n	b7acc <_ZN9TCPClient9availableEv+0x64>
   b7aa4:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b7aa6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7aaa:	b90a      	cbnz	r2, b7ab0 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b7aac:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b7ab0:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b7ab2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7ab6:	4410      	add	r0, r2
   b7ab8:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b7abc:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b7abe:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b7ac2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b7ac6:	1ac0      	subs	r0, r0, r3
   b7ac8:	b00b      	add	sp, #44	; 0x2c
   b7aca:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b7acc:	f7fd faca 	bl	b5064 <__errno>
   b7ad0:	6803      	ldr	r3, [r0, #0]
   b7ad2:	2b0b      	cmp	r3, #11
   b7ad4:	d0f2      	beq.n	b7abc <_ZN9TCPClient9availableEv+0x54>
   b7ad6:	f7fd fac5 	bl	b5064 <__errno>
   b7ada:	6803      	ldr	r3, [r0, #0]
   b7adc:	2b0b      	cmp	r3, #11
   b7ade:	d0ed      	beq.n	b7abc <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b7ae0:	2320      	movs	r3, #32
   b7ae2:	2500      	movs	r5, #0
   b7ae4:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7ae8:	f7fd fabc 	bl	b5064 <__errno>
   b7aec:	6803      	ldr	r3, [r0, #0]
   b7aee:	9301      	str	r3, [sp, #4]
   b7af0:	4b08      	ldr	r3, [pc, #32]	; (b7b14 <_ZN9TCPClient9availableEv+0xac>)
   b7af2:	4909      	ldr	r1, [pc, #36]	; (b7b18 <_ZN9TCPClient9availableEv+0xb0>)
   b7af4:	9300      	str	r3, [sp, #0]
   b7af6:	aa02      	add	r2, sp, #8
   b7af8:	462b      	mov	r3, r5
   b7afa:	2032      	movs	r0, #50	; 0x32
   b7afc:	f7fd f9d6 	bl	b4eac <log_message>
                    sock_close(d_->sock);
   b7b00:	6963      	ldr	r3, [r4, #20]
   b7b02:	6818      	ldr	r0, [r3, #0]
   b7b04:	f7fd f922 	bl	b4d4c <sock_close>
   b7b08:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b7b0a:	f04f 32ff 	mov.w	r2, #4294967295
   b7b0e:	601a      	str	r2, [r3, #0]
   b7b10:	e7d4      	b.n	b7abc <_ZN9TCPClient9availableEv+0x54>
   b7b12:	bf00      	nop
   b7b14:	000b8d37 	.word	0x000b8d37
   b7b18:	000b8d30 	.word	0x000b8d30

000b7b1c <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b7b1c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b7b1e:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b7b20:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b7b22:	6818      	ldr	r0, [r3, #0]
   b7b24:	2800      	cmp	r0, #0
   b7b26:	db01      	blt.n	b7b2c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b7b28:	f7fd f910 	bl	b4d4c <sock_close>
   b7b2c:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b7b2e:	f04f 32ff 	mov.w	r2, #4294967295
   b7b32:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b7b34:	6960      	ldr	r0, [r4, #20]
   b7b36:	2211      	movs	r2, #17
   b7b38:	2100      	movs	r1, #0
   b7b3a:	308c      	adds	r0, #140	; 0x8c
   b7b3c:	f000 fd4a 	bl	b85d4 <memset>
    flush_buffer();
   b7b40:	4620      	mov	r0, r4
}
   b7b42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b7b46:	f7ff bf0b 	b.w	b7960 <_ZN9TCPClient12flush_bufferEv>

000b7b4a <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b7b4a:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b7b4c:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b7b4e:	4604      	mov	r4, r0
          total(0) {
   b7b50:	6001      	str	r1, [r0, #0]
   b7b52:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b7b56:	3088      	adds	r0, #136	; 0x88
   b7b58:	f7ff fbf0 	bl	b733c <_ZN9IPAddressC1Ev>
}
   b7b5c:	4620      	mov	r0, r4
   b7b5e:	bd10      	pop	{r4, pc}

000b7b60 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b7b60:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7b62:	2300      	movs	r3, #0
   b7b64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7b68:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b7b6c:	4a0e      	ldr	r2, [pc, #56]	; (b7ba8 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b7b6e:	6103      	str	r3, [r0, #16]
   b7b70:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7b72:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b7b74:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7b76:	20ac      	movs	r0, #172	; 0xac
   b7b78:	9101      	str	r1, [sp, #4]
   b7b7a:	f7fc fa9c 	bl	b40b6 <_Znwj>
	  auto __pi = ::new (__mem)
   b7b7e:	1e05      	subs	r5, r0, #0
   b7b80:	f105 060c 	add.w	r6, r5, #12
   b7b84:	d008      	beq.n	b7b98 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b7b86:	2301      	movs	r3, #1
   b7b88:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b7b8c:	4b07      	ldr	r3, [pc, #28]	; (b7bac <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b7b8e:	9901      	ldr	r1, [sp, #4]
   b7b90:	602b      	str	r3, [r5, #0]
   b7b92:	4630      	mov	r0, r6
   b7b94:	f7ff ffd9 	bl	b7b4a <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b7b98:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b7b9a:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b7b9e:	f7ff fedf 	bl	b7960 <_ZN9TCPClient12flush_bufferEv>
}
   b7ba2:	b002      	add	sp, #8
   b7ba4:	bd70      	pop	{r4, r5, r6, pc}
   b7ba6:	bf00      	nop
   b7ba8:	000b8d6c 	.word	0x000b8d6c
   b7bac:	000b8d50 	.word	0x000b8d50

000b7bb0 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b7bb0:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b7bb2:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b7bb6:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b7bb8:	f7ff ffd2 	bl	b7b60 <_ZN9TCPClientC1Ei>
}
   b7bbc:	4620      	mov	r0, r4
   b7bbe:	bd10      	pop	{r4, pc}

000b7bc0 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b7bc0:	b510      	push	{r4, lr}
   b7bc2:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b7bc4:	6800      	ldr	r0, [r0, #0]
   b7bc6:	2800      	cmp	r0, #0
   b7bc8:	db01      	blt.n	b7bce <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b7bca:	f7fd f8bf 	bl	b4d4c <sock_close>
    }
}
   b7bce:	4620      	mov	r0, r4
   b7bd0:	bd10      	pop	{r4, pc}

000b7bd2 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b7bd2:	300c      	adds	r0, #12
   b7bd4:	f7ff bff4 	b.w	b7bc0 <_ZN9TCPClient4DataD1Ev>

000b7bd8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7bd8:	2200      	movs	r2, #0
   b7bda:	6840      	ldr	r0, [r0, #4]
   b7bdc:	4611      	mov	r1, r2
   b7bde:	f7fd b9c9 	b.w	b4f74 <network_ready>

000b7be2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7be2:	2200      	movs	r2, #0
   b7be4:	6840      	ldr	r0, [r0, #4]
   b7be6:	4611      	mov	r1, r2
   b7be8:	f7fd b9e4 	b.w	b4fb4 <network_listening>

000b7bec <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7bec:	2200      	movs	r2, #0
   b7bee:	6840      	ldr	r0, [r0, #4]
   b7bf0:	4611      	mov	r1, r2
   b7bf2:	f7fd b9ef 	b.w	b4fd4 <network_get_listen_timeout>

000b7bf6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7bf6:	6840      	ldr	r0, [r0, #4]
   b7bf8:	2200      	movs	r2, #0
   b7bfa:	f7fd b9e3 	b.w	b4fc4 <network_set_listen_timeout>

000b7bfe <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7bfe:	6840      	ldr	r0, [r0, #4]
   b7c00:	2200      	movs	r2, #0
   b7c02:	f081 0101 	eor.w	r1, r1, #1
   b7c06:	f7fd b9cd 	b.w	b4fa4 <network_listen>

000b7c0a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7c0a:	2300      	movs	r3, #0
   b7c0c:	6840      	ldr	r0, [r0, #4]
   b7c0e:	461a      	mov	r2, r3
   b7c10:	4619      	mov	r1, r3
   b7c12:	f7fd b9bf 	b.w	b4f94 <network_off>

000b7c16 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7c16:	2300      	movs	r3, #0
   b7c18:	6840      	ldr	r0, [r0, #4]
   b7c1a:	461a      	mov	r2, r3
   b7c1c:	4619      	mov	r1, r3
   b7c1e:	f7fd b9b1 	b.w	b4f84 <network_on>

000b7c22 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7c22:	2200      	movs	r2, #0
   b7c24:	6840      	ldr	r0, [r0, #4]
   b7c26:	4611      	mov	r1, r2
   b7c28:	f7fd b994 	b.w	b4f54 <network_connecting>

000b7c2c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7c2c:	6840      	ldr	r0, [r0, #4]
   b7c2e:	2200      	movs	r2, #0
   b7c30:	2102      	movs	r1, #2
   b7c32:	f7fd b997 	b.w	b4f64 <network_disconnect>

000b7c36 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7c36:	2300      	movs	r3, #0
   b7c38:	6840      	ldr	r0, [r0, #4]
   b7c3a:	461a      	mov	r2, r3
   b7c3c:	f7fd b982 	b.w	b4f44 <network_connect>

000b7c40 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b7c40:	4b02      	ldr	r3, [pc, #8]	; (b7c4c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b7c42:	2204      	movs	r2, #4
   b7c44:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b7c46:	4a02      	ldr	r2, [pc, #8]	; (b7c50 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7c48:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b7c4a:	4770      	bx	lr
   b7c4c:	2003e718 	.word	0x2003e718
   b7c50:	000b8db8 	.word	0x000b8db8

000b7c54 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b7c54:	2300      	movs	r3, #0
   b7c56:	6840      	ldr	r0, [r0, #4]
   b7c58:	461a      	mov	r2, r3
   b7c5a:	f7fd b973 	b.w	b4f44 <network_connect>

000b7c5e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b7c5e:	6840      	ldr	r0, [r0, #4]
   b7c60:	2200      	movs	r2, #0
   b7c62:	2102      	movs	r1, #2
   b7c64:	f7fd b97e 	b.w	b4f64 <network_disconnect>

000b7c68 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7c68:	2200      	movs	r2, #0
   b7c6a:	6840      	ldr	r0, [r0, #4]
   b7c6c:	4611      	mov	r1, r2
   b7c6e:	f7fd b971 	b.w	b4f54 <network_connecting>

000b7c72 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b7c72:	2200      	movs	r2, #0
   b7c74:	6840      	ldr	r0, [r0, #4]
   b7c76:	4611      	mov	r1, r2
   b7c78:	f7fd b97c 	b.w	b4f74 <network_ready>

000b7c7c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7c7c:	2300      	movs	r3, #0
   b7c7e:	6840      	ldr	r0, [r0, #4]
   b7c80:	461a      	mov	r2, r3
   b7c82:	4619      	mov	r1, r3
   b7c84:	f7fd b97e 	b.w	b4f84 <network_on>

000b7c88 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7c88:	2300      	movs	r3, #0
   b7c8a:	6840      	ldr	r0, [r0, #4]
   b7c8c:	461a      	mov	r2, r3
   b7c8e:	4619      	mov	r1, r3
   b7c90:	f7fd b980 	b.w	b4f94 <network_off>

000b7c94 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b7c94:	6840      	ldr	r0, [r0, #4]
   b7c96:	2100      	movs	r1, #0
   b7c98:	f7fd b9a4 	b.w	b4fe4 <network_is_on>

000b7c9c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b7c9c:	6840      	ldr	r0, [r0, #4]
   b7c9e:	2100      	movs	r1, #0
   b7ca0:	f7fd b9a8 	b.w	b4ff4 <network_is_off>

000b7ca4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b7ca4:	6840      	ldr	r0, [r0, #4]
   b7ca6:	2200      	movs	r2, #0
   b7ca8:	f081 0101 	eor.w	r1, r1, #1
   b7cac:	f7fd b97a 	b.w	b4fa4 <network_listen>

000b7cb0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7cb0:	6840      	ldr	r0, [r0, #4]
   b7cb2:	2200      	movs	r2, #0
   b7cb4:	f7fd b986 	b.w	b4fc4 <network_set_listen_timeout>

000b7cb8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b7cb8:	2200      	movs	r2, #0
   b7cba:	6840      	ldr	r0, [r0, #4]
   b7cbc:	4611      	mov	r1, r2
   b7cbe:	f7fd b989 	b.w	b4fd4 <network_get_listen_timeout>

000b7cc2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b7cc2:	2200      	movs	r2, #0
   b7cc4:	6840      	ldr	r0, [r0, #4]
   b7cc6:	4611      	mov	r1, r2
   b7cc8:	f7fd b974 	b.w	b4fb4 <network_listening>

000b7ccc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b7ccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7cd0:	b095      	sub	sp, #84	; 0x54
   b7cd2:	4614      	mov	r4, r2
   b7cd4:	460d      	mov	r5, r1
   b7cd6:	4607      	mov	r7, r0
    IPAddress addr;
   b7cd8:	f7ff fb30 	bl	b733c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b7cdc:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b7cde:	221c      	movs	r2, #28
   b7ce0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b7ce2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b7ce4:	f000 fc76 	bl	b85d4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b7ce8:	2340      	movs	r3, #64	; 0x40
   b7cea:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b7cec:	4620      	mov	r0, r4
   b7cee:	466b      	mov	r3, sp
   b7cf0:	aa0c      	add	r2, sp, #48	; 0x30
   b7cf2:	2100      	movs	r1, #0
   b7cf4:	f7fc fece 	bl	b4a94 <netdb_getaddrinfo>
    if (!r) {
   b7cf8:	4604      	mov	r4, r0
   b7cfa:	2800      	cmp	r0, #0
   b7cfc:	d14b      	bne.n	b7d96 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7cfe:	4602      	mov	r2, r0
   b7d00:	2101      	movs	r1, #1
   b7d02:	6868      	ldr	r0, [r5, #4]
   b7d04:	f7fd f936 	bl	b4f74 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7d08:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7d0a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7d0c:	4622      	mov	r2, r4
   b7d0e:	6868      	ldr	r0, [r5, #4]
   b7d10:	f7fd f930 	bl	b4f74 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7d14:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7d16:	4681      	mov	r9, r0
        bool ok = false;
   b7d18:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7d1a:	2e00      	cmp	r6, #0
   b7d1c:	d03b      	beq.n	b7d96 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b7d1e:	2900      	cmp	r1, #0
   b7d20:	d139      	bne.n	b7d96 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b7d22:	6873      	ldr	r3, [r6, #4]
   b7d24:	2b02      	cmp	r3, #2
   b7d26:	d003      	beq.n	b7d30 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b7d28:	2b0a      	cmp	r3, #10
   b7d2a:	d011      	beq.n	b7d50 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7d2c:	69f6      	ldr	r6, [r6, #28]
   b7d2e:	e7f4      	b.n	b7d1a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b7d30:	f1b8 0f00 	cmp.w	r8, #0
   b7d34:	d0fa      	beq.n	b7d2c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b7d36:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b7d38:	a806      	add	r0, sp, #24
   b7d3a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b7d3c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b7d3e:	f7ff fb41 	bl	b73c4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7d42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7d44:	1d3c      	adds	r4, r7, #4
   b7d46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7d48:	682b      	ldr	r3, [r5, #0]
   b7d4a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7d4c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b7d4e:	e7ed      	b.n	b7d2c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b7d50:	f1b9 0f00 	cmp.w	r9, #0
   b7d54:	d0ea      	beq.n	b7d2c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b7d56:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7d58:	2210      	movs	r2, #16
   b7d5a:	a801      	add	r0, sp, #4
   b7d5c:	f000 fc3a 	bl	b85d4 <memset>
                    a.v = 6;
   b7d60:	2306      	movs	r3, #6
   b7d62:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7d66:	ad01      	add	r5, sp, #4
   b7d68:	f104 0308 	add.w	r3, r4, #8
   b7d6c:	3418      	adds	r4, #24
   b7d6e:	6818      	ldr	r0, [r3, #0]
   b7d70:	6859      	ldr	r1, [r3, #4]
   b7d72:	462a      	mov	r2, r5
   b7d74:	c203      	stmia	r2!, {r0, r1}
   b7d76:	3308      	adds	r3, #8
   b7d78:	42a3      	cmp	r3, r4
   b7d7a:	4615      	mov	r5, r2
   b7d7c:	d1f7      	bne.n	b7d6e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b7d7e:	a901      	add	r1, sp, #4
   b7d80:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b7d82:	ad07      	add	r5, sp, #28
   b7d84:	f7ff fae8 	bl	b7358 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7d88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7d8a:	1d3c      	adds	r4, r7, #4
   b7d8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7d8e:	682b      	ldr	r3, [r5, #0]
   b7d90:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7d92:	4649      	mov	r1, r9
   b7d94:	e7ca      	b.n	b7d2c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b7d96:	9800      	ldr	r0, [sp, #0]
   b7d98:	f7fc fe74 	bl	b4a84 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b7d9c:	4638      	mov	r0, r7
   b7d9e:	b015      	add	sp, #84	; 0x54
   b7da0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b7da4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b7da4:	4b02      	ldr	r3, [pc, #8]	; (b7db0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b7da6:	4a03      	ldr	r2, [pc, #12]	; (b7db4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b7da8:	601a      	str	r2, [r3, #0]
   b7daa:	2200      	movs	r2, #0
   b7dac:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b7dae:	4770      	bx	lr
   b7db0:	2003e720 	.word	0x2003e720
   b7db4:	000b8df4 	.word	0x000b8df4

000b7db8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b7db8:	f100 0310 	add.w	r3, r0, #16
   b7dbc:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b7dbe:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b7dc2:	2901      	cmp	r1, #1
   b7dc4:	4618      	mov	r0, r3
   b7dc6:	d108      	bne.n	b7dda <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b7dc8:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b7dcc:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b7dd0:	3a01      	subs	r2, #1
   b7dd2:	f103 0310 	add.w	r3, r3, #16
   b7dd6:	d1f2      	bne.n	b7dbe <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b7dd8:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b7dda:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b7ddc:	bf04      	itt	eq
   b7dde:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b7de2:	1852      	addeq	r2, r2, r1
   b7de4:	e7f4      	b.n	b7dd0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b7de6 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b7de6:	b40e      	push	{r1, r2, r3}
   b7de8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7dea:	b088      	sub	sp, #32
   b7dec:	af00      	add	r7, sp, #0
   b7dee:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7df2:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b7df4:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7df8:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b7dfa:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7dfc:	462b      	mov	r3, r5
   b7dfe:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b7e00:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7e02:	f7fd f91f 	bl	b5044 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b7e06:	280f      	cmp	r0, #15
   b7e08:	687a      	ldr	r2, [r7, #4]
   b7e0a:	d91a      	bls.n	b7e42 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b7e0c:	f100 0308 	add.w	r3, r0, #8
   b7e10:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b7e14:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b7e16:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7e1a:	1c41      	adds	r1, r0, #1
   b7e1c:	462b      	mov	r3, r5
   b7e1e:	4668      	mov	r0, sp
        va_start(args, fmt);
   b7e20:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7e22:	f7fd f90f 	bl	b5044 <vsnprintf>
        if (n > 0) {
   b7e26:	1e02      	subs	r2, r0, #0
   b7e28:	dd04      	ble.n	b7e34 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b7e2a:	6823      	ldr	r3, [r4, #0]
   b7e2c:	4669      	mov	r1, sp
   b7e2e:	689b      	ldr	r3, [r3, #8]
   b7e30:	4620      	mov	r0, r4
   b7e32:	4798      	blx	r3
   b7e34:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b7e36:	3720      	adds	r7, #32
   b7e38:	46bd      	mov	sp, r7
   b7e3a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7e3e:	b003      	add	sp, #12
   b7e40:	4770      	bx	lr
    } else if (n > 0) {
   b7e42:	2800      	cmp	r0, #0
   b7e44:	d0f7      	beq.n	b7e36 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b7e46:	6823      	ldr	r3, [r4, #0]
   b7e48:	4602      	mov	r2, r0
   b7e4a:	689b      	ldr	r3, [r3, #8]
   b7e4c:	f107 0110 	add.w	r1, r7, #16
   b7e50:	4620      	mov	r0, r4
   b7e52:	4798      	blx	r3
}
   b7e54:	e7ef      	b.n	b7e36 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b7e56 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b7e56:	b538      	push	{r3, r4, r5, lr}
   b7e58:	680b      	ldr	r3, [r1, #0]
   b7e5a:	6003      	str	r3, [r0, #0]
   b7e5c:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b7e5e:	6843      	ldr	r3, [r0, #4]
   b7e60:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b7e62:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b7e64:	d008      	beq.n	b7e78 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b7e66:	b115      	cbz	r5, b7e6e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b7e68:	686b      	ldr	r3, [r5, #4]
   b7e6a:	3301      	adds	r3, #1
   b7e6c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b7e6e:	6860      	ldr	r0, [r4, #4]
   b7e70:	b108      	cbz	r0, b7e76 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b7e72:	f7fd fb83 	bl	b557c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b7e76:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b7e78:	bd38      	pop	{r3, r4, r5, pc}

000b7e7a <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
   b7e7a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b7e7c:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b7e7e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b7e82:	689b      	ldr	r3, [r3, #8]
   b7e84:	2201      	movs	r2, #1
   b7e86:	f10d 0107 	add.w	r1, sp, #7
   b7e8a:	4798      	blx	r3
}
   b7e8c:	b003      	add	sp, #12
   b7e8e:	f85d fb04 	ldr.w	pc, [sp], #4

000b7e92 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b7e92:	460b      	mov	r3, r1
   b7e94:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b7e96:	2200      	movs	r2, #0
   b7e98:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b7e9a:	e9c0 2200 	strd	r2, r2, [r0]
   b7e9e:	4604      	mov	r4, r0
        t_ = t;
   b7ea0:	6083      	str	r3, [r0, #8]
    if (t) {
   b7ea2:	b90b      	cbnz	r3, b7ea8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b7ea4:	4620      	mov	r0, r4
   b7ea6:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b7ea8:	f7ff ffd5 	bl	b7e56 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b7eac:	e7fa      	b.n	b7ea4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b7eae <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b7eae:	6883      	ldr	r3, [r0, #8]
   b7eb0:	b1eb      	cbz	r3, b7eee <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b7eb2:	781a      	ldrb	r2, [r3, #0]
   b7eb4:	2a03      	cmp	r2, #3
   b7eb6:	d81a      	bhi.n	b7eee <_ZNK5spark9JSONValue4typeEv+0x40>
   b7eb8:	e8df f002 	tbb	[pc, r2]
   b7ebc:	1b021704 	.word	0x1b021704
   b7ec0:	2005      	movs	r0, #5
   b7ec2:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b7ec4:	6802      	ldr	r2, [r0, #0]
   b7ec6:	685b      	ldr	r3, [r3, #4]
   b7ec8:	6852      	ldr	r2, [r2, #4]
   b7eca:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b7ecc:	282d      	cmp	r0, #45	; 0x2d
   b7ece:	d012      	beq.n	b7ef6 <_ZNK5spark9JSONValue4typeEv+0x48>
   b7ed0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b7ed4:	2b09      	cmp	r3, #9
   b7ed6:	d90e      	bls.n	b7ef6 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b7ed8:	2874      	cmp	r0, #116	; 0x74
   b7eda:	d00e      	beq.n	b7efa <_ZNK5spark9JSONValue4typeEv+0x4c>
   b7edc:	2866      	cmp	r0, #102	; 0x66
   b7ede:	d00c      	beq.n	b7efa <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b7ee0:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b7ee4:	4258      	negs	r0, r3
   b7ee6:	4158      	adcs	r0, r3
   b7ee8:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b7eea:	2006      	movs	r0, #6
   b7eec:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b7eee:	2000      	movs	r0, #0
   b7ef0:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b7ef2:	2004      	movs	r0, #4
   b7ef4:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b7ef6:	2003      	movs	r0, #3
   b7ef8:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b7efa:	2002      	movs	r0, #2
}
   b7efc:	4770      	bx	lr

000b7efe <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b7efe:	b510      	push	{r4, lr}
   b7f00:	4604      	mov	r4, r0
    switch (type()) {
   b7f02:	f7ff ffd4 	bl	b7eae <_ZNK5spark9JSONValue4typeEv>
   b7f06:	2802      	cmp	r0, #2
   b7f08:	d00e      	beq.n	b7f28 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b7f0a:	1ec3      	subs	r3, r0, #3
   b7f0c:	b2db      	uxtb	r3, r3
   b7f0e:	2b01      	cmp	r3, #1
   b7f10:	d814      	bhi.n	b7f3c <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b7f12:	6822      	ldr	r2, [r4, #0]
   b7f14:	68a3      	ldr	r3, [r4, #8]
   b7f16:	6850      	ldr	r0, [r2, #4]
   b7f18:	685b      	ldr	r3, [r3, #4]
}
   b7f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b7f1e:	220a      	movs	r2, #10
   b7f20:	2100      	movs	r1, #0
   b7f22:	4418      	add	r0, r3
   b7f24:	f000 bc62 	b.w	b87ec <strtol>
        const char* const s = d_->json + t_->start;
   b7f28:	6822      	ldr	r2, [r4, #0]
   b7f2a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b7f2c:	6852      	ldr	r2, [r2, #4]
   b7f2e:	685b      	ldr	r3, [r3, #4]
   b7f30:	5cd0      	ldrb	r0, [r2, r3]
   b7f32:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b7f36:	4258      	negs	r0, r3
   b7f38:	4158      	adcs	r0, r3
}
   b7f3a:	bd10      	pop	{r4, pc}
    switch (type()) {
   b7f3c:	2000      	movs	r0, #0
   b7f3e:	e7fc      	b.n	b7f3a <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b7f40 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b7f40:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b7f42:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b7f44:	e9c0 3300 	strd	r3, r3, [r0]
   b7f48:	4604      	mov	r4, r0
        n_(0) {
   b7f4a:	480e      	ldr	r0, [pc, #56]	; (b7f84 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b7f4c:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b7f50:	b1a9      	cbz	r1, b7f7e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b7f52:	780b      	ldrb	r3, [r1, #0]
   b7f54:	2b03      	cmp	r3, #3
   b7f56:	d006      	beq.n	b7f66 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b7f58:	b98b      	cbnz	r3, b7f7e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b7f5a:	6813      	ldr	r3, [r2, #0]
   b7f5c:	6858      	ldr	r0, [r3, #4]
   b7f5e:	684b      	ldr	r3, [r1, #4]
   b7f60:	5cc3      	ldrb	r3, [r0, r3]
   b7f62:	2b6e      	cmp	r3, #110	; 0x6e
   b7f64:	d007      	beq.n	b7f76 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b7f66:	6813      	ldr	r3, [r2, #0]
   b7f68:	684d      	ldr	r5, [r1, #4]
   b7f6a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b7f6c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b7f6e:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b7f70:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b7f72:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b7f74:	60e3      	str	r3, [r4, #12]
   b7f76:	4611      	mov	r1, r2
   b7f78:	4620      	mov	r0, r4
   b7f7a:	f7ff ff6c 	bl	b7e56 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b7f7e:	4620      	mov	r0, r4
   b7f80:	bd38      	pop	{r3, r4, r5, pc}
   b7f82:	bf00      	nop
   b7f84:	000b8be6 	.word	0x000b8be6

000b7f88 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b7f88:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b7f8a:	2500      	movs	r5, #0
   b7f8c:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b7f8e:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b7f92:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b7f96:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b7f9a:	4604      	mov	r4, r0
   b7f9c:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b7f9e:	b14b      	cbz	r3, b7fb4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b7fa0:	781a      	ldrb	r2, [r3, #0]
   b7fa2:	2a01      	cmp	r2, #1
   b7fa4:	d106      	bne.n	b7fb4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b7fa6:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b7faa:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b7fac:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b7fae:	6143      	str	r3, [r0, #20]
   b7fb0:	f7ff ff51 	bl	b7e56 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b7fb4:	4620      	mov	r0, r4
   b7fb6:	bd38      	pop	{r3, r4, r5, pc}

000b7fb8 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b7fb8:	b510      	push	{r4, lr}
    if (!n_) {
   b7fba:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b7fbc:	4604      	mov	r4, r0
    if (!n_) {
   b7fbe:	b163      	cbz	r3, b7fda <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b7fc0:	6880      	ldr	r0, [r0, #8]
   b7fc2:	60e0      	str	r0, [r4, #12]
    --n_;
   b7fc4:	3b01      	subs	r3, #1
    ++t_;
   b7fc6:	3010      	adds	r0, #16
   b7fc8:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b7fca:	6120      	str	r0, [r4, #16]
    --n_;
   b7fcc:	6163      	str	r3, [r4, #20]
    if (n_) {
   b7fce:	b113      	cbz	r3, b7fd6 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b7fd0:	f7ff fef2 	bl	b7db8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b7fd4:	60a0      	str	r0, [r4, #8]
    return true;
   b7fd6:	2001      	movs	r0, #1
   b7fd8:	e000      	b.n	b7fdc <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b7fda:	4618      	mov	r0, r3
}
   b7fdc:	bd10      	pop	{r4, pc}

000b7fde <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b7fde:	b510      	push	{r4, lr}
    write('}');
   b7fe0:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b7fe2:	4604      	mov	r4, r0
    write('}');
   b7fe4:	f7ff ff49 	bl	b7e7a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b7fe8:	2301      	movs	r3, #1
   b7fea:	7123      	strb	r3, [r4, #4]
}
   b7fec:	4620      	mov	r0, r4
   b7fee:	bd10      	pop	{r4, pc}

000b7ff0 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b7ff0:	b508      	push	{r3, lr}
    switch (state_) {
   b7ff2:	7903      	ldrb	r3, [r0, #4]
   b7ff4:	2b01      	cmp	r3, #1
   b7ff6:	d002      	beq.n	b7ffe <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b7ff8:	2b02      	cmp	r3, #2
   b7ffa:	d004      	beq.n	b8006 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b7ffc:	bd08      	pop	{r3, pc}
        write(',');
   b7ffe:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b8000:	f7ff ff3b 	bl	b7e7a <_ZN5spark10JSONWriter5writeEc>
}
   b8004:	e7fa      	b.n	b7ffc <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b8006:	213a      	movs	r1, #58	; 0x3a
   b8008:	e7fa      	b.n	b8000 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b800a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b800a:	b510      	push	{r4, lr}
   b800c:	4604      	mov	r4, r0
    writeSeparator();
   b800e:	f7ff ffef 	bl	b7ff0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b8012:	4620      	mov	r0, r4
   b8014:	217b      	movs	r1, #123	; 0x7b
   b8016:	f7ff ff30 	bl	b7e7a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b801a:	2300      	movs	r3, #0
   b801c:	7123      	strb	r3, [r4, #4]
}
   b801e:	4620      	mov	r0, r4
   b8020:	bd10      	pop	{r4, pc}
	...

000b8024 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b8024:	b513      	push	{r0, r1, r4, lr}
   b8026:	4604      	mov	r4, r0
   b8028:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b802a:	f7ff ffe1 	bl	b7ff0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b802e:	6823      	ldr	r3, [r4, #0]
   b8030:	9a01      	ldr	r2, [sp, #4]
   b8032:	68db      	ldr	r3, [r3, #12]
   b8034:	4903      	ldr	r1, [pc, #12]	; (b8044 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b8036:	4620      	mov	r0, r4
   b8038:	4798      	blx	r3
    state_ = NEXT;
   b803a:	2301      	movs	r3, #1
}
   b803c:	4620      	mov	r0, r4
    state_ = NEXT;
   b803e:	7123      	strb	r3, [r4, #4]
}
   b8040:	b002      	add	sp, #8
   b8042:	bd10      	pop	{r4, pc}
   b8044:	000b8d44 	.word	0x000b8d44

000b8048 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b8048:	b513      	push	{r0, r1, r4, lr}
   b804a:	4604      	mov	r4, r0
   b804c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b804e:	f7ff ffcf 	bl	b7ff0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b8052:	6823      	ldr	r3, [r4, #0]
   b8054:	9a01      	ldr	r2, [sp, #4]
   b8056:	68db      	ldr	r3, [r3, #12]
   b8058:	4903      	ldr	r1, [pc, #12]	; (b8068 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b805a:	4620      	mov	r0, r4
   b805c:	4798      	blx	r3
    state_ = NEXT;
   b805e:	2301      	movs	r3, #1
}
   b8060:	4620      	mov	r0, r4
    state_ = NEXT;
   b8062:	7123      	strb	r3, [r4, #4]
}
   b8064:	b002      	add	sp, #8
   b8066:	bd10      	pop	{r4, pc}
   b8068:	000b8e28 	.word	0x000b8e28

000b806c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b806c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8070:	460d      	mov	r5, r1
    write('"');
   b8072:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b8074:	4690      	mov	r8, r2
   b8076:	4604      	mov	r4, r0
    write('"');
   b8078:	f7ff feff 	bl	b7e7a <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b807c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b8124 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b8080:	44a8      	add	r8, r5
    const char *s = str;
   b8082:	462f      	mov	r7, r5
    while (s != end) {
   b8084:	4547      	cmp	r7, r8
   b8086:	46ba      	mov	sl, r7
   b8088:	d03d      	beq.n	b8106 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b808a:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b808e:	2e22      	cmp	r6, #34	; 0x22
   b8090:	d006      	beq.n	b80a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b8092:	2e5c      	cmp	r6, #92	; 0x5c
   b8094:	d004      	beq.n	b80a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b8096:	4630      	mov	r0, r6
   b8098:	f000 fa5c 	bl	b8554 <isprint>
   b809c:	2800      	cmp	r0, #0
   b809e:	d1f1      	bne.n	b8084 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b80a0:	6823      	ldr	r3, [r4, #0]
   b80a2:	ebaa 0205 	sub.w	r2, sl, r5
   b80a6:	689b      	ldr	r3, [r3, #8]
   b80a8:	4629      	mov	r1, r5
   b80aa:	4620      	mov	r0, r4
   b80ac:	4798      	blx	r3
            write('\\');
   b80ae:	215c      	movs	r1, #92	; 0x5c
   b80b0:	4620      	mov	r0, r4
   b80b2:	f7ff fee2 	bl	b7e7a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b80b6:	2e0d      	cmp	r6, #13
   b80b8:	d80a      	bhi.n	b80d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b80ba:	2e07      	cmp	r6, #7
   b80bc:	d91c      	bls.n	b80f8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b80be:	f1a6 0308 	sub.w	r3, r6, #8
   b80c2:	2b05      	cmp	r3, #5
   b80c4:	d818      	bhi.n	b80f8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b80c6:	e8df f003 	tbb	[pc, r3]
   b80ca:	0f0d      	.short	0x0f0d
   b80cc:	15131711 	.word	0x15131711
   b80d0:	2e22      	cmp	r6, #34	; 0x22
   b80d2:	d001      	beq.n	b80d8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b80d4:	2e5c      	cmp	r6, #92	; 0x5c
   b80d6:	d10f      	bne.n	b80f8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b80d8:	4631      	mov	r1, r6
                write('b');
   b80da:	4620      	mov	r0, r4
   b80dc:	f7ff fecd 	bl	b7e7a <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b80e0:	463d      	mov	r5, r7
    while (s != end) {
   b80e2:	e7cf      	b.n	b8084 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b80e4:	2162      	movs	r1, #98	; 0x62
   b80e6:	e7f8      	b.n	b80da <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b80e8:	2174      	movs	r1, #116	; 0x74
   b80ea:	e7f6      	b.n	b80da <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b80ec:	216e      	movs	r1, #110	; 0x6e
   b80ee:	e7f4      	b.n	b80da <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b80f0:	2166      	movs	r1, #102	; 0x66
   b80f2:	e7f2      	b.n	b80da <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b80f4:	2172      	movs	r1, #114	; 0x72
   b80f6:	e7f0      	b.n	b80da <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b80f8:	6823      	ldr	r3, [r4, #0]
   b80fa:	4632      	mov	r2, r6
   b80fc:	68db      	ldr	r3, [r3, #12]
   b80fe:	4649      	mov	r1, r9
   b8100:	4620      	mov	r0, r4
   b8102:	4798      	blx	r3
                break;
   b8104:	e7ec      	b.n	b80e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b8106:	42bd      	cmp	r5, r7
   b8108:	d005      	beq.n	b8116 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b810a:	6823      	ldr	r3, [r4, #0]
   b810c:	1b7a      	subs	r2, r7, r5
   b810e:	689b      	ldr	r3, [r3, #8]
   b8110:	4629      	mov	r1, r5
   b8112:	4620      	mov	r0, r4
   b8114:	4798      	blx	r3
    }
    write('"');
   b8116:	2122      	movs	r1, #34	; 0x22
   b8118:	4620      	mov	r0, r4
   b811a:	f7ff feae 	bl	b7e7a <_ZN5spark10JSONWriter5writeEc>
}
   b811e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8122:	bf00      	nop
   b8124:	000b8e2b 	.word	0x000b8e2b

000b8128 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b8128:	b513      	push	{r0, r1, r4, lr}
   b812a:	4604      	mov	r4, r0
   b812c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b8130:	f7ff ff5e 	bl	b7ff0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b8134:	4620      	mov	r0, r4
   b8136:	e9dd 2100 	ldrd	r2, r1, [sp]
   b813a:	f7ff ff97 	bl	b806c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b813e:	2302      	movs	r3, #2
}
   b8140:	4620      	mov	r0, r4
    state_ = VALUE;
   b8142:	7123      	strb	r3, [r4, #4]
}
   b8144:	b002      	add	sp, #8
   b8146:	bd10      	pop	{r4, pc}

000b8148 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b8148:	b513      	push	{r0, r1, r4, lr}
   b814a:	4604      	mov	r4, r0
   b814c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b8150:	f7ff ff4e 	bl	b7ff0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b8154:	4620      	mov	r0, r4
   b8156:	e9dd 2100 	ldrd	r2, r1, [sp]
   b815a:	f7ff ff87 	bl	b806c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b815e:	2301      	movs	r3, #1
}
   b8160:	4620      	mov	r0, r4
    state_ = NEXT;
   b8162:	7123      	strb	r3, [r4, #4]
}
   b8164:	b002      	add	sp, #8
   b8166:	bd10      	pop	{r4, pc}

000b8168 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b8168:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b816a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b816c:	d902      	bls.n	b8174 <pinAvailable+0xc>
    return false;
   b816e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b8170:	b002      	add	sp, #8
   b8172:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b8174:	f1a0 030b 	sub.w	r3, r0, #11
   b8178:	2b02      	cmp	r3, #2
   b817a:	d81a      	bhi.n	b81b2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b817c:	4c17      	ldr	r4, [pc, #92]	; (b81dc <pinAvailable+0x74>)
   b817e:	7821      	ldrb	r1, [r4, #0]
   b8180:	f3bf 8f5b 	dmb	ish
   b8184:	f011 0101 	ands.w	r1, r1, #1
   b8188:	d10b      	bne.n	b81a2 <pinAvailable+0x3a>
   b818a:	4620      	mov	r0, r4
   b818c:	9101      	str	r1, [sp, #4]
   b818e:	f7fb ffa7 	bl	b40e0 <__cxa_guard_acquire>
   b8192:	9901      	ldr	r1, [sp, #4]
   b8194:	b128      	cbz	r0, b81a2 <pinAvailable+0x3a>
   b8196:	4812      	ldr	r0, [pc, #72]	; (b81e0 <pinAvailable+0x78>)
   b8198:	f7fc ffc0 	bl	b511c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b819c:	4620      	mov	r0, r4
   b819e:	f7fb ffa4 	bl	b40ea <__cxa_guard_release>
   b81a2:	4b0f      	ldr	r3, [pc, #60]	; (b81e0 <pinAvailable+0x78>)
   b81a4:	7818      	ldrb	r0, [r3, #0]
   b81a6:	f7fc fe11 	bl	b4dcc <hal_spi_is_enabled>
   b81aa:	2800      	cmp	r0, #0
   b81ac:	d1df      	bne.n	b816e <pinAvailable+0x6>
  return true; // 'pin' is available
   b81ae:	2001      	movs	r0, #1
   b81b0:	e7de      	b.n	b8170 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b81b2:	2801      	cmp	r0, #1
   b81b4:	d809      	bhi.n	b81ca <pinAvailable+0x62>
   b81b6:	f000 f889 	bl	b82cc <_Z19__fetch_global_Wirev>
   b81ba:	2100      	movs	r1, #0
   b81bc:	7c00      	ldrb	r0, [r0, #16]
   b81be:	f7fc fdad 	bl	b4d1c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b81c2:	f080 0001 	eor.w	r0, r0, #1
   b81c6:	b2c0      	uxtb	r0, r0
   b81c8:	e7d2      	b.n	b8170 <pinAvailable+0x8>
   b81ca:	3809      	subs	r0, #9
   b81cc:	2801      	cmp	r0, #1
   b81ce:	d8ee      	bhi.n	b81ae <pinAvailable+0x46>
   b81d0:	f000 f83c 	bl	b824c <_Z22__fetch_global_Serial1v>
   b81d4:	7c00      	ldrb	r0, [r0, #16]
   b81d6:	f7fc fd59 	bl	b4c8c <hal_usart_is_enabled>
   b81da:	e7f2      	b.n	b81c2 <pinAvailable+0x5a>
   b81dc:	2003e5b0 	.word	0x2003e5b0
   b81e0:	2003e5b4 	.word	0x2003e5b4

000b81e4 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b81e4:	b538      	push	{r3, r4, r5, lr}
   b81e6:	4604      	mov	r4, r0
   b81e8:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b81ea:	f7fc fc5b 	bl	b4aa4 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b81ee:	28ff      	cmp	r0, #255	; 0xff
   b81f0:	d010      	beq.n	b8214 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b81f2:	2806      	cmp	r0, #6
   b81f4:	d804      	bhi.n	b8200 <digitalWrite+0x1c>
   b81f6:	234d      	movs	r3, #77	; 0x4d
   b81f8:	fa23 f000 	lsr.w	r0, r3, r0
   b81fc:	07c3      	lsls	r3, r0, #31
   b81fe:	d409      	bmi.n	b8214 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b8200:	4620      	mov	r0, r4
   b8202:	f7ff ffb1 	bl	b8168 <pinAvailable>
   b8206:	b128      	cbz	r0, b8214 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b8208:	4629      	mov	r1, r5
   b820a:	4620      	mov	r0, r4
}
   b820c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b8210:	f7fc bc50 	b.w	b4ab4 <hal_gpio_write>
}
   b8214:	bd38      	pop	{r3, r4, r5, pc}

000b8216 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8216:	4770      	bx	lr

000b8218 <_Z20acquireSerial1Bufferv>:
{
   b8218:	b538      	push	{r3, r4, r5, lr}
   b821a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b821c:	2514      	movs	r5, #20
   b821e:	462a      	mov	r2, r5
   b8220:	2100      	movs	r1, #0
   b8222:	f000 f9d7 	bl	b85d4 <memset>
   b8226:	8025      	strh	r5, [r4, #0]
   b8228:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b822a:	4907      	ldr	r1, [pc, #28]	; (b8248 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b822c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b822e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b8230:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8232:	f000 f871 	bl	b8318 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8236:	4904      	ldr	r1, [pc, #16]	; (b8248 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b8238:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b823a:	4628      	mov	r0, r5
   b823c:	f000 f86c 	bl	b8318 <_ZnajRKSt9nothrow_t>
    };
   b8240:	60e0      	str	r0, [r4, #12]
}
   b8242:	4620      	mov	r0, r4
   b8244:	bd38      	pop	{r3, r4, r5, pc}
   b8246:	bf00      	nop
   b8248:	000b8e31 	.word	0x000b8e31

000b824c <_Z22__fetch_global_Serial1v>:
{
   b824c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b824e:	4d0e      	ldr	r5, [pc, #56]	; (b8288 <_Z22__fetch_global_Serial1v+0x3c>)
   b8250:	7829      	ldrb	r1, [r5, #0]
   b8252:	f3bf 8f5b 	dmb	ish
   b8256:	f011 0401 	ands.w	r4, r1, #1
{
   b825a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b825c:	d111      	bne.n	b8282 <_Z22__fetch_global_Serial1v+0x36>
   b825e:	4628      	mov	r0, r5
   b8260:	f7fb ff3e 	bl	b40e0 <__cxa_guard_acquire>
   b8264:	b168      	cbz	r0, b8282 <_Z22__fetch_global_Serial1v+0x36>
   b8266:	a801      	add	r0, sp, #4
   b8268:	f7ff ffd6 	bl	b8218 <_Z20acquireSerial1Bufferv>
   b826c:	aa01      	add	r2, sp, #4
   b826e:	4621      	mov	r1, r4
   b8270:	4806      	ldr	r0, [pc, #24]	; (b828c <_Z22__fetch_global_Serial1v+0x40>)
   b8272:	f7ff f97d 	bl	b7570 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b8276:	4628      	mov	r0, r5
   b8278:	f7fb ff37 	bl	b40ea <__cxa_guard_release>
   b827c:	4804      	ldr	r0, [pc, #16]	; (b8290 <_Z22__fetch_global_Serial1v+0x44>)
   b827e:	f000 f963 	bl	b8548 <atexit>
    return serial1;
}
   b8282:	4802      	ldr	r0, [pc, #8]	; (b828c <_Z22__fetch_global_Serial1v+0x40>)
   b8284:	b007      	add	sp, #28
   b8286:	bd30      	pop	{r4, r5, pc}
   b8288:	2003e728 	.word	0x2003e728
   b828c:	2003e72c 	.word	0x2003e72c
   b8290:	000b8217 	.word	0x000b8217

000b8294 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8294:	4770      	bx	lr
	...

000b8298 <_Z17acquireWireBufferv>:
{
   b8298:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b829a:	4b0a      	ldr	r3, [pc, #40]	; (b82c4 <_Z17acquireWireBufferv+0x2c>)
   b829c:	6003      	str	r3, [r0, #0]
   b829e:	2301      	movs	r3, #1
{
   b82a0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b82a2:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b82a4:	4908      	ldr	r1, [pc, #32]	; (b82c8 <_Z17acquireWireBufferv+0x30>)
   b82a6:	2020      	movs	r0, #32
   b82a8:	f000 f836 	bl	b8318 <_ZnajRKSt9nothrow_t>
	};
   b82ac:	2520      	movs	r5, #32
   b82ae:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b82b0:	4905      	ldr	r1, [pc, #20]	; (b82c8 <_Z17acquireWireBufferv+0x30>)
	};
   b82b2:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b82b4:	4628      	mov	r0, r5
   b82b6:	f000 f82f 	bl	b8318 <_ZnajRKSt9nothrow_t>
	};
   b82ba:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b82be:	4620      	mov	r0, r4
   b82c0:	bd38      	pop	{r3, r4, r5, pc}
   b82c2:	bf00      	nop
   b82c4:	00010018 	.word	0x00010018
   b82c8:	000b8e31 	.word	0x000b8e31

000b82cc <_Z19__fetch_global_Wirev>:
{
   b82cc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b82ce:	4d0e      	ldr	r5, [pc, #56]	; (b8308 <_Z19__fetch_global_Wirev+0x3c>)
   b82d0:	7829      	ldrb	r1, [r5, #0]
   b82d2:	f3bf 8f5b 	dmb	ish
   b82d6:	f011 0401 	ands.w	r4, r1, #1
{
   b82da:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b82dc:	d111      	bne.n	b8302 <_Z19__fetch_global_Wirev+0x36>
   b82de:	4628      	mov	r0, r5
   b82e0:	f7fb fefe 	bl	b40e0 <__cxa_guard_acquire>
   b82e4:	b168      	cbz	r0, b8302 <_Z19__fetch_global_Wirev+0x36>
   b82e6:	4668      	mov	r0, sp
   b82e8:	f7ff ffd6 	bl	b8298 <_Z17acquireWireBufferv>
   b82ec:	466a      	mov	r2, sp
   b82ee:	4621      	mov	r1, r4
   b82f0:	4806      	ldr	r0, [pc, #24]	; (b830c <_Z19__fetch_global_Wirev+0x40>)
   b82f2:	f7ff f987 	bl	b7604 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b82f6:	4628      	mov	r0, r5
   b82f8:	f7fb fef7 	bl	b40ea <__cxa_guard_release>
   b82fc:	4804      	ldr	r0, [pc, #16]	; (b8310 <_Z19__fetch_global_Wirev+0x44>)
   b82fe:	f000 f923 	bl	b8548 <atexit>
	return wire;
}
   b8302:	4802      	ldr	r0, [pc, #8]	; (b830c <_Z19__fetch_global_Wirev+0x40>)
   b8304:	b007      	add	sp, #28
   b8306:	bd30      	pop	{r4, r5, pc}
   b8308:	2003e744 	.word	0x2003e744
   b830c:	2003e748 	.word	0x2003e748
   b8310:	000b8295 	.word	0x000b8295

000b8314 <_ZnwjRKSt9nothrow_t>:
   b8314:	f7fb becf 	b.w	b40b6 <_Znwj>

000b8318 <_ZnajRKSt9nothrow_t>:
   b8318:	f7fb becf 	b.w	b40ba <_Znaj>

000b831c <_ZSt25__throw_bad_function_callv>:
   b831c:	b508      	push	{r3, lr}
   b831e:	f7fc fe99 	bl	b5054 <abort>
	...

000b8324 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b8324:	4901      	ldr	r1, [pc, #4]	; (b832c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b8326:	f000 b8f9 	b.w	b851c <_ZNKSt9type_infoeqERKS_>
   b832a:	bf00      	nop
   b832c:	000b8e4c 	.word	0x000b8e4c

000b8330 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b8330:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b8332:	2400      	movs	r4, #0
   b8334:	2310      	movs	r3, #16
   b8336:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b833a:	6803      	ldr	r3, [r0, #0]
   b833c:	4615      	mov	r5, r2
   b833e:	699e      	ldr	r6, [r3, #24]
   b8340:	6812      	ldr	r2, [r2, #0]
   b8342:	466b      	mov	r3, sp
   b8344:	e9cd 4400 	strd	r4, r4, [sp]
   b8348:	47b0      	blx	r6
   b834a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b834e:	f003 0306 	and.w	r3, r3, #6
   b8352:	2b06      	cmp	r3, #6
   b8354:	bf03      	ittte	eq
   b8356:	9b00      	ldreq	r3, [sp, #0]
   b8358:	602b      	streq	r3, [r5, #0]
   b835a:	2001      	moveq	r0, #1
   b835c:	4620      	movne	r0, r4
   b835e:	b004      	add	sp, #16
   b8360:	bd70      	pop	{r4, r5, r6, pc}

000b8362 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b8362:	9800      	ldr	r0, [sp, #0]
   b8364:	4290      	cmp	r0, r2
   b8366:	bf14      	ite	ne
   b8368:	2001      	movne	r0, #1
   b836a:	2006      	moveq	r0, #6
   b836c:	4770      	bx	lr
	...

000b8370 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b8370:	b510      	push	{r4, lr}
   b8372:	4b03      	ldr	r3, [pc, #12]	; (b8380 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b8374:	6003      	str	r3, [r0, #0]
   b8376:	4604      	mov	r4, r0
   b8378:	f000 f8cd 	bl	b8516 <_ZNSt9type_infoD1Ev>
   b837c:	4620      	mov	r0, r4
   b837e:	bd10      	pop	{r4, pc}
   b8380:	000b8e8c 	.word	0x000b8e8c

000b8384 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b8384:	b510      	push	{r4, lr}
   b8386:	4604      	mov	r4, r0
   b8388:	f7ff fff2 	bl	b8370 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b838c:	4620      	mov	r0, r4
   b838e:	2108      	movs	r1, #8
   b8390:	f7fb fe97 	bl	b40c2 <_ZdlPvj>
   b8394:	4620      	mov	r0, r4
   b8396:	bd10      	pop	{r4, pc}

000b8398 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b8398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b839c:	461f      	mov	r7, r3
   b839e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b83a2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b83a6:	4598      	cmp	r8, r3
   b83a8:	4606      	mov	r6, r0
   b83aa:	4615      	mov	r5, r2
   b83ac:	d107      	bne.n	b83be <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b83ae:	9907      	ldr	r1, [sp, #28]
   b83b0:	f000 f8b4 	bl	b851c <_ZNKSt9type_infoeqERKS_>
   b83b4:	b118      	cbz	r0, b83be <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b83b6:	7165      	strb	r5, [r4, #5]
   b83b8:	2000      	movs	r0, #0
   b83ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b83be:	4639      	mov	r1, r7
   b83c0:	4630      	mov	r0, r6
   b83c2:	f000 f8ab 	bl	b851c <_ZNKSt9type_infoeqERKS_>
   b83c6:	2800      	cmp	r0, #0
   b83c8:	d0f6      	beq.n	b83b8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b83ca:	2301      	movs	r3, #1
   b83cc:	f8c4 8000 	str.w	r8, [r4]
   b83d0:	7125      	strb	r5, [r4, #4]
   b83d2:	71a3      	strb	r3, [r4, #6]
   b83d4:	e7f0      	b.n	b83b8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b83d6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b83d6:	b538      	push	{r3, r4, r5, lr}
   b83d8:	4615      	mov	r5, r2
   b83da:	461c      	mov	r4, r3
   b83dc:	f000 f89e 	bl	b851c <_ZNKSt9type_infoeqERKS_>
   b83e0:	b120      	cbz	r0, b83ec <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b83e2:	2308      	movs	r3, #8
   b83e4:	60e3      	str	r3, [r4, #12]
   b83e6:	2306      	movs	r3, #6
   b83e8:	6025      	str	r5, [r4, #0]
   b83ea:	7123      	strb	r3, [r4, #4]
   b83ec:	bd38      	pop	{r3, r4, r5, pc}

000b83ee <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b83ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b83f0:	4605      	mov	r5, r0
   b83f2:	460c      	mov	r4, r1
   b83f4:	9201      	str	r2, [sp, #4]
   b83f6:	461e      	mov	r6, r3
   b83f8:	f000 f890 	bl	b851c <_ZNKSt9type_infoeqERKS_>
   b83fc:	b950      	cbnz	r0, b8414 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b83fe:	2e03      	cmp	r6, #3
   b8400:	d808      	bhi.n	b8414 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b8402:	6823      	ldr	r3, [r4, #0]
   b8404:	9a01      	ldr	r2, [sp, #4]
   b8406:	695b      	ldr	r3, [r3, #20]
   b8408:	4629      	mov	r1, r5
   b840a:	4620      	mov	r0, r4
   b840c:	b002      	add	sp, #8
   b840e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b8412:	4718      	bx	r3
   b8414:	b002      	add	sp, #8
   b8416:	bd70      	pop	{r4, r5, r6, pc}

000b8418 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b8418:	b510      	push	{r4, lr}
   b841a:	4b03      	ldr	r3, [pc, #12]	; (b8428 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b841c:	6003      	str	r3, [r0, #0]
   b841e:	4604      	mov	r4, r0
   b8420:	f7ff ffa6 	bl	b8370 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8424:	4620      	mov	r0, r4
   b8426:	bd10      	pop	{r4, pc}
   b8428:	000b8eec 	.word	0x000b8eec

000b842c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b842c:	b510      	push	{r4, lr}
   b842e:	4604      	mov	r4, r0
   b8430:	f7ff fff2 	bl	b8418 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b8434:	4620      	mov	r0, r4
   b8436:	210c      	movs	r1, #12
   b8438:	f7fb fe43 	bl	b40c2 <_ZdlPvj>
   b843c:	4620      	mov	r0, r4
   b843e:	bd10      	pop	{r4, pc}

000b8440 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b8440:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b8442:	9f08      	ldr	r7, [sp, #32]
   b8444:	4297      	cmp	r7, r2
   b8446:	4605      	mov	r5, r0
   b8448:	460e      	mov	r6, r1
   b844a:	4614      	mov	r4, r2
   b844c:	d00a      	beq.n	b8464 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b844e:	68a8      	ldr	r0, [r5, #8]
   b8450:	6802      	ldr	r2, [r0, #0]
   b8452:	9708      	str	r7, [sp, #32]
   b8454:	6a15      	ldr	r5, [r2, #32]
   b8456:	4631      	mov	r1, r6
   b8458:	4622      	mov	r2, r4
   b845a:	46ac      	mov	ip, r5
   b845c:	b003      	add	sp, #12
   b845e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b8462:	4760      	bx	ip
   b8464:	4619      	mov	r1, r3
   b8466:	9301      	str	r3, [sp, #4]
   b8468:	f000 f858 	bl	b851c <_ZNKSt9type_infoeqERKS_>
   b846c:	9b01      	ldr	r3, [sp, #4]
   b846e:	2800      	cmp	r0, #0
   b8470:	d0ed      	beq.n	b844e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b8472:	2006      	movs	r0, #6
   b8474:	b003      	add	sp, #12
   b8476:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8478 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b8478:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b847c:	460d      	mov	r5, r1
   b847e:	4619      	mov	r1, r3
   b8480:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b8484:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b8488:	4681      	mov	r9, r0
   b848a:	4617      	mov	r7, r2
   b848c:	4698      	mov	r8, r3
   b848e:	f000 f845 	bl	b851c <_ZNKSt9type_infoeqERKS_>
   b8492:	b190      	cbz	r0, b84ba <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b8494:	2d00      	cmp	r5, #0
   b8496:	6034      	str	r4, [r6, #0]
   b8498:	7137      	strb	r7, [r6, #4]
   b849a:	db09      	blt.n	b84b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b849c:	1961      	adds	r1, r4, r5
   b849e:	458a      	cmp	sl, r1
   b84a0:	bf0c      	ite	eq
   b84a2:	2106      	moveq	r1, #6
   b84a4:	2101      	movne	r1, #1
   b84a6:	71b1      	strb	r1, [r6, #6]
   b84a8:	2000      	movs	r0, #0
   b84aa:	b001      	add	sp, #4
   b84ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b84b0:	3502      	adds	r5, #2
   b84b2:	d1f9      	bne.n	b84a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b84b4:	2301      	movs	r3, #1
   b84b6:	71b3      	strb	r3, [r6, #6]
   b84b8:	e7f6      	b.n	b84a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b84ba:	4554      	cmp	r4, sl
   b84bc:	d106      	bne.n	b84cc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b84be:	4659      	mov	r1, fp
   b84c0:	4648      	mov	r0, r9
   b84c2:	f000 f82b 	bl	b851c <_ZNKSt9type_infoeqERKS_>
   b84c6:	b108      	cbz	r0, b84cc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b84c8:	7177      	strb	r7, [r6, #5]
   b84ca:	e7ed      	b.n	b84a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b84cc:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b84d0:	6803      	ldr	r3, [r0, #0]
   b84d2:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b84d6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b84da:	69dc      	ldr	r4, [r3, #28]
   b84dc:	463a      	mov	r2, r7
   b84de:	4643      	mov	r3, r8
   b84e0:	4629      	mov	r1, r5
   b84e2:	46a4      	mov	ip, r4
   b84e4:	b001      	add	sp, #4
   b84e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b84ea:	4760      	bx	ip

000b84ec <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b84ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b84f0:	4607      	mov	r7, r0
   b84f2:	460c      	mov	r4, r1
   b84f4:	4615      	mov	r5, r2
   b84f6:	461e      	mov	r6, r3
   b84f8:	f7ff ff6d 	bl	b83d6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b84fc:	b948      	cbnz	r0, b8512 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b84fe:	68b8      	ldr	r0, [r7, #8]
   b8500:	6803      	ldr	r3, [r0, #0]
   b8502:	699f      	ldr	r7, [r3, #24]
   b8504:	462a      	mov	r2, r5
   b8506:	4633      	mov	r3, r6
   b8508:	4621      	mov	r1, r4
   b850a:	46bc      	mov	ip, r7
   b850c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b8510:	4760      	bx	ip
   b8512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8516 <_ZNSt9type_infoD1Ev>:
   b8516:	4770      	bx	lr

000b8518 <_ZNKSt9type_info14__is_pointer_pEv>:
   b8518:	2000      	movs	r0, #0
   b851a:	4770      	bx	lr

000b851c <_ZNKSt9type_infoeqERKS_>:
   b851c:	4281      	cmp	r1, r0
   b851e:	b508      	push	{r3, lr}
   b8520:	d00e      	beq.n	b8540 <_ZNKSt9type_infoeqERKS_+0x24>
   b8522:	6840      	ldr	r0, [r0, #4]
   b8524:	7803      	ldrb	r3, [r0, #0]
   b8526:	2b2a      	cmp	r3, #42	; 0x2a
   b8528:	d00c      	beq.n	b8544 <_ZNKSt9type_infoeqERKS_+0x28>
   b852a:	6849      	ldr	r1, [r1, #4]
   b852c:	780b      	ldrb	r3, [r1, #0]
   b852e:	2b2a      	cmp	r3, #42	; 0x2a
   b8530:	bf08      	it	eq
   b8532:	3101      	addeq	r1, #1
   b8534:	f7fb fd72 	bl	b401c <strcmp>
   b8538:	fab0 f080 	clz	r0, r0
   b853c:	0940      	lsrs	r0, r0, #5
   b853e:	bd08      	pop	{r3, pc}
   b8540:	2001      	movs	r0, #1
   b8542:	e7fc      	b.n	b853e <_ZNKSt9type_infoeqERKS_+0x22>
   b8544:	2000      	movs	r0, #0
   b8546:	e7fa      	b.n	b853e <_ZNKSt9type_infoeqERKS_+0x22>

000b8548 <atexit>:
   b8548:	2300      	movs	r3, #0
   b854a:	4601      	mov	r1, r0
   b854c:	461a      	mov	r2, r3
   b854e:	4618      	mov	r0, r3
   b8550:	f000 b956 	b.w	b8800 <__register_exitproc>

000b8554 <isprint>:
   b8554:	4b02      	ldr	r3, [pc, #8]	; (b8560 <isprint+0xc>)
   b8556:	4418      	add	r0, r3
   b8558:	7840      	ldrb	r0, [r0, #1]
   b855a:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b855e:	4770      	bx	lr
   b8560:	000b8fb9 	.word	0x000b8fb9

000b8564 <memcmp>:
   b8564:	b510      	push	{r4, lr}
   b8566:	3901      	subs	r1, #1
   b8568:	4402      	add	r2, r0
   b856a:	4290      	cmp	r0, r2
   b856c:	d101      	bne.n	b8572 <memcmp+0xe>
   b856e:	2000      	movs	r0, #0
   b8570:	e005      	b.n	b857e <memcmp+0x1a>
   b8572:	7803      	ldrb	r3, [r0, #0]
   b8574:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b8578:	42a3      	cmp	r3, r4
   b857a:	d001      	beq.n	b8580 <memcmp+0x1c>
   b857c:	1b18      	subs	r0, r3, r4
   b857e:	bd10      	pop	{r4, pc}
   b8580:	3001      	adds	r0, #1
   b8582:	e7f2      	b.n	b856a <memcmp+0x6>

000b8584 <memcpy>:
   b8584:	440a      	add	r2, r1
   b8586:	4291      	cmp	r1, r2
   b8588:	f100 33ff 	add.w	r3, r0, #4294967295
   b858c:	d100      	bne.n	b8590 <memcpy+0xc>
   b858e:	4770      	bx	lr
   b8590:	b510      	push	{r4, lr}
   b8592:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8596:	f803 4f01 	strb.w	r4, [r3, #1]!
   b859a:	4291      	cmp	r1, r2
   b859c:	d1f9      	bne.n	b8592 <memcpy+0xe>
   b859e:	bd10      	pop	{r4, pc}

000b85a0 <memmove>:
   b85a0:	4288      	cmp	r0, r1
   b85a2:	b510      	push	{r4, lr}
   b85a4:	eb01 0402 	add.w	r4, r1, r2
   b85a8:	d902      	bls.n	b85b0 <memmove+0x10>
   b85aa:	4284      	cmp	r4, r0
   b85ac:	4623      	mov	r3, r4
   b85ae:	d807      	bhi.n	b85c0 <memmove+0x20>
   b85b0:	1e43      	subs	r3, r0, #1
   b85b2:	42a1      	cmp	r1, r4
   b85b4:	d008      	beq.n	b85c8 <memmove+0x28>
   b85b6:	f811 2b01 	ldrb.w	r2, [r1], #1
   b85ba:	f803 2f01 	strb.w	r2, [r3, #1]!
   b85be:	e7f8      	b.n	b85b2 <memmove+0x12>
   b85c0:	4402      	add	r2, r0
   b85c2:	4601      	mov	r1, r0
   b85c4:	428a      	cmp	r2, r1
   b85c6:	d100      	bne.n	b85ca <memmove+0x2a>
   b85c8:	bd10      	pop	{r4, pc}
   b85ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b85ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b85d2:	e7f7      	b.n	b85c4 <memmove+0x24>

000b85d4 <memset>:
   b85d4:	4402      	add	r2, r0
   b85d6:	4603      	mov	r3, r0
   b85d8:	4293      	cmp	r3, r2
   b85da:	d100      	bne.n	b85de <memset+0xa>
   b85dc:	4770      	bx	lr
   b85de:	f803 1b01 	strb.w	r1, [r3], #1
   b85e2:	e7f9      	b.n	b85d8 <memset+0x4>

000b85e4 <srand>:
   b85e4:	b538      	push	{r3, r4, r5, lr}
   b85e6:	4b10      	ldr	r3, [pc, #64]	; (b8628 <srand+0x44>)
   b85e8:	681d      	ldr	r5, [r3, #0]
   b85ea:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b85ec:	4604      	mov	r4, r0
   b85ee:	b9b3      	cbnz	r3, b861e <srand+0x3a>
   b85f0:	2018      	movs	r0, #24
   b85f2:	f7fc fd0f 	bl	b5014 <malloc>
   b85f6:	4602      	mov	r2, r0
   b85f8:	63a8      	str	r0, [r5, #56]	; 0x38
   b85fa:	b920      	cbnz	r0, b8606 <srand+0x22>
   b85fc:	4b0b      	ldr	r3, [pc, #44]	; (b862c <srand+0x48>)
   b85fe:	480c      	ldr	r0, [pc, #48]	; (b8630 <srand+0x4c>)
   b8600:	2142      	movs	r1, #66	; 0x42
   b8602:	f7fc fd37 	bl	b5074 <__assert_func>
   b8606:	490b      	ldr	r1, [pc, #44]	; (b8634 <srand+0x50>)
   b8608:	4b0b      	ldr	r3, [pc, #44]	; (b8638 <srand+0x54>)
   b860a:	e9c0 1300 	strd	r1, r3, [r0]
   b860e:	4b0b      	ldr	r3, [pc, #44]	; (b863c <srand+0x58>)
   b8610:	6083      	str	r3, [r0, #8]
   b8612:	230b      	movs	r3, #11
   b8614:	8183      	strh	r3, [r0, #12]
   b8616:	2100      	movs	r1, #0
   b8618:	2001      	movs	r0, #1
   b861a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b861e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8620:	2200      	movs	r2, #0
   b8622:	611c      	str	r4, [r3, #16]
   b8624:	615a      	str	r2, [r3, #20]
   b8626:	bd38      	pop	{r3, r4, r5, pc}
   b8628:	2003e548 	.word	0x2003e548
   b862c:	000b8f25 	.word	0x000b8f25
   b8630:	000b8f3c 	.word	0x000b8f3c
   b8634:	abcd330e 	.word	0xabcd330e
   b8638:	e66d1234 	.word	0xe66d1234
   b863c:	0005deec 	.word	0x0005deec

000b8640 <strchr>:
   b8640:	b2c9      	uxtb	r1, r1
   b8642:	4603      	mov	r3, r0
   b8644:	f810 2b01 	ldrb.w	r2, [r0], #1
   b8648:	b11a      	cbz	r2, b8652 <strchr+0x12>
   b864a:	428a      	cmp	r2, r1
   b864c:	d1f9      	bne.n	b8642 <strchr+0x2>
   b864e:	4618      	mov	r0, r3
   b8650:	4770      	bx	lr
   b8652:	2900      	cmp	r1, #0
   b8654:	bf18      	it	ne
   b8656:	2300      	movne	r3, #0
   b8658:	e7f9      	b.n	b864e <strchr+0xe>

000b865a <strchrnul>:
   b865a:	b510      	push	{r4, lr}
   b865c:	4604      	mov	r4, r0
   b865e:	f7ff ffef 	bl	b8640 <strchr>
   b8662:	b918      	cbnz	r0, b866c <strchrnul+0x12>
   b8664:	4620      	mov	r0, r4
   b8666:	f7fb fce3 	bl	b4030 <strlen>
   b866a:	4420      	add	r0, r4
   b866c:	bd10      	pop	{r4, pc}

000b866e <strcpy>:
   b866e:	4603      	mov	r3, r0
   b8670:	f811 2b01 	ldrb.w	r2, [r1], #1
   b8674:	f803 2b01 	strb.w	r2, [r3], #1
   b8678:	2a00      	cmp	r2, #0
   b867a:	d1f9      	bne.n	b8670 <strcpy+0x2>
   b867c:	4770      	bx	lr

000b867e <strncmp>:
   b867e:	b510      	push	{r4, lr}
   b8680:	b17a      	cbz	r2, b86a2 <strncmp+0x24>
   b8682:	4603      	mov	r3, r0
   b8684:	3901      	subs	r1, #1
   b8686:	1884      	adds	r4, r0, r2
   b8688:	f813 0b01 	ldrb.w	r0, [r3], #1
   b868c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b8690:	4290      	cmp	r0, r2
   b8692:	d101      	bne.n	b8698 <strncmp+0x1a>
   b8694:	42a3      	cmp	r3, r4
   b8696:	d101      	bne.n	b869c <strncmp+0x1e>
   b8698:	1a80      	subs	r0, r0, r2
   b869a:	bd10      	pop	{r4, pc}
   b869c:	2800      	cmp	r0, #0
   b869e:	d1f3      	bne.n	b8688 <strncmp+0xa>
   b86a0:	e7fa      	b.n	b8698 <strncmp+0x1a>
   b86a2:	4610      	mov	r0, r2
   b86a4:	e7f9      	b.n	b869a <strncmp+0x1c>

000b86a6 <strnlen>:
   b86a6:	b510      	push	{r4, lr}
   b86a8:	4602      	mov	r2, r0
   b86aa:	4401      	add	r1, r0
   b86ac:	428a      	cmp	r2, r1
   b86ae:	4613      	mov	r3, r2
   b86b0:	d003      	beq.n	b86ba <strnlen+0x14>
   b86b2:	781c      	ldrb	r4, [r3, #0]
   b86b4:	3201      	adds	r2, #1
   b86b6:	2c00      	cmp	r4, #0
   b86b8:	d1f8      	bne.n	b86ac <strnlen+0x6>
   b86ba:	1a18      	subs	r0, r3, r0
   b86bc:	bd10      	pop	{r4, pc}

000b86be <strrchr>:
   b86be:	b538      	push	{r3, r4, r5, lr}
   b86c0:	4603      	mov	r3, r0
   b86c2:	460c      	mov	r4, r1
   b86c4:	b969      	cbnz	r1, b86e2 <strrchr+0x24>
   b86c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b86ca:	f7ff bfb9 	b.w	b8640 <strchr>
   b86ce:	1c43      	adds	r3, r0, #1
   b86d0:	4605      	mov	r5, r0
   b86d2:	4621      	mov	r1, r4
   b86d4:	4618      	mov	r0, r3
   b86d6:	f7ff ffb3 	bl	b8640 <strchr>
   b86da:	2800      	cmp	r0, #0
   b86dc:	d1f7      	bne.n	b86ce <strrchr+0x10>
   b86de:	4628      	mov	r0, r5
   b86e0:	bd38      	pop	{r3, r4, r5, pc}
   b86e2:	2500      	movs	r5, #0
   b86e4:	e7f5      	b.n	b86d2 <strrchr+0x14>
	...

000b86e8 <_strtol_l.constprop.0>:
   b86e8:	2b01      	cmp	r3, #1
   b86ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b86ee:	d001      	beq.n	b86f4 <_strtol_l.constprop.0+0xc>
   b86f0:	2b24      	cmp	r3, #36	; 0x24
   b86f2:	d906      	bls.n	b8702 <_strtol_l.constprop.0+0x1a>
   b86f4:	f7fc fcb6 	bl	b5064 <__errno>
   b86f8:	2316      	movs	r3, #22
   b86fa:	6003      	str	r3, [r0, #0]
   b86fc:	2000      	movs	r0, #0
   b86fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8702:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b87e8 <_strtol_l.constprop.0+0x100>
   b8706:	460d      	mov	r5, r1
   b8708:	462e      	mov	r6, r5
   b870a:	f815 4b01 	ldrb.w	r4, [r5], #1
   b870e:	f814 700c 	ldrb.w	r7, [r4, ip]
   b8712:	f017 0708 	ands.w	r7, r7, #8
   b8716:	d1f7      	bne.n	b8708 <_strtol_l.constprop.0+0x20>
   b8718:	2c2d      	cmp	r4, #45	; 0x2d
   b871a:	d132      	bne.n	b8782 <_strtol_l.constprop.0+0x9a>
   b871c:	782c      	ldrb	r4, [r5, #0]
   b871e:	2701      	movs	r7, #1
   b8720:	1cb5      	adds	r5, r6, #2
   b8722:	2b00      	cmp	r3, #0
   b8724:	d05b      	beq.n	b87de <_strtol_l.constprop.0+0xf6>
   b8726:	2b10      	cmp	r3, #16
   b8728:	d109      	bne.n	b873e <_strtol_l.constprop.0+0x56>
   b872a:	2c30      	cmp	r4, #48	; 0x30
   b872c:	d107      	bne.n	b873e <_strtol_l.constprop.0+0x56>
   b872e:	782c      	ldrb	r4, [r5, #0]
   b8730:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b8734:	2c58      	cmp	r4, #88	; 0x58
   b8736:	d14d      	bne.n	b87d4 <_strtol_l.constprop.0+0xec>
   b8738:	786c      	ldrb	r4, [r5, #1]
   b873a:	2310      	movs	r3, #16
   b873c:	3502      	adds	r5, #2
   b873e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b8742:	f108 38ff 	add.w	r8, r8, #4294967295
   b8746:	f04f 0c00 	mov.w	ip, #0
   b874a:	fbb8 f9f3 	udiv	r9, r8, r3
   b874e:	4666      	mov	r6, ip
   b8750:	fb03 8a19 	mls	sl, r3, r9, r8
   b8754:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b8758:	f1be 0f09 	cmp.w	lr, #9
   b875c:	d816      	bhi.n	b878c <_strtol_l.constprop.0+0xa4>
   b875e:	4674      	mov	r4, lr
   b8760:	42a3      	cmp	r3, r4
   b8762:	dd24      	ble.n	b87ae <_strtol_l.constprop.0+0xc6>
   b8764:	f1bc 0f00 	cmp.w	ip, #0
   b8768:	db1e      	blt.n	b87a8 <_strtol_l.constprop.0+0xc0>
   b876a:	45b1      	cmp	r9, r6
   b876c:	d31c      	bcc.n	b87a8 <_strtol_l.constprop.0+0xc0>
   b876e:	d101      	bne.n	b8774 <_strtol_l.constprop.0+0x8c>
   b8770:	45a2      	cmp	sl, r4
   b8772:	db19      	blt.n	b87a8 <_strtol_l.constprop.0+0xc0>
   b8774:	fb06 4603 	mla	r6, r6, r3, r4
   b8778:	f04f 0c01 	mov.w	ip, #1
   b877c:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8780:	e7e8      	b.n	b8754 <_strtol_l.constprop.0+0x6c>
   b8782:	2c2b      	cmp	r4, #43	; 0x2b
   b8784:	bf04      	itt	eq
   b8786:	782c      	ldrbeq	r4, [r5, #0]
   b8788:	1cb5      	addeq	r5, r6, #2
   b878a:	e7ca      	b.n	b8722 <_strtol_l.constprop.0+0x3a>
   b878c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b8790:	f1be 0f19 	cmp.w	lr, #25
   b8794:	d801      	bhi.n	b879a <_strtol_l.constprop.0+0xb2>
   b8796:	3c37      	subs	r4, #55	; 0x37
   b8798:	e7e2      	b.n	b8760 <_strtol_l.constprop.0+0x78>
   b879a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b879e:	f1be 0f19 	cmp.w	lr, #25
   b87a2:	d804      	bhi.n	b87ae <_strtol_l.constprop.0+0xc6>
   b87a4:	3c57      	subs	r4, #87	; 0x57
   b87a6:	e7db      	b.n	b8760 <_strtol_l.constprop.0+0x78>
   b87a8:	f04f 3cff 	mov.w	ip, #4294967295
   b87ac:	e7e6      	b.n	b877c <_strtol_l.constprop.0+0x94>
   b87ae:	f1bc 0f00 	cmp.w	ip, #0
   b87b2:	da05      	bge.n	b87c0 <_strtol_l.constprop.0+0xd8>
   b87b4:	2322      	movs	r3, #34	; 0x22
   b87b6:	6003      	str	r3, [r0, #0]
   b87b8:	4646      	mov	r6, r8
   b87ba:	b942      	cbnz	r2, b87ce <_strtol_l.constprop.0+0xe6>
   b87bc:	4630      	mov	r0, r6
   b87be:	e79e      	b.n	b86fe <_strtol_l.constprop.0+0x16>
   b87c0:	b107      	cbz	r7, b87c4 <_strtol_l.constprop.0+0xdc>
   b87c2:	4276      	negs	r6, r6
   b87c4:	2a00      	cmp	r2, #0
   b87c6:	d0f9      	beq.n	b87bc <_strtol_l.constprop.0+0xd4>
   b87c8:	f1bc 0f00 	cmp.w	ip, #0
   b87cc:	d000      	beq.n	b87d0 <_strtol_l.constprop.0+0xe8>
   b87ce:	1e69      	subs	r1, r5, #1
   b87d0:	6011      	str	r1, [r2, #0]
   b87d2:	e7f3      	b.n	b87bc <_strtol_l.constprop.0+0xd4>
   b87d4:	2430      	movs	r4, #48	; 0x30
   b87d6:	2b00      	cmp	r3, #0
   b87d8:	d1b1      	bne.n	b873e <_strtol_l.constprop.0+0x56>
   b87da:	2308      	movs	r3, #8
   b87dc:	e7af      	b.n	b873e <_strtol_l.constprop.0+0x56>
   b87de:	2c30      	cmp	r4, #48	; 0x30
   b87e0:	d0a5      	beq.n	b872e <_strtol_l.constprop.0+0x46>
   b87e2:	230a      	movs	r3, #10
   b87e4:	e7ab      	b.n	b873e <_strtol_l.constprop.0+0x56>
   b87e6:	bf00      	nop
   b87e8:	000b8fba 	.word	0x000b8fba

000b87ec <strtol>:
   b87ec:	4613      	mov	r3, r2
   b87ee:	460a      	mov	r2, r1
   b87f0:	4601      	mov	r1, r0
   b87f2:	4802      	ldr	r0, [pc, #8]	; (b87fc <strtol+0x10>)
   b87f4:	6800      	ldr	r0, [r0, #0]
   b87f6:	f7ff bf77 	b.w	b86e8 <_strtol_l.constprop.0>
   b87fa:	bf00      	nop
   b87fc:	2003e548 	.word	0x2003e548

000b8800 <__register_exitproc>:
   b8800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8804:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b88c0 <__register_exitproc+0xc0>
   b8808:	4606      	mov	r6, r0
   b880a:	f8d8 0000 	ldr.w	r0, [r8]
   b880e:	461f      	mov	r7, r3
   b8810:	460d      	mov	r5, r1
   b8812:	4691      	mov	r9, r2
   b8814:	f000 f856 	bl	b88c4 <__retarget_lock_acquire_recursive>
   b8818:	4b25      	ldr	r3, [pc, #148]	; (b88b0 <__register_exitproc+0xb0>)
   b881a:	681c      	ldr	r4, [r3, #0]
   b881c:	b934      	cbnz	r4, b882c <__register_exitproc+0x2c>
   b881e:	4c25      	ldr	r4, [pc, #148]	; (b88b4 <__register_exitproc+0xb4>)
   b8820:	601c      	str	r4, [r3, #0]
   b8822:	4b25      	ldr	r3, [pc, #148]	; (b88b8 <__register_exitproc+0xb8>)
   b8824:	b113      	cbz	r3, b882c <__register_exitproc+0x2c>
   b8826:	681b      	ldr	r3, [r3, #0]
   b8828:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b882c:	6863      	ldr	r3, [r4, #4]
   b882e:	2b1f      	cmp	r3, #31
   b8830:	dd07      	ble.n	b8842 <__register_exitproc+0x42>
   b8832:	f8d8 0000 	ldr.w	r0, [r8]
   b8836:	f000 f847 	bl	b88c8 <__retarget_lock_release_recursive>
   b883a:	f04f 30ff 	mov.w	r0, #4294967295
   b883e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8842:	b34e      	cbz	r6, b8898 <__register_exitproc+0x98>
   b8844:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8848:	b988      	cbnz	r0, b886e <__register_exitproc+0x6e>
   b884a:	4b1c      	ldr	r3, [pc, #112]	; (b88bc <__register_exitproc+0xbc>)
   b884c:	b923      	cbnz	r3, b8858 <__register_exitproc+0x58>
   b884e:	f8d8 0000 	ldr.w	r0, [r8]
   b8852:	f000 f838 	bl	b88c6 <__retarget_lock_release>
   b8856:	e7f0      	b.n	b883a <__register_exitproc+0x3a>
   b8858:	f44f 7084 	mov.w	r0, #264	; 0x108
   b885c:	f7fc fbda 	bl	b5014 <malloc>
   b8860:	2800      	cmp	r0, #0
   b8862:	d0f4      	beq.n	b884e <__register_exitproc+0x4e>
   b8864:	2300      	movs	r3, #0
   b8866:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b886a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b886e:	6863      	ldr	r3, [r4, #4]
   b8870:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8874:	2201      	movs	r2, #1
   b8876:	409a      	lsls	r2, r3
   b8878:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b887c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b8880:	4313      	orrs	r3, r2
   b8882:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b8886:	2e02      	cmp	r6, #2
   b8888:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b888c:	bf02      	ittt	eq
   b888e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b8892:	4313      	orreq	r3, r2
   b8894:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8898:	6863      	ldr	r3, [r4, #4]
   b889a:	f8d8 0000 	ldr.w	r0, [r8]
   b889e:	1c5a      	adds	r2, r3, #1
   b88a0:	3302      	adds	r3, #2
   b88a2:	6062      	str	r2, [r4, #4]
   b88a4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b88a8:	f000 f80e 	bl	b88c8 <__retarget_lock_release_recursive>
   b88ac:	2000      	movs	r0, #0
   b88ae:	e7c6      	b.n	b883e <__register_exitproc+0x3e>
   b88b0:	2003e7e8 	.word	0x2003e7e8
   b88b4:	2003e75c 	.word	0x2003e75c
   b88b8:	00000000 	.word	0x00000000
   b88bc:	000b5015 	.word	0x000b5015
   b88c0:	2003e5ac 	.word	0x2003e5ac

000b88c4 <__retarget_lock_acquire_recursive>:
   b88c4:	4770      	bx	lr

000b88c6 <__retarget_lock_release>:
   b88c6:	4770      	bx	lr

000b88c8 <__retarget_lock_release_recursive>:
   b88c8:	4770      	bx	lr

000b88ca <link_code_end>:
	...

000b88cc <link_const_data_start>:
   b88cc:	00000000 	.word	0x00000000
   b88d0:	34fb0000 	.word	0x34fb0000
   b88d4:	00805f9b 	.word	0x00805f9b
   b88d8:	10008000 	.word	0x10008000
	...

000b88e4 <dynalib_user>:
   b88e4:	000b4041 000b407d 000b40a5 000b40a9     A@..}@...@...@..
   b88f4:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   b8904:	72697620 6c617574 66656400 746c7561      virtual.default
   b8914:	534d0020 534c0042 533c0042 65534950      .MSB.LSB.<SPISe
   b8924:	6e697474 64207367 75616665 003e746c     ttings default>.
   b8934:	4950533c 74746553 73676e69 25732520     <SPISettings %s%
   b8944:	73252075 444f4d20 3e752545 73696400     u %s MODE%u>.dis
   b8954:	6e6e6f63 65746365 41420064 72612f52     connected.BAR/ar
   b8964:	546e6f67 6363612f 782f6c65 52414200     gonT/accel/x.BAR
   b8974:	6772612f 2f546e6f 65636361 00792f6c     /argonT/accel/y.
   b8984:	2f524142 6f677261 612f546e 6c656363     BAR/argonT/accel
   b8994:	6c007a2f 742e6261 63776568 6f632e6c     /z.lab.thewcl.co
   b89a4:	6661006d 63613765 332d3563 2d396133     m.afe7acc5-33a9-
   b89b4:	66383734 6562622d 39382d31 61613434     478f-bbe1-8944aa
   b89c4:	38653830 00003438                       08e884..

000b89cc <_ZTVN8particle11SPISettingsE>:
	...
   b89d4:	000b4169 000b40f1 000b40f7              iA...@...@..

000b89e0 <_ZTVN5spark10LogHandlerE>:
	...
   b89f0:	000b40c9 000b40f3                       .@...@..

000b89f8 <_ZTVN5spark16SerialLogHandlerE>:
	...
   b8a00:	000b4105 000b4139 000b6ded 000b6f91     .A..9A...m...o..
   b8a10:	69766564 6e206563 6620746f 646e756f     device not found
   b8a20:	00000000                                ....

000b8a24 <_ZTV6LIS3DH>:
	...
   b8a34:	000b4941 000b40c9 000b40c9              AI...@...@..

000b8a40 <_ZTV9LIS3DHSPI>:
	...
   b8a48:	000b482f 000b4831 000b4963 000b486f     /H..1H..cI..oH..
   b8a58:	000b48b1 000b483f 000b4859              .H..?H..YH..

000b8a64 <_ZTVN5spark13EthernetClassE>:
	...
   b8a6c:	000b50f3 000b50e9 000b50df 000b50d5     .P...P...P...P..
   b8a7c:	000b50c9 000b50bd 000b7c95 000b7c9d     .P...P...|...|..
   b8a8c:	000b50b1 000b50a9 000b509f 000b5095     .P...P...P...P..
   b8a9c:	000b7ccd                                .|..

000b8aa0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b8aa0:	18100800 38302820 65737341 6f697472     .... (08Assertio
   b8ab0:	6961466e 6572756c 6c616620 77006573     nFailure false.w
   b8ac0:	6e697269 6c622e67 74530065 20747261     iring.ble.Start 
   b8ad0:	63736964 7265766f 20676e69 76726573     discovering serv
   b8ae0:	73656369 7341002e 74726573 466e6f69     ices..AssertionF
   b8af0:	756c6961 68206572 625f6c61 735f656c     ailure hal_ble_s
   b8b00:	6b636174 696e695f 756e2874 74706c6c     tack_init(nullpt
   b8b10:	3d202972 5953203d 4d455453 5252455f     r) == SYSTEM_ERR
   b8b20:	4e5f524f 00454e4f 6c696146 74206465     OR_NONE.Failed t
   b8b30:	7061206f 646e6570 65657020 65432072     o append peer Ce
   b8b40:	6172746e 6564206c 65636976 6f43002e     ntral device..Co
   b8b50:	63656e6e 00646574 63736944 656e6e6f     nnected.Disconne
   b8b60:	64657463 00000000                       cted....

000b8b68 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b8b70:	000b54bd 000b54e1 000b5ab3 000b54ef     .T...T...Z...T..
   b8b80:	000b54c1                                .T..

000b8b84 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b8b8c:	64756162 72655300 006c6169 69726553     baud.Serial.Seri
   b8b9c:	00316c61 4e4f534a 65727453 6f4c6d61     al1.JSONStreamLo
   b8bac:	6e614867 72656c64 70706100 31302500     gHandler.app.%01
   b8bbc:	00207530 2c00205d 29280020 2000203a     0u .] ., .(): . 
   b8bcc:	6f63005b 3d206564 69250020 74656400     [.code = .%i.det
   b8bdc:	736c6961 00203d20 66000a0d 006e6c00     ails = ....f.ln.
   b8bec:	74006e66 646f6300 65640065 6c696174     fn.t.code.detail
   b8bfc:	00000000                                ....

000b8c00 <_ZTVN5spark16JSONStreamWriterE>:
	...
   b8c08:	000b61e5 000b620b 000b61c9 000b7de7     .a...b...a...}..

000b8c18 <_ZTVN5spark16StreamLogHandlerE>:
	...
   b8c20:	000b6695 000b66ad 000b6ded 000b6f91     .f...f...m...o..

000b8c30 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   b8c38:	000b66c1 000b66d5 000b6fc9 000b61d1     .f...f...o...a..

000b8c48 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   b8c50:	000b61e3 000b6219 000b6d51 000b61d3     .a...b..Qm...a..

000b8c60 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   b8c68:	000b61e1 000b6227 000b65fd 000b6249     .a..'b...e..Ib..
   b8c78:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
   b8c88:	007a2553 74637361 00656d69              S%z.asctime.

000b8c94 <_ZTV9IPAddress>:
	...
   b8c9c:	000b72d9 000b72c9 000b72cb              .r...r...r..

000b8ca8 <_ZTV9USBSerial>:
	...
   b8cb0:	000b73eb 000b7453 000b7429 000b60a1     .s..St..)t...`..
   b8cc0:	000b741b 000b73ed 000b73fd 000b744d     .t...s...s..Mt..
   b8cd0:	000b740d 000b73e5                       .t...s..

000b8cd8 <_ZTV11USARTSerial>:
	...
   b8ce0:	000b74f5 000b7561 000b7539 000b60a1     .t..au..9u...`..
   b8cf0:	000b7509 000b7525 000b7517 000b7533     .u..%u...u..3u..
   b8d00:	000b74f7 000b74fb                       .t...t..

000b8d08 <_ZTV7TwoWire>:
	...
   b8d10:	000b75ad 000b75f7 000b75cf 000b75af     .u...u...u...u..
   b8d20:	000b75d7 000b75df 000b75e7 000b75ef     .u...u...u...u..
   b8d30:	69726977 7200676e 20766365 6f727265     wiring.recv erro
   b8d40:	203d2072 00006425                       r = %d..

000b8d48 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b8d50:	000b76c5 000b76e9 000b7bd3 000b76f7     .v...v...{...v..
   b8d60:	000b76c9                                .v..

000b8d64 <_ZTV9TCPClient>:
	...
   b8d6c:	000b7159 000b7171 000b7641 000b765b     Yq..qq..Av..[v..
   b8d7c:	000b7a69 000b7685 000b78df 000b76b9     iz...v...x...v..
   b8d8c:	000b7971 000b77b1 000b790d 000b7b1d     qy...w...y...{..
   b8d9c:	000b78ad 000b76bb 000b766d 000b76fd     .x...v..mv...v..
   b8dac:	000b7791                                .w..

000b8db0 <_ZTVN5spark9WiFiClassE>:
	...
   b8db8:	000b7c37 000b7c2d 000b7c23 000b7bd9     7|..-|..#|...{..
   b8dc8:	000b7c17 000b7c0b 000b7c95 000b7c9d     .|...|...|...|..
   b8dd8:	000b7bff 000b7bf7 000b7bed 000b7be3     .{...{...{...{..
   b8de8:	000b7ccd                                .|..

000b8dec <_ZTVN5spark12NetworkClassE>:
	...
   b8df4:	000b7c55 000b7c5f 000b7c69 000b7c73     U|.._|..i|..s|..
   b8e04:	000b7c7d 000b7c89 000b7c95 000b7c9d     }|...|...|...|..
   b8e14:	000b7ca5 000b7cb1 000b7cb9 000b7cc3     .|...|...|...|..
   b8e24:	000b7ccd 75007525 78343025               .|..%u.u%04x.

000b8e31 <_ZSt7nothrow>:
	...

000b8e32 <_ZTSSt19_Sp_make_shared_tag>:
   b8e32:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   b8e42:	5f646572 00676174                        red_tag...

000b8e4c <_ZTISt19_Sp_make_shared_tag>:
   b8e4c:	000b8e8c 000b8e32                       ....2...

000b8e54 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b8e54:	000b8eec 000b8e60 000b8f10              ....`.......

000b8e60 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b8e60:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   b8e70:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   b8e80:	00000045                                E...

000b8e84 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b8e84:	00000000 000b8e54 000b8371 000b8385     ....T...q.......
   b8e94:	000b8519 000b8519 000b83ef 000b8331     ............1...
   b8ea4:	000b83d7 000b8399 000b8363              ........c...

000b8eb0 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b8eb0:	000b8eec 000b8ebc 000b8e54              ........T...

000b8ebc <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b8ebc:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   b8ecc:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   b8edc:	456f666e 00000000                       nfoE....

000b8ee4 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b8ee4:	00000000 000b8eb0 000b8419 000b842d     ............-...
   b8ef4:	000b8519 000b8519 000b83ef 000b8331     ............1...
   b8f04:	000b84ed 000b8479 000b8441              ....y...A...

000b8f10 <_ZTISt9type_info>:
   b8f10:	000b8e8c 000b8f18                       ........

000b8f18 <_ZTSSt9type_info>:
   b8f18:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
   b8f28:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
   b8f38:	00646564 746e6d2f 726f772f 6170736b     ded./mnt/workspa
   b8f48:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   b8f58:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   b8f68:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   b8f78:	656e696c 5f38342d 30323032 34323131     line-48_20201124
   b8f88:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
   b8f98:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
   b8fa8:	732f6362 696c6474 61722f62 632e646e     bc/stdlib/rand.c
	...

000b8fb9 <_ctype_>:
   b8fb9:	20202000 20202020 28282020 20282828     .         ((((( 
   b8fc9:	20202020 20202020 20202020 20202020                     
   b8fd9:	10108820 10101010 10101010 10101010      ...............
   b8fe9:	04040410 04040404 10040404 10101010     ................
   b8ff9:	41411010 41414141 01010101 01010101     ..AAAAAA........
   b9009:	01010101 01010101 01010101 10101010     ................
   b9019:	42421010 42424242 02020202 02020202     ..BBBBBB........
   b9029:	02020202 02020202 02020202 10101010     ................
   b9039:	00000020 00000000 00000000 00000000      ...............
	...

000b90ba <link_const_data_end>:
	...

000b90bc <link_constructors_location>:
   b90bc:	000b4435 	.word	0x000b4435
   b90c0:	000b50fd 	.word	0x000b50fd
   b90c4:	000b5275 	.word	0x000b5275
   b90c8:	000b6091 	.word	0x000b6091
   b90cc:	000b6ddd 	.word	0x000b6ddd
   b90d0:	000b713d 	.word	0x000b713d
   b90d4:	000b7185 	.word	0x000b7185
   b90d8:	000b7c41 	.word	0x000b7c41
   b90dc:	000b7da5 	.word	0x000b7da5
