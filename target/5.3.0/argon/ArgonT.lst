
c:/Users/benja/OneDrive/Desktop/visualStudioCode/summerIOT/Capstone/ArgonT/target/5.3.0/argon/ArgonT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003bc4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b7be0  000b7be0  00007be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000074  2003e5e8  000b7c04  0000e5e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000194  2003e65c  2003e65c  0001e65c  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b7c78  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b7c7c  000b7c7c  00017c7c  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b7c82  000b7c82  00017c82  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b7ca6  000b7ca6  00017ca6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   000fb858  00000000  00000000  00017caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000e90e  00000000  00000000  00113502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00036bf5  00000000  00000000  00121e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002968  00000000  00000000  00158a05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000a0d0  00000000  00000000  0015b36d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000315b8  00000000  00000000  0016543d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00031a80  00000000  00000000  001969f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00136a46  00000000  00000000  001c8475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007934  00000000  00000000  002feebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strcmp>:
   b401c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4020:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4024:	2a01      	cmp	r2, #1
   b4026:	bf28      	it	cs
   b4028:	429a      	cmpcs	r2, r3
   b402a:	d0f7      	beq.n	b401c <strcmp>
   b402c:	1ad0      	subs	r0, r2, r3
   b402e:	4770      	bx	lr

000b4030 <strlen>:
   b4030:	4603      	mov	r3, r0
   b4032:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4036:	2a00      	cmp	r2, #0
   b4038:	d1fb      	bne.n	b4032 <strlen+0x2>
   b403a:	1a18      	subs	r0, r3, r0
   b403c:	3801      	subs	r0, #1
   b403e:	4770      	bx	lr

000b4040 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4040:	4809      	ldr	r0, [pc, #36]	; (b4068 <module_user_pre_init+0x28>)
   b4042:	490a      	ldr	r1, [pc, #40]	; (b406c <module_user_pre_init+0x2c>)
   b4044:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4046:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4048:	d005      	beq.n	b4056 <module_user_pre_init+0x16>
   b404a:	4a09      	ldr	r2, [pc, #36]	; (b4070 <module_user_pre_init+0x30>)
   b404c:	4282      	cmp	r2, r0
   b404e:	d002      	beq.n	b4056 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4050:	1a12      	subs	r2, r2, r0
   b4052:	f003 f8e7 	bl	b7224 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4056:	4807      	ldr	r0, [pc, #28]	; (b4074 <module_user_pre_init+0x34>)
   b4058:	4a07      	ldr	r2, [pc, #28]	; (b4078 <module_user_pre_init+0x38>)
   b405a:	2100      	movs	r1, #0
   b405c:	1a12      	subs	r2, r2, r0
   b405e:	f003 f909 	bl	b7274 <memset>
    return &link_global_data_start;
}
   b4062:	4801      	ldr	r0, [pc, #4]	; (b4068 <module_user_pre_init+0x28>)
   b4064:	bd08      	pop	{r3, pc}
   b4066:	bf00      	nop
   b4068:	2003e5e8 	.word	0x2003e5e8
   b406c:	000b7c04 	.word	0x000b7c04
   b4070:	2003e65c 	.word	0x2003e65c
   b4074:	2003e65c 	.word	0x2003e65c
   b4078:	2003e7f0 	.word	0x2003e7f0

000b407c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b407c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b407e:	4e07      	ldr	r6, [pc, #28]	; (b409c <module_user_init+0x20>)
   b4080:	4c07      	ldr	r4, [pc, #28]	; (b40a0 <module_user_init+0x24>)
    module_user_init_hook();
   b4082:	f002 fb01 	bl	b6688 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4086:	1ba4      	subs	r4, r4, r6
   b4088:	08a4      	lsrs	r4, r4, #2
   b408a:	2500      	movs	r5, #0
   b408c:	42ac      	cmp	r4, r5
   b408e:	d100      	bne.n	b4092 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4090:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4092:	f856 3b04 	ldr.w	r3, [r6], #4
   b4096:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4098:	3501      	adds	r5, #1
   b409a:	e7f7      	b.n	b408c <module_user_init+0x10>
   b409c:	000b7bbc 	.word	0x000b7bbc
   b40a0:	000b7be0 	.word	0x000b7be0

000b40a4 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b40a4:	f000 b874 	b.w	b4190 <setup>

000b40a8 <module_user_loop>:
}

void module_user_loop() {
   b40a8:	b508      	push	{r3, lr}
    loop();
   b40aa:	f000 f8c1 	bl	b4230 <loop>
    _post_loop();
}
   b40ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b40b2:	f002 baa1 	b.w	b65f8 <_post_loop>

000b40b6 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b40b6:	f000 bb5d 	b.w	b4774 <malloc>

000b40ba <_Znaj>:
   b40ba:	f000 bb5b 	b.w	b4774 <malloc>

000b40be <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40be:	f000 bb61 	b.w	b4784 <free>
	...

000b40c4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40c4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40c6:	4a03      	ldr	r2, [pc, #12]	; (b40d4 <__cxa_pure_virtual+0x10>)
   b40c8:	4903      	ldr	r1, [pc, #12]	; (b40d8 <__cxa_pure_virtual+0x14>)
   b40ca:	200c      	movs	r0, #12
   b40cc:	f000 fa9e 	bl	b460c <panic_>
  while (1);
   b40d0:	e7fe      	b.n	b40d0 <__cxa_pure_virtual+0xc>
   b40d2:	bf00      	nop
   b40d4:	000b4405 	.word	0x000b4405
   b40d8:	000b7598 	.word	0x000b7598

000b40dc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40dc:	7800      	ldrb	r0, [r0, #0]
   b40de:	fab0 f080 	clz	r0, r0
   b40e2:	0940      	lsrs	r0, r0, #5
   b40e4:	4770      	bx	lr

000b40e6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40e6:	2301      	movs	r3, #1
   b40e8:	7003      	strb	r3, [r0, #0]
   b40ea:	4770      	bx	lr

000b40ec <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40ec:	4770      	bx	lr
	...

000b40f0 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b40f0:	4b0a      	ldr	r3, [pc, #40]	; (b411c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b40f2:	b510      	push	{r4, lr}
   b40f4:	4604      	mov	r4, r0
   b40f6:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b40f8:	f001 fc18 	bl	b592c <_ZN5spark10LogManager8instanceEv>
   b40fc:	4621      	mov	r1, r4
   b40fe:	f001 fe50 	bl	b5da2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4102:	f002 fbcd 	bl	b68a0 <_Z16_fetch_usbserialv>
   b4106:	f002 fbbf 	bl	b6888 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b410a:	4620      	mov	r0, r4
   b410c:	4b04      	ldr	r3, [pc, #16]	; (b4120 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b410e:	f840 3b04 	str.w	r3, [r0], #4
   b4112:	f001 fce1 	bl	b5ad8 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b4116:	4620      	mov	r0, r4
   b4118:	bd10      	pop	{r4, pc}
   b411a:	bf00      	nop
   b411c:	000b7600 	.word	0x000b7600
   b4120:	000b75e8 	.word	0x000b75e8

000b4124 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b4124:	b510      	push	{r4, lr}
   b4126:	4604      	mov	r4, r0
    }
   b4128:	f7ff ffe2 	bl	b40f0 <_ZN5spark16SerialLogHandlerD1Ev>
   b412c:	4620      	mov	r0, r4
   b412e:	2124      	movs	r1, #36	; 0x24
   b4130:	f7ff ffc5 	bl	b40be <_ZdlPvj>
   b4134:	4620      	mov	r0, r4
   b4136:	bd10      	pop	{r4, pc}

000b4138 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4138:	b40e      	push	{r1, r2, r3}
   b413a:	b500      	push	{lr}
   b413c:	b08c      	sub	sp, #48	; 0x30
   b413e:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4140:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4144:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4148:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b414a:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b414e:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4150:	6801      	ldr	r1, [r0, #0]
   b4152:	aa04      	add	r2, sp, #16
   b4154:	201e      	movs	r0, #30
    attr.flags = 0;
   b4156:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b415a:	f000 fa67 	bl	b462c <log_message_v>
}
   b415e:	b00c      	add	sp, #48	; 0x30
   b4160:	f85d eb04 	ldr.w	lr, [sp], #4
   b4164:	b003      	add	sp, #12
   b4166:	4770      	bx	lr

000b4168 <_Z17connectedCallbackRKN8particle13BlePeerDeviceEPv>:
void loop() {

}


void connectedCallback(const BlePeerDevice& peer, void* context) {
   b4168:	b508      	push	{r3, lr}
	Log.info("connected");
   b416a:	4902      	ldr	r1, [pc, #8]	; (b4174 <_Z17connectedCallbackRKN8particle13BlePeerDeviceEPv+0xc>)
   b416c:	4802      	ldr	r0, [pc, #8]	; (b4178 <_Z17connectedCallbackRKN8particle13BlePeerDeviceEPv+0x10>)
   b416e:	f7ff ffe3 	bl	b4138 <_ZNK5spark6Logger4infoEPKcz>

}
   b4172:	bd08      	pop	{r3, pc}
   b4174:	000b76ff 	.word	0x000b76ff
   b4178:	2003e6d0 	.word	0x2003e6d0

000b417c <_Z20disconnectedCallbackRKN8particle13BlePeerDeviceEPv>:

void disconnectedCallback(const BlePeerDevice& peer, void* context) {
   b417c:	b508      	push	{r3, lr}
	Log.info("disconnected");
   b417e:	4902      	ldr	r1, [pc, #8]	; (b4188 <_Z20disconnectedCallbackRKN8particle13BlePeerDeviceEPv+0xc>)
   b4180:	4802      	ldr	r0, [pc, #8]	; (b418c <_Z20disconnectedCallbackRKN8particle13BlePeerDeviceEPv+0x10>)
   b4182:	f7ff ffd9 	bl	b4138 <_ZNK5spark6Logger4infoEPKcz>

   b4186:	bd08      	pop	{r3, pc}
   b4188:	000b75ad 	.word	0x000b75ad
   b418c:	2003e6d0 	.word	0x2003e6d0

000b4190 <setup>:
void setup() {
   b4190:	b570      	push	{r4, r5, r6, lr}
   b4192:	b090      	sub	sp, #64	; 0x40
	BLE.on();
   b4194:	f000 fe0a 	bl	b4dac <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4198:	f000 fe24 	bl	b4de4 <_ZNK8particle14BleLocalDevice2onEv>
	BLE.onConnected(connectedCallback, NULL);
   b419c:	f000 fe06 	bl	b4dac <_ZN8particle14BleLocalDevice11getInstanceEv>
   b41a0:	4920      	ldr	r1, [pc, #128]	; (b4224 <setup+0x94>)
   b41a2:	4c21      	ldr	r4, [pc, #132]	; (b4228 <setup+0x98>)
   b41a4:	2200      	movs	r2, #0
   b41a6:	f001 f9cc 	bl	b5542 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
	BLE.onDisconnected(disconnectedCallback, NULL);
   b41aa:	f000 fdff 	bl	b4dac <_ZN8particle14BleLocalDevice11getInstanceEv>
   b41ae:	491f      	ldr	r1, [pc, #124]	; (b422c <setup+0x9c>)
   b41b0:	2200      	movs	r2, #0
   b41b2:	f001 f9a7 	bl	b5504 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
    BleAdvertisingData advData;
   b41b6:	a803      	add	r0, sp, #12
   b41b8:	f000 ffee 	bl	b5198 <_ZN8particle18BleAdvertisingDataC1Ev>
    advData.appendServiceUUID(serviceUuid);
   b41bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b41be:	ad06      	add	r5, sp, #24
   b41c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b41c2:	ad06      	add	r5, sp, #24
   b41c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b41c6:	6826      	ldr	r6, [r4, #0]
   b41c8:	ac0b      	add	r4, sp, #44	; 0x2c
   b41ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b41cc:	a80b      	add	r0, sp, #44	; 0x2c
        BleUuid tempUUID(uuid);
   b41ce:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b41d0:	f000 fccc 	bl	b4b6c <_ZNK8particle7BleUuid4typeEv>
   b41d4:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b41d6:	a80b      	add	r0, sp, #44	; 0x2c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b41d8:	b9dc      	cbnz	r4, b4212 <setup+0x82>
            uint16_t uuid16 = tempUUID.shorted();
   b41da:	f000 fcc9 	bl	b4b70 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b41de:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b41e0:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b41e4:	2302      	movs	r3, #2
   b41e6:	f10d 020a 	add.w	r2, sp, #10
   b41ea:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b41ec:	a803      	add	r0, sp, #12
   b41ee:	f000 ffc8 	bl	b5182 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    BLE.advertise(&advData);
   b41f2:	f000 fddb 	bl	b4dac <_ZN8particle14BleLocalDevice11getInstanceEv>
   b41f6:	2200      	movs	r2, #0
   b41f8:	a903      	add	r1, sp, #12
   b41fa:	f000 fe69 	bl	b4ed0 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
	BLE.setAdvertisingInterval(20);
   b41fe:	f000 fdd5 	bl	b4dac <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4202:	2114      	movs	r1, #20
   b4204:	f000 fdf5 	bl	b4df2 <_ZNK8particle14BleLocalDevice22setAdvertisingIntervalEt>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b4208:	9803      	ldr	r0, [sp, #12]
   b420a:	f000 fabb 	bl	b4784 <free>
}
   b420e:	b010      	add	sp, #64	; 0x40
   b4210:	bd70      	pop	{r4, r5, r6, pc}
   b4212:	f000 fcaf 	bl	b4b74 <_ZNK8particle7BleUuid8rawBytesEv>
   b4216:	2300      	movs	r3, #0
   b4218:	9300      	str	r3, [sp, #0]
   b421a:	4602      	mov	r2, r0
   b421c:	2310      	movs	r3, #16
   b421e:	2107      	movs	r1, #7
   b4220:	e7e4      	b.n	b41ec <setup+0x5c>
   b4222:	bf00      	nop
   b4224:	000b4169 	.word	0x000b4169
   b4228:	2003e68c 	.word	0x2003e68c
   b422c:	000b417d 	.word	0x000b417d

000b4230 <loop>:
}
   b4230:	4770      	bx	lr

000b4232 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4232:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4234:	e9d0 5300 	ldrd	r5, r3, [r0]
   b4238:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b423a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b423c:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b4240:	42ae      	cmp	r6, r5
   b4242:	d004      	beq.n	b424e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b4244:	4628      	mov	r0, r5
   b4246:	f000 fb25 	bl	b4894 <_ZN6StringD1Ev>
   b424a:	3514      	adds	r5, #20
   b424c:	e7f8      	b.n	b4240 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b424e:	6820      	ldr	r0, [r4, #0]
   b4250:	f000 fa98 	bl	b4784 <free>
    AllocatorT::free(data_);
}
   b4254:	4620      	mov	r0, r4
   b4256:	bd70      	pop	{r4, r5, r6, pc}

000b4258 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b4258:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b425a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b425c:	4604      	mov	r4, r0
   b425e:	460d      	mov	r5, r1
   b4260:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4262:	d916      	bls.n	b4292 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4264:	4290      	cmp	r0, r2
   b4266:	d215      	bcs.n	b4294 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b4268:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b426c:	1a75      	subs	r5, r6, r1
   b426e:	f1a1 0714 	sub.w	r7, r1, #20
   b4272:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4274:	42b7      	cmp	r7, r6
   b4276:	d01c      	beq.n	b42b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b4278:	b12c      	cbz	r4, b4286 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b427a:	4631      	mov	r1, r6
   b427c:	4620      	mov	r0, r4
   b427e:	f000 fb71 	bl	b4964 <_ZN6StringC1EOS_>
   b4282:	7c33      	ldrb	r3, [r6, #16]
   b4284:	7423      	strb	r3, [r4, #16]
   b4286:	4630      	mov	r0, r6
   b4288:	f000 fb04 	bl	b4894 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b428c:	3e14      	subs	r6, #20
   b428e:	3c14      	subs	r4, #20
   b4290:	e7f0      	b.n	b4274 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b4292:	d00e      	beq.n	b42b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b4294:	42b5      	cmp	r5, r6
   b4296:	d00c      	beq.n	b42b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b4298:	b12c      	cbz	r4, b42a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b429a:	4629      	mov	r1, r5
   b429c:	4620      	mov	r0, r4
   b429e:	f000 fb61 	bl	b4964 <_ZN6StringC1EOS_>
   b42a2:	7c2b      	ldrb	r3, [r5, #16]
   b42a4:	7423      	strb	r3, [r4, #16]
   b42a6:	4628      	mov	r0, r5
   b42a8:	f000 faf4 	bl	b4894 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b42ac:	3514      	adds	r5, #20
   b42ae:	3414      	adds	r4, #20
   b42b0:	e7f0      	b.n	b4294 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b42b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b42b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b42b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b42b8:	2300      	movs	r3, #0
   b42ba:	e9c0 3300 	strd	r3, r3, [r0]
   b42be:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b42c0:	684f      	ldr	r7, [r1, #4]
   b42c2:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b42c4:	4604      	mov	r4, r0
   b42c6:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b42c8:	dd23      	ble.n	b4312 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b42ca:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b42ce:	fb08 f007 	mul.w	r0, r8, r7
   b42d2:	f000 fa4f 	bl	b4774 <malloc>
            if (!d) {
   b42d6:	4605      	mov	r5, r0
   b42d8:	b1d8      	cbz	r0, b4312 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b42da:	e9d4 1200 	ldrd	r1, r2, [r4]
   b42de:	fb08 1202 	mla	r2, r8, r2, r1
   b42e2:	f7ff ffb9 	bl	b4258 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b42e6:	6820      	ldr	r0, [r4, #0]
   b42e8:	f000 fa4c 	bl	b4784 <free>
        data_ = d;
   b42ec:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b42ee:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b42f0:	e9d6 7300 	ldrd	r7, r3, [r6]
   b42f4:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b42f8:	45b8      	cmp	r8, r7
   b42fa:	d008      	beq.n	b430e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b42fc:	4639      	mov	r1, r7
   b42fe:	4628      	mov	r0, r5
   b4300:	f000 fb4a 	bl	b4998 <_ZN6StringC1ERKS_>
   b4304:	7c3b      	ldrb	r3, [r7, #16]
   b4306:	742b      	strb	r3, [r5, #16]
   b4308:	3714      	adds	r7, #20
   b430a:	3514      	adds	r5, #20
   b430c:	e7f4      	b.n	b42f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b430e:	6873      	ldr	r3, [r6, #4]
   b4310:	6063      	str	r3, [r4, #4]
}
   b4312:	4620      	mov	r0, r4
   b4314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4318 <_GLOBAL__sub_I_SystemMode>:
   b4318:	b570      	push	{r4, r5, r6, lr}
SYSTEM_THREAD(ENABLED);
   b431a:	2100      	movs	r1, #0
   b431c:	b08c      	sub	sp, #48	; 0x30
SYSTEM_THREAD(ENABLED);
   b431e:	2001      	movs	r0, #1
   b4320:	f000 f9a4 	bl	b466c <system_thread_set_state>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4324:	4b23      	ldr	r3, [pc, #140]	; (b43b4 <_GLOBAL__sub_I_SystemMode+0x9c>)
    SleepResult() {}
   b4326:	4a24      	ldr	r2, [pc, #144]	; (b43b8 <_GLOBAL__sub_I_SystemMode+0xa0>)
   b4328:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b432a:	2400      	movs	r4, #0
   b432c:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4330:	2003      	movs	r0, #3
   b4332:	f000 f993 	bl	b465c <set_system_mode>
        capacity_(0) {
   b4336:	e9cd 4400 	strd	r4, r4, [sp]
   b433a:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b433c:	f002 fab0 	bl	b68a0 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b4340:	4c1e      	ldr	r4, [pc, #120]	; (b43bc <_GLOBAL__sub_I_SystemMode+0xa4>)
   b4342:	4605      	mov	r5, r0
   b4344:	4669      	mov	r1, sp
   b4346:	a803      	add	r0, sp, #12
   b4348:	f7ff ffb4 	bl	b42b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b434c:	4626      	mov	r6, r4
        stream_(&stream) {
   b434e:	a903      	add	r1, sp, #12
   b4350:	a806      	add	r0, sp, #24
   b4352:	f7ff ffaf 	bl	b42b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b4356:	4b1a      	ldr	r3, [pc, #104]	; (b43c0 <_GLOBAL__sub_I_SystemMode+0xa8>)
   b4358:	f846 3b04 	str.w	r3, [r6], #4
   b435c:	a906      	add	r1, sp, #24
   b435e:	a809      	add	r0, sp, #36	; 0x24
   b4360:	f7ff ffa8 	bl	b42b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4364:	aa09      	add	r2, sp, #36	; 0x24
   b4366:	211e      	movs	r1, #30
   b4368:	4630      	mov	r0, r6
   b436a:	f001 fdfd 	bl	b5f68 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b436e:	a809      	add	r0, sp, #36	; 0x24
   b4370:	f7ff ff5f 	bl	b4232 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b4374:	a806      	add	r0, sp, #24
   b4376:	f7ff ff5c 	bl	b4232 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b437a:	4b12      	ldr	r3, [pc, #72]	; (b43c4 <_GLOBAL__sub_I_SystemMode+0xac>)
   b437c:	6023      	str	r3, [r4, #0]
   b437e:	6225      	str	r5, [r4, #32]
   b4380:	a803      	add	r0, sp, #12
   b4382:	f7ff ff56 	bl	b4232 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4386:	4b10      	ldr	r3, [pc, #64]	; (b43c8 <_GLOBAL__sub_I_SystemMode+0xb0>)
   b4388:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b438a:	f002 fa89 	bl	b68a0 <_Z16_fetch_usbserialv>
   b438e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4392:	f002 fa75 	bl	b6880 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b4396:	f001 fac9 	bl	b592c <_ZN5spark10LogManager8instanceEv>
   b439a:	4621      	mov	r1, r4
   b439c:	f001 fcba 	bl	b5d14 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
   b43a0:	4668      	mov	r0, sp
   b43a2:	f7ff ff46 	bl	b4232 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
BleUuid serviceUuid("afe7acc5-33a9-478f-bbe1-8944aa08e884");
   b43a6:	4909      	ldr	r1, [pc, #36]	; (b43cc <_GLOBAL__sub_I_SystemMode+0xb4>)
   b43a8:	4809      	ldr	r0, [pc, #36]	; (b43d0 <_GLOBAL__sub_I_SystemMode+0xb8>)
   b43aa:	b00c      	add	sp, #48	; 0x30
   b43ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
BleUuid serviceUuid("afe7acc5-33a9-478f-bbe1-8944aa08e884");
   b43b0:	f000 bc52 	b.w	b4c58 <_ZN8particle7BleUuidC1EPKc>
   b43b4:	2003e65c 	.word	0x2003e65c
   b43b8:	ffff0000 	.word	0xffff0000
   b43bc:	2003e668 	.word	0x2003e668
   b43c0:	000b75e8 	.word	0x000b75e8
   b43c4:	000b77c8 	.word	0x000b77c8
   b43c8:	000b7600 	.word	0x000b7600
   b43cc:	000b75ba 	.word	0x000b75ba
   b43d0:	2003e68c 	.word	0x2003e68c

000b43d4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b43d4:	b508      	push	{r3, lr}
   b43d6:	4b02      	ldr	r3, [pc, #8]	; (b43e0 <netdb_freeaddrinfo+0xc>)
   b43d8:	681b      	ldr	r3, [r3, #0]
   b43da:	689b      	ldr	r3, [r3, #8]
   b43dc:	9301      	str	r3, [sp, #4]
   b43de:	bd08      	pop	{r3, pc}
   b43e0:	00030268 	.word	0x00030268

000b43e4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b43e4:	b508      	push	{r3, lr}
   b43e6:	4b02      	ldr	r3, [pc, #8]	; (b43f0 <netdb_getaddrinfo+0xc>)
   b43e8:	681b      	ldr	r3, [r3, #0]
   b43ea:	68db      	ldr	r3, [r3, #12]
   b43ec:	9301      	str	r3, [sp, #4]
   b43ee:	bd08      	pop	{r3, pc}
   b43f0:	00030268 	.word	0x00030268

000b43f4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b43f4:	b508      	push	{r3, lr}
   b43f6:	4b02      	ldr	r3, [pc, #8]	; (b4400 <HAL_RNG_GetRandomNumber+0xc>)
   b43f8:	681b      	ldr	r3, [r3, #0]
   b43fa:	685b      	ldr	r3, [r3, #4]
   b43fc:	9301      	str	r3, [sp, #4]
   b43fe:	bd08      	pop	{r3, pc}
   b4400:	00030218 	.word	0x00030218

000b4404 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4404:	b508      	push	{r3, lr}
   b4406:	4b02      	ldr	r3, [pc, #8]	; (b4410 <HAL_Delay_Microseconds+0xc>)
   b4408:	681b      	ldr	r3, [r3, #0]
   b440a:	68db      	ldr	r3, [r3, #12]
   b440c:	9301      	str	r3, [sp, #4]
   b440e:	bd08      	pop	{r3, pc}
   b4410:	00030218 	.word	0x00030218

000b4414 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4414:	b508      	push	{r3, lr}
   b4416:	4b02      	ldr	r3, [pc, #8]	; (b4420 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4418:	681b      	ldr	r3, [r3, #0]
   b441a:	695b      	ldr	r3, [r3, #20]
   b441c:	9301      	str	r3, [sp, #4]
   b441e:	bd08      	pop	{r3, pc}
   b4420:	00030218 	.word	0x00030218

000b4424 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b4424:	b508      	push	{r3, lr}
   b4426:	4b02      	ldr	r3, [pc, #8]	; (b4430 <hal_ble_stack_init+0xc>)
   b4428:	681b      	ldr	r3, [r3, #0]
   b442a:	689b      	ldr	r3, [r3, #8]
   b442c:	9301      	str	r3, [sp, #4]
   b442e:	bd08      	pop	{r3, pc}
   b4430:	00030278 	.word	0x00030278

000b4434 <hal_ble_gap_set_advertising_parameters>:
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
   b4434:	b508      	push	{r3, lr}
   b4436:	4b02      	ldr	r3, [pc, #8]	; (b4440 <hal_ble_gap_set_advertising_parameters+0xc>)
   b4438:	681b      	ldr	r3, [r3, #0]
   b443a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b443c:	9301      	str	r3, [sp, #4]
   b443e:	bd08      	pop	{r3, pc}
   b4440:	00030278 	.word	0x00030278

000b4444 <hal_ble_gap_get_advertising_parameters>:
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
   b4444:	b508      	push	{r3, lr}
   b4446:	4b02      	ldr	r3, [pc, #8]	; (b4450 <hal_ble_gap_get_advertising_parameters+0xc>)
   b4448:	681b      	ldr	r3, [r3, #0]
   b444a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b444c:	9301      	str	r3, [sp, #4]
   b444e:	bd08      	pop	{r3, pc}
   b4450:	00030278 	.word	0x00030278

000b4454 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b4454:	b508      	push	{r3, lr}
   b4456:	4b02      	ldr	r3, [pc, #8]	; (b4460 <hal_ble_gap_set_advertising_data+0xc>)
   b4458:	681b      	ldr	r3, [r3, #0]
   b445a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b445c:	9301      	str	r3, [sp, #4]
   b445e:	bd08      	pop	{r3, pc}
   b4460:	00030278 	.word	0x00030278

000b4464 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b4464:	b508      	push	{r3, lr}
   b4466:	4b02      	ldr	r3, [pc, #8]	; (b4470 <hal_ble_gap_set_scan_response_data+0xc>)
   b4468:	681b      	ldr	r3, [r3, #0]
   b446a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b446c:	9301      	str	r3, [sp, #4]
   b446e:	bd08      	pop	{r3, pc}
   b4470:	00030278 	.word	0x00030278

000b4474 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b4474:	b508      	push	{r3, lr}
   b4476:	4b02      	ldr	r3, [pc, #8]	; (b4480 <hal_ble_gap_start_advertising+0xc>)
   b4478:	681b      	ldr	r3, [r3, #0]
   b447a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b447c:	9301      	str	r3, [sp, #4]
   b447e:	bd08      	pop	{r3, pc}
   b4480:	00030278 	.word	0x00030278

000b4484 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b4484:	b508      	push	{r3, lr}
   b4486:	4b03      	ldr	r3, [pc, #12]	; (b4494 <hal_ble_gap_disconnect+0x10>)
   b4488:	681b      	ldr	r3, [r3, #0]
   b448a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b448e:	9301      	str	r3, [sp, #4]
   b4490:	bd08      	pop	{r3, pc}
   b4492:	0000      	.short	0x0000
   b4494:	00030278 	.word	0x00030278

000b4498 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b4498:	b508      	push	{r3, lr}
   b449a:	4b03      	ldr	r3, [pc, #12]	; (b44a8 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b449c:	681b      	ldr	r3, [r3, #0]
   b449e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b44a2:	9301      	str	r3, [sp, #4]
   b44a4:	bd08      	pop	{r3, pc}
   b44a6:	0000      	.short	0x0000
   b44a8:	00030278 	.word	0x00030278

000b44ac <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b44ac:	b508      	push	{r3, lr}
   b44ae:	4b02      	ldr	r3, [pc, #8]	; (b44b8 <os_mutex_recursive_create+0xc>)
   b44b0:	681b      	ldr	r3, [r3, #0]
   b44b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b44b4:	9301      	str	r3, [sp, #4]
   b44b6:	bd08      	pop	{r3, pc}
   b44b8:	00030248 	.word	0x00030248

000b44bc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b44bc:	b508      	push	{r3, lr}
   b44be:	4b02      	ldr	r3, [pc, #8]	; (b44c8 <os_mutex_recursive_destroy+0xc>)
   b44c0:	681b      	ldr	r3, [r3, #0]
   b44c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b44c4:	9301      	str	r3, [sp, #4]
   b44c6:	bd08      	pop	{r3, pc}
   b44c8:	00030248 	.word	0x00030248

000b44cc <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b44cc:	b508      	push	{r3, lr}
   b44ce:	4b02      	ldr	r3, [pc, #8]	; (b44d8 <os_mutex_recursive_lock+0xc>)
   b44d0:	681b      	ldr	r3, [r3, #0]
   b44d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b44d4:	9301      	str	r3, [sp, #4]
   b44d6:	bd08      	pop	{r3, pc}
   b44d8:	00030248 	.word	0x00030248

000b44dc <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b44dc:	b508      	push	{r3, lr}
   b44de:	4b02      	ldr	r3, [pc, #8]	; (b44e8 <os_mutex_recursive_unlock+0xc>)
   b44e0:	681b      	ldr	r3, [r3, #0]
   b44e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b44e4:	9301      	str	r3, [sp, #4]
   b44e6:	bd08      	pop	{r3, pc}
   b44e8:	00030248 	.word	0x00030248

000b44ec <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b44ec:	b508      	push	{r3, lr}
   b44ee:	4b02      	ldr	r3, [pc, #8]	; (b44f8 <inet_inet_ntop+0xc>)
   b44f0:	681b      	ldr	r3, [r3, #0]
   b44f2:	695b      	ldr	r3, [r3, #20]
   b44f4:	9301      	str	r3, [sp, #4]
   b44f6:	bd08      	pop	{r3, pc}
   b44f8:	00030264 	.word	0x00030264

000b44fc <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b44fc:	b508      	push	{r3, lr}
   b44fe:	4b02      	ldr	r3, [pc, #8]	; (b4508 <hal_usart_end+0xc>)
   b4500:	681b      	ldr	r3, [r3, #0]
   b4502:	689b      	ldr	r3, [r3, #8]
   b4504:	9301      	str	r3, [sp, #4]
   b4506:	bd08      	pop	{r3, pc}
   b4508:	0003023c 	.word	0x0003023c

000b450c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b450c:	b508      	push	{r3, lr}
   b450e:	4b02      	ldr	r3, [pc, #8]	; (b4518 <hal_usart_write+0xc>)
   b4510:	681b      	ldr	r3, [r3, #0]
   b4512:	68db      	ldr	r3, [r3, #12]
   b4514:	9301      	str	r3, [sp, #4]
   b4516:	bd08      	pop	{r3, pc}
   b4518:	0003023c 	.word	0x0003023c

000b451c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b451c:	b508      	push	{r3, lr}
   b451e:	4b02      	ldr	r3, [pc, #8]	; (b4528 <hal_usart_available+0xc>)
   b4520:	681b      	ldr	r3, [r3, #0]
   b4522:	691b      	ldr	r3, [r3, #16]
   b4524:	9301      	str	r3, [sp, #4]
   b4526:	bd08      	pop	{r3, pc}
   b4528:	0003023c 	.word	0x0003023c

000b452c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b452c:	b508      	push	{r3, lr}
   b452e:	4b02      	ldr	r3, [pc, #8]	; (b4538 <hal_usart_read+0xc>)
   b4530:	681b      	ldr	r3, [r3, #0]
   b4532:	695b      	ldr	r3, [r3, #20]
   b4534:	9301      	str	r3, [sp, #4]
   b4536:	bd08      	pop	{r3, pc}
   b4538:	0003023c 	.word	0x0003023c

000b453c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b453c:	b508      	push	{r3, lr}
   b453e:	4b02      	ldr	r3, [pc, #8]	; (b4548 <hal_usart_peek+0xc>)
   b4540:	681b      	ldr	r3, [r3, #0]
   b4542:	699b      	ldr	r3, [r3, #24]
   b4544:	9301      	str	r3, [sp, #4]
   b4546:	bd08      	pop	{r3, pc}
   b4548:	0003023c 	.word	0x0003023c

000b454c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b454c:	b508      	push	{r3, lr}
   b454e:	4b02      	ldr	r3, [pc, #8]	; (b4558 <hal_usart_flush+0xc>)
   b4550:	681b      	ldr	r3, [r3, #0]
   b4552:	69db      	ldr	r3, [r3, #28]
   b4554:	9301      	str	r3, [sp, #4]
   b4556:	bd08      	pop	{r3, pc}
   b4558:	0003023c 	.word	0x0003023c

000b455c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b455c:	b508      	push	{r3, lr}
   b455e:	4b02      	ldr	r3, [pc, #8]	; (b4568 <hal_usart_available_data_for_write+0xc>)
   b4560:	681b      	ldr	r3, [r3, #0]
   b4562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4564:	9301      	str	r3, [sp, #4]
   b4566:	bd08      	pop	{r3, pc}
   b4568:	0003023c 	.word	0x0003023c

000b456c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b456c:	b508      	push	{r3, lr}
   b456e:	4b02      	ldr	r3, [pc, #8]	; (b4578 <hal_usart_begin_config+0xc>)
   b4570:	681b      	ldr	r3, [r3, #0]
   b4572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4574:	9301      	str	r3, [sp, #4]
   b4576:	bd08      	pop	{r3, pc}
   b4578:	0003023c 	.word	0x0003023c

000b457c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b457c:	b508      	push	{r3, lr}
   b457e:	4b02      	ldr	r3, [pc, #8]	; (b4588 <hal_usart_init_ex+0xc>)
   b4580:	681b      	ldr	r3, [r3, #0]
   b4582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4584:	9301      	str	r3, [sp, #4]
   b4586:	bd08      	pop	{r3, pc}
   b4588:	0003023c 	.word	0x0003023c

000b458c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b458c:	b508      	push	{r3, lr}
   b458e:	4b02      	ldr	r3, [pc, #8]	; (b4598 <HAL_USB_USART_Init+0xc>)
   b4590:	681b      	ldr	r3, [r3, #0]
   b4592:	681b      	ldr	r3, [r3, #0]
   b4594:	9301      	str	r3, [sp, #4]
   b4596:	bd08      	pop	{r3, pc}
   b4598:	0003024c 	.word	0x0003024c

000b459c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b459c:	b508      	push	{r3, lr}
   b459e:	4b02      	ldr	r3, [pc, #8]	; (b45a8 <HAL_USB_USART_Begin+0xc>)
   b45a0:	681b      	ldr	r3, [r3, #0]
   b45a2:	685b      	ldr	r3, [r3, #4]
   b45a4:	9301      	str	r3, [sp, #4]
   b45a6:	bd08      	pop	{r3, pc}
   b45a8:	0003024c 	.word	0x0003024c

000b45ac <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b45ac:	b508      	push	{r3, lr}
   b45ae:	4b02      	ldr	r3, [pc, #8]	; (b45b8 <HAL_USB_USART_End+0xc>)
   b45b0:	681b      	ldr	r3, [r3, #0]
   b45b2:	689b      	ldr	r3, [r3, #8]
   b45b4:	9301      	str	r3, [sp, #4]
   b45b6:	bd08      	pop	{r3, pc}
   b45b8:	0003024c 	.word	0x0003024c

000b45bc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b45bc:	b508      	push	{r3, lr}
   b45be:	4b02      	ldr	r3, [pc, #8]	; (b45c8 <HAL_USB_USART_Available_Data+0xc>)
   b45c0:	681b      	ldr	r3, [r3, #0]
   b45c2:	691b      	ldr	r3, [r3, #16]
   b45c4:	9301      	str	r3, [sp, #4]
   b45c6:	bd08      	pop	{r3, pc}
   b45c8:	0003024c 	.word	0x0003024c

000b45cc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b45cc:	b508      	push	{r3, lr}
   b45ce:	4b02      	ldr	r3, [pc, #8]	; (b45d8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b45d0:	681b      	ldr	r3, [r3, #0]
   b45d2:	695b      	ldr	r3, [r3, #20]
   b45d4:	9301      	str	r3, [sp, #4]
   b45d6:	bd08      	pop	{r3, pc}
   b45d8:	0003024c 	.word	0x0003024c

000b45dc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b45dc:	b508      	push	{r3, lr}
   b45de:	4b02      	ldr	r3, [pc, #8]	; (b45e8 <HAL_USB_USART_Receive_Data+0xc>)
   b45e0:	681b      	ldr	r3, [r3, #0]
   b45e2:	699b      	ldr	r3, [r3, #24]
   b45e4:	9301      	str	r3, [sp, #4]
   b45e6:	bd08      	pop	{r3, pc}
   b45e8:	0003024c 	.word	0x0003024c

000b45ec <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b45ec:	b508      	push	{r3, lr}
   b45ee:	4b02      	ldr	r3, [pc, #8]	; (b45f8 <HAL_USB_USART_Send_Data+0xc>)
   b45f0:	681b      	ldr	r3, [r3, #0]
   b45f2:	69db      	ldr	r3, [r3, #28]
   b45f4:	9301      	str	r3, [sp, #4]
   b45f6:	bd08      	pop	{r3, pc}
   b45f8:	0003024c 	.word	0x0003024c

000b45fc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b45fc:	b508      	push	{r3, lr}
   b45fe:	4b02      	ldr	r3, [pc, #8]	; (b4608 <HAL_USB_USART_Flush_Data+0xc>)
   b4600:	681b      	ldr	r3, [r3, #0]
   b4602:	6a1b      	ldr	r3, [r3, #32]
   b4604:	9301      	str	r3, [sp, #4]
   b4606:	bd08      	pop	{r3, pc}
   b4608:	0003024c 	.word	0x0003024c

000b460c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b460c:	b508      	push	{r3, lr}
   b460e:	4b02      	ldr	r3, [pc, #8]	; (b4618 <panic_+0xc>)
   b4610:	681b      	ldr	r3, [r3, #0]
   b4612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4614:	9301      	str	r3, [sp, #4]
   b4616:	bd08      	pop	{r3, pc}
   b4618:	00030260 	.word	0x00030260

000b461c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b461c:	b508      	push	{r3, lr}
   b461e:	4b02      	ldr	r3, [pc, #8]	; (b4628 <log_message+0xc>)
   b4620:	681b      	ldr	r3, [r3, #0]
   b4622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4624:	9301      	str	r3, [sp, #4]
   b4626:	bd08      	pop	{r3, pc}
   b4628:	00030260 	.word	0x00030260

000b462c <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b462c:	b508      	push	{r3, lr}
   b462e:	4b02      	ldr	r3, [pc, #8]	; (b4638 <log_message_v+0xc>)
   b4630:	681b      	ldr	r3, [r3, #0]
   b4632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4634:	9301      	str	r3, [sp, #4]
   b4636:	bd08      	pop	{r3, pc}
   b4638:	00030260 	.word	0x00030260

000b463c <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b463c:	b508      	push	{r3, lr}
   b463e:	4b02      	ldr	r3, [pc, #8]	; (b4648 <log_level_name+0xc>)
   b4640:	681b      	ldr	r3, [r3, #0]
   b4642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b4644:	9301      	str	r3, [sp, #4]
   b4646:	bd08      	pop	{r3, pc}
   b4648:	00030260 	.word	0x00030260

000b464c <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b464c:	b508      	push	{r3, lr}
   b464e:	4b02      	ldr	r3, [pc, #8]	; (b4658 <log_set_callbacks+0xc>)
   b4650:	681b      	ldr	r3, [r3, #0]
   b4652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b4654:	9301      	str	r3, [sp, #4]
   b4656:	bd08      	pop	{r3, pc}
   b4658:	00030260 	.word	0x00030260

000b465c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b465c:	b508      	push	{r3, lr}
   b465e:	4b02      	ldr	r3, [pc, #8]	; (b4668 <set_system_mode+0xc>)
   b4660:	681b      	ldr	r3, [r3, #0]
   b4662:	685b      	ldr	r3, [r3, #4]
   b4664:	9301      	str	r3, [sp, #4]
   b4666:	bd08      	pop	{r3, pc}
   b4668:	00030220 	.word	0x00030220

000b466c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b466c:	b508      	push	{r3, lr}
   b466e:	4b02      	ldr	r3, [pc, #8]	; (b4678 <system_thread_set_state+0xc>)
   b4670:	681b      	ldr	r3, [r3, #0]
   b4672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4674:	9301      	str	r3, [sp, #4]
   b4676:	bd08      	pop	{r3, pc}
   b4678:	00030220 	.word	0x00030220

000b467c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b467c:	b508      	push	{r3, lr}
   b467e:	4b03      	ldr	r3, [pc, #12]	; (b468c <system_ctrl_set_app_request_handler+0x10>)
   b4680:	681b      	ldr	r3, [r3, #0]
   b4682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4686:	9301      	str	r3, [sp, #4]
   b4688:	bd08      	pop	{r3, pc}
   b468a:	0000      	.short	0x0000
   b468c:	00030220 	.word	0x00030220

000b4690 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4690:	b508      	push	{r3, lr}
   b4692:	4b03      	ldr	r3, [pc, #12]	; (b46a0 <system_ctrl_set_result+0x10>)
   b4694:	681b      	ldr	r3, [r3, #0]
   b4696:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b469a:	9301      	str	r3, [sp, #4]
   b469c:	bd08      	pop	{r3, pc}
   b469e:	0000      	.short	0x0000
   b46a0:	00030220 	.word	0x00030220

000b46a4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b46a4:	b508      	push	{r3, lr}
   b46a6:	4b02      	ldr	r3, [pc, #8]	; (b46b0 <network_connect+0xc>)
   b46a8:	681b      	ldr	r3, [r3, #0]
   b46aa:	685b      	ldr	r3, [r3, #4]
   b46ac:	9301      	str	r3, [sp, #4]
   b46ae:	bd08      	pop	{r3, pc}
   b46b0:	00030240 	.word	0x00030240

000b46b4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b46b4:	b508      	push	{r3, lr}
   b46b6:	4b02      	ldr	r3, [pc, #8]	; (b46c0 <network_connecting+0xc>)
   b46b8:	681b      	ldr	r3, [r3, #0]
   b46ba:	689b      	ldr	r3, [r3, #8]
   b46bc:	9301      	str	r3, [sp, #4]
   b46be:	bd08      	pop	{r3, pc}
   b46c0:	00030240 	.word	0x00030240

000b46c4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b46c4:	b508      	push	{r3, lr}
   b46c6:	4b02      	ldr	r3, [pc, #8]	; (b46d0 <network_disconnect+0xc>)
   b46c8:	681b      	ldr	r3, [r3, #0]
   b46ca:	68db      	ldr	r3, [r3, #12]
   b46cc:	9301      	str	r3, [sp, #4]
   b46ce:	bd08      	pop	{r3, pc}
   b46d0:	00030240 	.word	0x00030240

000b46d4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b46d4:	b508      	push	{r3, lr}
   b46d6:	4b02      	ldr	r3, [pc, #8]	; (b46e0 <network_ready+0xc>)
   b46d8:	681b      	ldr	r3, [r3, #0]
   b46da:	691b      	ldr	r3, [r3, #16]
   b46dc:	9301      	str	r3, [sp, #4]
   b46de:	bd08      	pop	{r3, pc}
   b46e0:	00030240 	.word	0x00030240

000b46e4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b46e4:	b508      	push	{r3, lr}
   b46e6:	4b02      	ldr	r3, [pc, #8]	; (b46f0 <network_on+0xc>)
   b46e8:	681b      	ldr	r3, [r3, #0]
   b46ea:	695b      	ldr	r3, [r3, #20]
   b46ec:	9301      	str	r3, [sp, #4]
   b46ee:	bd08      	pop	{r3, pc}
   b46f0:	00030240 	.word	0x00030240

000b46f4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b46f4:	b508      	push	{r3, lr}
   b46f6:	4b02      	ldr	r3, [pc, #8]	; (b4700 <network_off+0xc>)
   b46f8:	681b      	ldr	r3, [r3, #0]
   b46fa:	699b      	ldr	r3, [r3, #24]
   b46fc:	9301      	str	r3, [sp, #4]
   b46fe:	bd08      	pop	{r3, pc}
   b4700:	00030240 	.word	0x00030240

000b4704 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4704:	b508      	push	{r3, lr}
   b4706:	4b02      	ldr	r3, [pc, #8]	; (b4710 <network_listen+0xc>)
   b4708:	681b      	ldr	r3, [r3, #0]
   b470a:	69db      	ldr	r3, [r3, #28]
   b470c:	9301      	str	r3, [sp, #4]
   b470e:	bd08      	pop	{r3, pc}
   b4710:	00030240 	.word	0x00030240

000b4714 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4714:	b508      	push	{r3, lr}
   b4716:	4b02      	ldr	r3, [pc, #8]	; (b4720 <network_listening+0xc>)
   b4718:	681b      	ldr	r3, [r3, #0]
   b471a:	6a1b      	ldr	r3, [r3, #32]
   b471c:	9301      	str	r3, [sp, #4]
   b471e:	bd08      	pop	{r3, pc}
   b4720:	00030240 	.word	0x00030240

000b4724 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4724:	b508      	push	{r3, lr}
   b4726:	4b02      	ldr	r3, [pc, #8]	; (b4730 <network_set_listen_timeout+0xc>)
   b4728:	681b      	ldr	r3, [r3, #0]
   b472a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b472c:	9301      	str	r3, [sp, #4]
   b472e:	bd08      	pop	{r3, pc}
   b4730:	00030240 	.word	0x00030240

000b4734 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4734:	b508      	push	{r3, lr}
   b4736:	4b02      	ldr	r3, [pc, #8]	; (b4740 <network_get_listen_timeout+0xc>)
   b4738:	681b      	ldr	r3, [r3, #0]
   b473a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b473c:	9301      	str	r3, [sp, #4]
   b473e:	bd08      	pop	{r3, pc}
   b4740:	00030240 	.word	0x00030240

000b4744 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4744:	b508      	push	{r3, lr}
   b4746:	4b02      	ldr	r3, [pc, #8]	; (b4750 <network_is_on+0xc>)
   b4748:	681b      	ldr	r3, [r3, #0]
   b474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b474c:	9301      	str	r3, [sp, #4]
   b474e:	bd08      	pop	{r3, pc}
   b4750:	00030240 	.word	0x00030240

000b4754 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4754:	b508      	push	{r3, lr}
   b4756:	4b02      	ldr	r3, [pc, #8]	; (b4760 <network_is_off+0xc>)
   b4758:	681b      	ldr	r3, [r3, #0]
   b475a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b475c:	9301      	str	r3, [sp, #4]
   b475e:	bd08      	pop	{r3, pc}
   b4760:	00030240 	.word	0x00030240

000b4764 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4764:	b508      	push	{r3, lr}
   b4766:	4b02      	ldr	r3, [pc, #8]	; (b4770 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4768:	681b      	ldr	r3, [r3, #0]
   b476a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b476c:	9301      	str	r3, [sp, #4]
   b476e:	bd08      	pop	{r3, pc}
   b4770:	00030244 	.word	0x00030244

000b4774 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4774:	b508      	push	{r3, lr}
   b4776:	4b02      	ldr	r3, [pc, #8]	; (b4780 <malloc+0xc>)
   b4778:	681b      	ldr	r3, [r3, #0]
   b477a:	681b      	ldr	r3, [r3, #0]
   b477c:	9301      	str	r3, [sp, #4]
   b477e:	bd08      	pop	{r3, pc}
   b4780:	0003021c 	.word	0x0003021c

000b4784 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4784:	b508      	push	{r3, lr}
   b4786:	4b02      	ldr	r3, [pc, #8]	; (b4790 <free+0xc>)
   b4788:	681b      	ldr	r3, [r3, #0]
   b478a:	685b      	ldr	r3, [r3, #4]
   b478c:	9301      	str	r3, [sp, #4]
   b478e:	bd08      	pop	{r3, pc}
   b4790:	0003021c 	.word	0x0003021c

000b4794 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4794:	b508      	push	{r3, lr}
   b4796:	4b02      	ldr	r3, [pc, #8]	; (b47a0 <realloc+0xc>)
   b4798:	681b      	ldr	r3, [r3, #0]
   b479a:	689b      	ldr	r3, [r3, #8]
   b479c:	9301      	str	r3, [sp, #4]
   b479e:	bd08      	pop	{r3, pc}
   b47a0:	0003021c 	.word	0x0003021c

000b47a4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b47a4:	b508      	push	{r3, lr}
   b47a6:	4b02      	ldr	r3, [pc, #8]	; (b47b0 <vsnprintf+0xc>)
   b47a8:	681b      	ldr	r3, [r3, #0]
   b47aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b47ac:	9301      	str	r3, [sp, #4]
   b47ae:	bd08      	pop	{r3, pc}
   b47b0:	0003021c 	.word	0x0003021c

000b47b4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b47b4:	b508      	push	{r3, lr}
   b47b6:	4b02      	ldr	r3, [pc, #8]	; (b47c0 <abort+0xc>)
   b47b8:	681b      	ldr	r3, [r3, #0]
   b47ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b47bc:	9301      	str	r3, [sp, #4]
   b47be:	bd08      	pop	{r3, pc}
   b47c0:	0003021c 	.word	0x0003021c

000b47c4 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b47c4:	b508      	push	{r3, lr}
   b47c6:	4b02      	ldr	r3, [pc, #8]	; (b47d0 <__errno+0xc>)
   b47c8:	681b      	ldr	r3, [r3, #0]
   b47ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b47cc:	9301      	str	r3, [sp, #4]
   b47ce:	bd08      	pop	{r3, pc}
   b47d0:	0003021c 	.word	0x0003021c

000b47d4 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b47d4:	b508      	push	{r3, lr}
   b47d6:	4b02      	ldr	r3, [pc, #8]	; (b47e0 <__assert_func+0xc>)
   b47d8:	681b      	ldr	r3, [r3, #0]
   b47da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b47dc:	9301      	str	r3, [sp, #4]
   b47de:	bd08      	pop	{r3, pc}
   b47e0:	0003021c 	.word	0x0003021c

000b47e4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b47e4:	b508      	push	{r3, lr}
   b47e6:	4b02      	ldr	r3, [pc, #8]	; (b47f0 <newlib_impure_ptr_callback+0xc>)
   b47e8:	681b      	ldr	r3, [r3, #0]
   b47ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b47ec:	9301      	str	r3, [sp, #4]
   b47ee:	bd08      	pop	{r3, pc}
   b47f0:	0003021c 	.word	0x0003021c

000b47f4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b47f4:	2200      	movs	r2, #0
   b47f6:	6840      	ldr	r0, [r0, #4]
   b47f8:	4611      	mov	r1, r2
   b47fa:	f7ff bf8b 	b.w	b4714 <network_listening>

000b47fe <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b47fe:	2200      	movs	r2, #0
   b4800:	6840      	ldr	r0, [r0, #4]
   b4802:	4611      	mov	r1, r2
   b4804:	f7ff bf96 	b.w	b4734 <network_get_listen_timeout>

000b4808 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4808:	6840      	ldr	r0, [r0, #4]
   b480a:	2200      	movs	r2, #0
   b480c:	f7ff bf8a 	b.w	b4724 <network_set_listen_timeout>

000b4810 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4810:	6840      	ldr	r0, [r0, #4]
   b4812:	2200      	movs	r2, #0
   b4814:	f081 0101 	eor.w	r1, r1, #1
   b4818:	f7ff bf74 	b.w	b4704 <network_listen>

000b481c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b481c:	2300      	movs	r3, #0
   b481e:	6840      	ldr	r0, [r0, #4]
   b4820:	461a      	mov	r2, r3
   b4822:	4619      	mov	r1, r3
   b4824:	f7ff bf66 	b.w	b46f4 <network_off>

000b4828 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4828:	2300      	movs	r3, #0
   b482a:	6840      	ldr	r0, [r0, #4]
   b482c:	461a      	mov	r2, r3
   b482e:	4619      	mov	r1, r3
   b4830:	f7ff bf58 	b.w	b46e4 <network_on>

000b4834 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4834:	2200      	movs	r2, #0
   b4836:	6840      	ldr	r0, [r0, #4]
   b4838:	4611      	mov	r1, r2
   b483a:	f7ff bf4b 	b.w	b46d4 <network_ready>

000b483e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b483e:	2200      	movs	r2, #0
   b4840:	6840      	ldr	r0, [r0, #4]
   b4842:	4611      	mov	r1, r2
   b4844:	f7ff bf36 	b.w	b46b4 <network_connecting>

000b4848 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4848:	6840      	ldr	r0, [r0, #4]
   b484a:	2200      	movs	r2, #0
   b484c:	2102      	movs	r1, #2
   b484e:	f7ff bf39 	b.w	b46c4 <network_disconnect>

000b4852 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4852:	2300      	movs	r3, #0
   b4854:	6840      	ldr	r0, [r0, #4]
   b4856:	461a      	mov	r2, r3
   b4858:	f7ff bf24 	b.w	b46a4 <network_connect>

000b485c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b485c:	4b02      	ldr	r3, [pc, #8]	; (b4868 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b485e:	2203      	movs	r2, #3
   b4860:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4862:	4a02      	ldr	r2, [pc, #8]	; (b486c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4864:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4866:	4770      	bx	lr
   b4868:	2003e6a0 	.word	0x2003e6a0
   b486c:	000b7618 	.word	0x000b7618

000b4870 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4870:	4b05      	ldr	r3, [pc, #20]	; (b4888 <_GLOBAL__sub_I_System+0x18>)
   b4872:	2202      	movs	r2, #2
   b4874:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4876:	4b05      	ldr	r3, [pc, #20]	; (b488c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4878:	4a05      	ldr	r2, [pc, #20]	; (b4890 <_GLOBAL__sub_I_System+0x20>)
   b487a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b487c:	2000      	movs	r0, #0
   b487e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4882:	f7ff beeb 	b.w	b465c <set_system_mode>
   b4886:	bf00      	nop
   b4888:	2003e6b4 	.word	0x2003e6b4
   b488c:	2003e6a8 	.word	0x2003e6a8
   b4890:	ffff0000 	.word	0xffff0000

000b4894 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b4894:	b510      	push	{r4, lr}
   b4896:	4604      	mov	r4, r0
{
	free(buffer);
   b4898:	6800      	ldr	r0, [r0, #0]
   b489a:	f7ff ff73 	bl	b4784 <free>
}
   b489e:	4620      	mov	r0, r4
   b48a0:	bd10      	pop	{r4, pc}

000b48a2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b48a2:	b510      	push	{r4, lr}
   b48a4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b48a6:	6800      	ldr	r0, [r0, #0]
   b48a8:	b108      	cbz	r0, b48ae <_ZN6String10invalidateEv+0xc>
   b48aa:	f7ff ff6b 	bl	b4784 <free>
	buffer = NULL;
   b48ae:	2300      	movs	r3, #0
	capacity = len = 0;
   b48b0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b48b4:	6023      	str	r3, [r4, #0]
}
   b48b6:	bd10      	pop	{r4, pc}

000b48b8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b48b8:	b538      	push	{r3, r4, r5, lr}
   b48ba:	4604      	mov	r4, r0
   b48bc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b48be:	6800      	ldr	r0, [r0, #0]
   b48c0:	3101      	adds	r1, #1
   b48c2:	f7ff ff67 	bl	b4794 <realloc>
	if (newbuffer) {
   b48c6:	b110      	cbz	r0, b48ce <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b48c8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b48cc:	2001      	movs	r0, #1
	}
	return 0;
}
   b48ce:	bd38      	pop	{r3, r4, r5, pc}

000b48d0 <_ZN6String7reserveEj>:
{
   b48d0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b48d2:	6803      	ldr	r3, [r0, #0]
{
   b48d4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b48d6:	b123      	cbz	r3, b48e2 <_ZN6String7reserveEj+0x12>
   b48d8:	6843      	ldr	r3, [r0, #4]
   b48da:	428b      	cmp	r3, r1
   b48dc:	d301      	bcc.n	b48e2 <_ZN6String7reserveEj+0x12>
   b48de:	2001      	movs	r0, #1
}
   b48e0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b48e2:	4620      	mov	r0, r4
   b48e4:	f7ff ffe8 	bl	b48b8 <_ZN6String12changeBufferEj>
   b48e8:	2800      	cmp	r0, #0
   b48ea:	d0f9      	beq.n	b48e0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b48ec:	68a3      	ldr	r3, [r4, #8]
   b48ee:	2b00      	cmp	r3, #0
   b48f0:	d1f5      	bne.n	b48de <_ZN6String7reserveEj+0xe>
   b48f2:	6822      	ldr	r2, [r4, #0]
   b48f4:	7013      	strb	r3, [r2, #0]
   b48f6:	e7f2      	b.n	b48de <_ZN6String7reserveEj+0xe>

000b48f8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b48f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b48fa:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b48fc:	4611      	mov	r1, r2
   b48fe:	9201      	str	r2, [sp, #4]
{
   b4900:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b4902:	f7ff ffe5 	bl	b48d0 <_ZN6String7reserveEj>
   b4906:	9a01      	ldr	r2, [sp, #4]
   b4908:	b928      	cbnz	r0, b4916 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b490a:	4620      	mov	r0, r4
   b490c:	f7ff ffc9 	bl	b48a2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b4910:	4620      	mov	r0, r4
   b4912:	b003      	add	sp, #12
   b4914:	bd30      	pop	{r4, r5, pc}
	len = length;
   b4916:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b4918:	4629      	mov	r1, r5
   b491a:	6820      	ldr	r0, [r4, #0]
   b491c:	f002 fc82 	bl	b7224 <memcpy>
	buffer[len] = 0;
   b4920:	6822      	ldr	r2, [r4, #0]
   b4922:	68a3      	ldr	r3, [r4, #8]
   b4924:	2100      	movs	r1, #0
   b4926:	54d1      	strb	r1, [r2, r3]
	return *this;
   b4928:	e7f2      	b.n	b4910 <_ZN6String4copyEPKcj+0x18>

000b492a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b492a:	b538      	push	{r3, r4, r5, lr}
   b492c:	4605      	mov	r5, r0
	if (buffer) {
   b492e:	6800      	ldr	r0, [r0, #0]
{
   b4930:	460c      	mov	r4, r1
	if (buffer) {
   b4932:	b168      	cbz	r0, b4950 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b4934:	686a      	ldr	r2, [r5, #4]
   b4936:	688b      	ldr	r3, [r1, #8]
   b4938:	429a      	cmp	r2, r3
   b493a:	d307      	bcc.n	b494c <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b493c:	6809      	ldr	r1, [r1, #0]
   b493e:	f002 fce6 	bl	b730e <strcpy>
			len = rhs.len;
   b4942:	68a3      	ldr	r3, [r4, #8]
   b4944:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b4946:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b4948:	60a3      	str	r3, [r4, #8]
}
   b494a:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b494c:	f7ff ff1a 	bl	b4784 <free>
	buffer = rhs.buffer;
   b4950:	6823      	ldr	r3, [r4, #0]
   b4952:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b4954:	6863      	ldr	r3, [r4, #4]
   b4956:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b4958:	68a3      	ldr	r3, [r4, #8]
   b495a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b495c:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b495e:	e9c4 3300 	strd	r3, r3, [r4]
   b4962:	e7f1      	b.n	b4948 <_ZN6String4moveERS_+0x1e>

000b4964 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b4964:	b510      	push	{r4, lr}
	buffer = NULL;
   b4966:	2300      	movs	r3, #0
	capacity = 0;
   b4968:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b496c:	4604      	mov	r4, r0
	len = 0;
   b496e:	6083      	str	r3, [r0, #8]
	flags = 0;
   b4970:	7303      	strb	r3, [r0, #12]
	move(rval);
   b4972:	f7ff ffda 	bl	b492a <_ZN6String4moveERS_>
}
   b4976:	4620      	mov	r0, r4
   b4978:	bd10      	pop	{r4, pc}

000b497a <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b497a:	4288      	cmp	r0, r1
{
   b497c:	b510      	push	{r4, lr}
   b497e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b4980:	d005      	beq.n	b498e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b4982:	680b      	ldr	r3, [r1, #0]
   b4984:	b12b      	cbz	r3, b4992 <_ZN6StringaSERKS_+0x18>
   b4986:	688a      	ldr	r2, [r1, #8]
   b4988:	4619      	mov	r1, r3
   b498a:	f7ff ffb5 	bl	b48f8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b498e:	4620      	mov	r0, r4
   b4990:	bd10      	pop	{r4, pc}
	else invalidate();
   b4992:	f7ff ff86 	bl	b48a2 <_ZN6String10invalidateEv>
   b4996:	e7fa      	b.n	b498e <_ZN6StringaSERKS_+0x14>

000b4998 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b4998:	b510      	push	{r4, lr}
	buffer = NULL;
   b499a:	2300      	movs	r3, #0
String::String(const String &value)
   b499c:	4604      	mov	r4, r0
	capacity = 0;
   b499e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b49a2:	6083      	str	r3, [r0, #8]
	flags = 0;
   b49a4:	7303      	strb	r3, [r0, #12]
	*this = value;
   b49a6:	f7ff ffe8 	bl	b497a <_ZN6StringaSERKS_>
}
   b49aa:	4620      	mov	r0, r4
   b49ac:	bd10      	pop	{r4, pc}

000b49ae <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  // 2070.  allocate_shared should use allocator_traits<A>::construct
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
	      std::forward<_Args>(__args)...); // might throw
	}

      ~_Sp_counted_ptr_inplace() noexcept { }
   b49ae:	4770      	bx	lr

000b49b0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	// Check for the fake type_info first, so we don't try to access it
	// as a real type_info object. Otherwise, check if it's the real
	// type_info for this class. With RTTI enabled we can check directly,
	// or call a library function to do it.
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
	    ||
   b49b0:	4b06      	ldr	r3, [pc, #24]	; (b49cc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b49b2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b49b4:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b49b6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b49ba:	d005      	beq.n	b49c8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
#if __cpp_rtti
	    __ti == typeid(_Sp_make_shared_tag)
#else
	    _Sp_make_shared_tag::_S_eq(__ti)
   b49bc:	4608      	mov	r0, r1
   b49be:	f002 fb01 	bl	b6fc4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
#endif
	   )
	  return __ptr;
	return nullptr;
   b49c2:	2800      	cmp	r0, #0
   b49c4:	bf08      	it	eq
   b49c6:	2400      	moveq	r4, #0
      }
   b49c8:	4620      	mov	r0, r4
   b49ca:	bd10      	pop	{r4, pc}
   b49cc:	000b7728 	.word	0x000b7728

000b49d0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b49d0:	b510      	push	{r4, lr}
   b49d2:	2130      	movs	r1, #48	; 0x30
   b49d4:	4604      	mov	r4, r0
   b49d6:	f7ff fb72 	bl	b40be <_ZdlPvj>
   b49da:	4620      	mov	r0, r4
   b49dc:	bd10      	pop	{r4, pc}

000b49de <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b49de:	2130      	movs	r1, #48	; 0x30
   b49e0:	f7ff bb6d 	b.w	b40be <_ZdlPvj>

000b49e4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b49e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b49e6:	2500      	movs	r5, #0
   b49e8:	1cec      	adds	r4, r5, #3
   b49ea:	428c      	cmp	r4, r1
   b49ec:	d80d      	bhi.n	b4a0a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b49ee:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b49f0:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b49f2:	5d87      	ldrb	r7, [r0, r6]
   b49f4:	4297      	cmp	r7, r2
   b49f6:	d105      	bne.n	b4a04 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b49f8:	4426      	add	r6, r4
   b49fa:	42b1      	cmp	r1, r6
   b49fc:	d305      	bcc.n	b4a0a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b49fe:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b4a00:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b4a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b4a04:	3401      	adds	r4, #1
   b4a06:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b4a08:	e7ee      	b.n	b49e8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b4a0a:	2000      	movs	r0, #0
   b4a0c:	e7f9      	b.n	b4a02 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

000b4a0e <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE9_M_invokeERKSt9_Any_dataS3_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4a0e:	4603      	mov	r3, r0
   b4a10:	4608      	mov	r0, r1
	    return __source._M_access<_Functor*>();
   b4a12:	681b      	ldr	r3, [r3, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4a14:	e9d3 2100 	ldrd	r2, r1, [r3]
   b4a18:	4710      	bx	r2

000b4a1a <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	switch (__op)
   b4a1a:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4a1c:	b538      	push	{r3, r4, r5, lr}
   b4a1e:	4604      	mov	r4, r0
	switch (__op)
   b4a20:	d102      	bne.n	b4a28 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b4a22:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b4a24:	6023      	str	r3, [r4, #0]
	}
   b4a26:	e003      	b.n	b4a30 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	  switch (__op)
   b4a28:	2a02      	cmp	r2, #2
   b4a2a:	d003      	beq.n	b4a34 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
   b4a2c:	2a03      	cmp	r2, #3
   b4a2e:	d00d      	beq.n	b4a4c <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x32>
      }
   b4a30:	2000      	movs	r0, #0
   b4a32:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b4a34:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b4a36:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4a38:	f7ff fb3d 	bl	b40b6 <_Znwj>
   b4a3c:	4603      	mov	r3, r0
   b4a3e:	2800      	cmp	r0, #0
   b4a40:	d0f0      	beq.n	b4a24 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
   b4a42:	e895 0003 	ldmia.w	r5, {r0, r1}
   b4a46:	e883 0003 	stmia.w	r3, {r0, r1}
   b4a4a:	e7eb      	b.n	b4a24 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b4a4c:	6800      	ldr	r0, [r0, #0]
   b4a4e:	2800      	cmp	r0, #0
   b4a50:	d0ee      	beq.n	b4a30 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
   b4a52:	2108      	movs	r1, #8
   b4a54:	f7ff fb33 	bl	b40be <_ZdlPvj>
   b4a58:	e7ea      	b.n	b4a30 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>

000b4a5a <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4a5a:	b510      	push	{r4, lr}
      if (_M_manager)
   b4a5c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4a5e:	4604      	mov	r4, r0
      if (_M_manager)
   b4a60:	b113      	cbz	r3, b4a68 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4a62:	2203      	movs	r2, #3
   b4a64:	4601      	mov	r1, r0
   b4a66:	4798      	blx	r3
    }
   b4a68:	4620      	mov	r0, r4
   b4a6a:	bd10      	pop	{r4, pc}

000b4a6c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b4a6c:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b4a6e:	6843      	ldr	r3, [r0, #4]
   b4a70:	3b01      	subs	r3, #1
    {
   b4a72:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b4a74:	6043      	str	r3, [r0, #4]
   b4a76:	b963      	cbnz	r3, b4a92 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b4a78:	6803      	ldr	r3, [r0, #0]
   b4a7a:	689b      	ldr	r3, [r3, #8]
   b4a7c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4a7e:	68a3      	ldr	r3, [r4, #8]
   b4a80:	3b01      	subs	r3, #1
   b4a82:	60a3      	str	r3, [r4, #8]
   b4a84:	b92b      	cbnz	r3, b4a92 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b4a86:	6823      	ldr	r3, [r4, #0]
   b4a88:	4620      	mov	r0, r4
   b4a8a:	68db      	ldr	r3, [r3, #12]
    }
   b4a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b4a90:	4718      	bx	r3
    }
   b4a92:	bd10      	pop	{r4, pc}

000b4a94 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b4a94:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b4a98:	b2da      	uxtb	r2, r3
   b4a9a:	2a09      	cmp	r2, #9
   b4a9c:	d801      	bhi.n	b4aa2 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b4a9e:	4618      	mov	r0, r3
   b4aa0:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b4aa2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b4aa6:	2b05      	cmp	r3, #5
   b4aa8:	d801      	bhi.n	b4aae <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b4aaa:	3857      	subs	r0, #87	; 0x57
   b4aac:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b4aae:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b4ab2:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b4ab4:	bf94      	ite	ls
   b4ab6:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b4ab8:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b4abc:	4770      	bx	lr
	...

000b4ac0 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b4ac0:	b510      	push	{r4, lr}
            locked_(false) {
   b4ac2:	2300      	movs	r3, #0
   b4ac4:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b4ac6:	4b04      	ldr	r3, [pc, #16]	; (b4ad8 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b4ac8:	4604      	mov	r4, r0
   b4aca:	6818      	ldr	r0, [r3, #0]
   b4acc:	f7ff fcfe 	bl	b44cc <os_mutex_recursive_lock>
        locked_ = true;
   b4ad0:	2301      	movs	r3, #1
   b4ad2:	7023      	strb	r3, [r4, #0]
    }
   b4ad4:	4620      	mov	r0, r4
   b4ad6:	bd10      	pop	{r4, pc}
   b4ad8:	2003e6bc 	.word	0x2003e6bc

000b4adc <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b4adc:	b510      	push	{r4, lr}
        if (locked_) {
   b4ade:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b4ae0:	4604      	mov	r4, r0
        if (locked_) {
   b4ae2:	b11b      	cbz	r3, b4aec <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b4ae4:	4b02      	ldr	r3, [pc, #8]	; (b4af0 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b4ae6:	6818      	ldr	r0, [r3, #0]
   b4ae8:	f7ff fcf8 	bl	b44dc <os_mutex_recursive_unlock>
    }
   b4aec:	4620      	mov	r0, r4
   b4aee:	bd10      	pop	{r4, pc}
   b4af0:	2003e6bc 	.word	0x2003e6bc

000b4af4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b4af4:	b082      	sub	sp, #8
   b4af6:	4603      	mov	r3, r0
    address_ = addr;
   b4af8:	6808      	ldr	r0, [r1, #0]
   b4afa:	6849      	ldr	r1, [r1, #4]
   b4afc:	466a      	mov	r2, sp
   b4afe:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b4b00:	466a      	mov	r2, sp
   b4b02:	ca03      	ldmia	r2!, {r0, r1}
   b4b04:	6018      	str	r0, [r3, #0]
}
   b4b06:	4618      	mov	r0, r3
    address_ = addr.address_;
   b4b08:	6059      	str	r1, [r3, #4]
}
   b4b0a:	b002      	add	sp, #8
   b4b0c:	4770      	bx	lr

000b4b0e <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b4b0e:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b4b10:	7982      	ldrb	r2, [r0, #6]
   b4b12:	798b      	ldrb	r3, [r1, #6]
   b4b14:	429a      	cmp	r2, r3
   b4b16:	d106      	bne.n	b4b26 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b4b18:	2206      	movs	r2, #6
   b4b1a:	f002 fb73 	bl	b7204 <memcmp>
   b4b1e:	fab0 f080 	clz	r0, r0
   b4b22:	0940      	lsrs	r0, r0, #5
}
   b4b24:	bd08      	pop	{r3, pc}
    return false;
   b4b26:	2000      	movs	r0, #0
   b4b28:	e7fc      	b.n	b4b24 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b4b2a <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b4b2a:	f04f 33ff 	mov.w	r3, #4294967295
   b4b2e:	6003      	str	r3, [r0, #0]
   b4b30:	8083      	strh	r3, [r0, #4]
}
   b4b32:	2000      	movs	r0, #0
   b4b34:	4770      	bx	lr

000b4b36 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b4b36:	b508      	push	{r3, lr}
   b4b38:	4602      	mov	r2, r0
        : address_{} {
   b4b3a:	2100      	movs	r1, #0
   b4b3c:	6001      	str	r1, [r0, #0]
   b4b3e:	6041      	str	r1, [r0, #4]
    clear();
   b4b40:	f7ff fff3 	bl	b4b2a <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b4b44:	7191      	strb	r1, [r2, #6]
}
   b4b46:	4610      	mov	r0, r2
   b4b48:	bd08      	pop	{r3, pc}
	...

000b4b4c <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b4b4c:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b4b4e:	2301      	movs	r3, #1
   b4b50:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b4b52:	4b05      	ldr	r3, [pc, #20]	; (b4b68 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b4b54:	4602      	mov	r2, r0
   b4b56:	f103 0110 	add.w	r1, r3, #16
   b4b5a:	f853 4b04 	ldr.w	r4, [r3], #4
   b4b5e:	f842 4b04 	str.w	r4, [r2], #4
   b4b62:	428b      	cmp	r3, r1
   b4b64:	d1f9      	bne.n	b4b5a <_ZN8particle7BleUuidC1Ev+0xe>
}
   b4b66:	bd10      	pop	{r4, pc}
   b4b68:	000b7572 	.word	0x000b7572

000b4b6c <_ZNK8particle7BleUuid4typeEv>:
}
   b4b6c:	6900      	ldr	r0, [r0, #16]
   b4b6e:	4770      	bx	lr

000b4b70 <_ZNK8particle7BleUuid7shortedEv>:
}
   b4b70:	8980      	ldrh	r0, [r0, #12]
   b4b72:	4770      	bx	lr

000b4b74 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b4b74:	4770      	bx	lr
	...

000b4b78 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b4b78:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b4b7a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b4b7e:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b4b80:	4b34      	ldr	r3, [pc, #208]	; (b4c54 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b4b82:	460c      	mov	r4, r1
   b4b84:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b4b86:	4602      	mov	r2, r0
   b4b88:	f103 0110 	add.w	r1, r3, #16
   b4b8c:	f853 0b04 	ldr.w	r0, [r3], #4
   b4b90:	f842 0b04 	str.w	r0, [r2], #4
   b4b94:	428b      	cmp	r3, r1
   b4b96:	d1f9      	bne.n	b4b8c <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b4b98:	b344      	cbz	r4, b4bec <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b4b9a:	2124      	movs	r1, #36	; 0x24
   b4b9c:	4620      	mov	r0, r4
   b4b9e:	f002 fbd2 	bl	b7346 <strnlen>
   b4ba2:	2804      	cmp	r0, #4
   b4ba4:	f04f 0500 	mov.w	r5, #0
   b4ba8:	d123      	bne.n	b4bf2 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b4baa:	f8ad 5004 	strh.w	r5, [sp, #4]
   b4bae:	af01      	add	r7, sp, #4
   b4bb0:	1ca5      	adds	r5, r4, #2
   b4bb2:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b4bb4:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b4bb8:	f7ff ff6c 	bl	b4a94 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b4bbc:	f1b0 0800 	subs.w	r8, r0, #0
   b4bc0:	db12      	blt.n	b4be8 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b4bc2:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b4bc6:	f7ff ff65 	bl	b4a94 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b4bca:	2800      	cmp	r0, #0
   b4bcc:	db0c      	blt.n	b4be8 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b4bce:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b4bd0:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b4bd4:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b4bd6:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b4bda:	d1eb      	bne.n	b4bb4 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b4bdc:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b4be0:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b4be2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b4be6:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b4be8:	2300      	movs	r3, #0
   b4bea:	6133      	str	r3, [r6, #16]
}
   b4bec:	b002      	add	sp, #8
   b4bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b4bf2:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b4bf6:	2124      	movs	r1, #36	; 0x24
   b4bf8:	4620      	mov	r0, r4
   b4bfa:	f002 fba4 	bl	b7346 <strnlen>
   b4bfe:	42a8      	cmp	r0, r5
   b4c00:	d807      	bhi.n	b4c12 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b4c02:	4642      	mov	r2, r8
   b4c04:	2100      	movs	r1, #0
   b4c06:	4630      	mov	r0, r6
}
   b4c08:	b002      	add	sp, #8
   b4c0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b4c0e:	f002 bb31 	b.w	b7274 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b4c12:	f1b8 0f00 	cmp.w	r8, #0
   b4c16:	d0e9      	beq.n	b4bec <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b4c18:	5d60      	ldrb	r0, [r4, r5]
   b4c1a:	f7ff ff3b 	bl	b4a94 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b4c1e:	0603      	lsls	r3, r0, #24
   b4c20:	d415      	bmi.n	b4c4e <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b4c22:	0100      	lsls	r0, r0, #4
   b4c24:	f108 38ff 	add.w	r8, r8, #4294967295
   b4c28:	b2c7      	uxtb	r7, r0
   b4c2a:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b4c2e:	2124      	movs	r1, #36	; 0x24
   b4c30:	4620      	mov	r0, r4
   b4c32:	f002 fb88 	bl	b7346 <strnlen>
   b4c36:	3501      	adds	r5, #1
   b4c38:	42a8      	cmp	r0, r5
   b4c3a:	d908      	bls.n	b4c4e <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b4c3c:	5d60      	ldrb	r0, [r4, r5]
   b4c3e:	f7ff ff29 	bl	b4a94 <_ZN8particle11hexToNibbleEc>
   b4c42:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b4c44:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b4c46:	bfa4      	itt	ge
   b4c48:	4338      	orrge	r0, r7
   b4c4a:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b4c4e:	3501      	adds	r5, #1
   b4c50:	e7d1      	b.n	b4bf6 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b4c52:	bf00      	nop
   b4c54:	000b7572 	.word	0x000b7572

000b4c58 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b4c58:	b513      	push	{r0, r1, r4, lr}
   b4c5a:	4604      	mov	r4, r0
   b4c5c:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b4c5e:	f7ff ff75 	bl	b4b4c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b4c62:	4620      	mov	r0, r4
   b4c64:	9901      	ldr	r1, [sp, #4]
   b4c66:	f7ff ff87 	bl	b4b78 <_ZN8particle7BleUuid9constructEPKc>
}
   b4c6a:	4620      	mov	r0, r4
   b4c6c:	b002      	add	sp, #8
   b4c6e:	bd10      	pop	{r4, pc}

000b4c70 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:

    void onAttMtuExchangedCallback(const BleOnAttMtuExchangedStdFunction& callback) {
        attMtuExchangedCallback_ = callback;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b4c70:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b4c72:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b4c76:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b4c7a:	4293      	cmp	r3, r2
   b4c7c:	4618      	mov	r0, r3
   b4c7e:	d006      	beq.n	b4c8e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b4c80:	6804      	ldr	r4, [r0, #0]
   b4c82:	8824      	ldrh	r4, [r4, #0]
   b4c84:	428c      	cmp	r4, r1
   b4c86:	f103 0308 	add.w	r3, r3, #8
   b4c8a:	d1f6      	bne.n	b4c7a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
                return &peer;
            }
        }
        return nullptr;
    }
   b4c8c:	bd10      	pop	{r4, pc}
        return nullptr;
   b4c8e:	2000      	movs	r0, #0
   b4c90:	e7fc      	b.n	b4c8c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b4c94 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b4c94:	b570      	push	{r4, r5, r6, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b4c96:	2500      	movs	r5, #0
   b4c98:	6005      	str	r5, [r0, #0]
   b4c9a:	4606      	mov	r6, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4c9c:	2030      	movs	r0, #48	; 0x30
   b4c9e:	f7ff fa0a 	bl	b40b6 <_Znwj>
	  auto __pi = ::new (__mem)
   b4ca2:	4604      	mov	r4, r0
   b4ca4:	b188      	cbz	r0, b4cca <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b4ca6:	2301      	movs	r3, #1
   b4ca8:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b4cac:	4b09      	ldr	r3, [pc, #36]	; (b4cd4 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b4cae:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b4cb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b4cb4:	8183      	strh	r3, [r0, #12]
   b4cb6:	300e      	adds	r0, #14
   b4cb8:	f7ff ff3d 	bl	b4b36 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b4cbc:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b4cc0:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b4cc4:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b4cc8:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b4cca:	6074      	str	r4, [r6, #4]
   b4ccc:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b4cce:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b4cd0:	4630      	mov	r0, r6
   b4cd2:	bd70      	pop	{r4, r5, r6, pc}
   b4cd4:	000b7714 	.word	0x000b7714

000b4cd8 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b4cd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4cda:	460d      	mov	r5, r1
   b4cdc:	4604      	mov	r4, r0
    WiringBleLock lk;
   b4cde:	a801      	add	r0, sp, #4
   b4ce0:	f7ff feee 	bl	b4ac0 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b4ce4:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b4ce6:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b4cea:	6023      	str	r3, [r4, #0]
   b4cec:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b4cf0:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b4cf2:	a801      	add	r0, sp, #4
   b4cf4:	f7ff fef2 	bl	b4adc <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b4cf8:	4620      	mov	r0, r4
   b4cfa:	b003      	add	sp, #12
   b4cfc:	bd30      	pop	{r4, r5, pc}

000b4cfe <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b4cfe:	b530      	push	{r4, r5, lr}
   b4d00:	4605      	mov	r5, r0
   b4d02:	b087      	sub	sp, #28
   b4d04:	460c      	mov	r4, r1
    WiringBleLock lk;
   b4d06:	a801      	add	r0, sp, #4
   b4d08:	f7ff feda 	bl	b4ac0 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b4d0c:	682a      	ldr	r2, [r5, #0]
   b4d0e:	6823      	ldr	r3, [r4, #0]
   b4d10:	8812      	ldrh	r2, [r2, #0]
   b4d12:	881b      	ldrh	r3, [r3, #0]
   b4d14:	429a      	cmp	r2, r3
   b4d16:	d10d      	bne.n	b4d34 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b4d18:	4629      	mov	r1, r5
   b4d1a:	a802      	add	r0, sp, #8
   b4d1c:	f7ff ffdc 	bl	b4cd8 <_ZNK8particle13BlePeerDevice7addressEv>
   b4d20:	4621      	mov	r1, r4
   b4d22:	a804      	add	r0, sp, #16
   b4d24:	f7ff ffd8 	bl	b4cd8 <_ZNK8particle13BlePeerDevice7addressEv>
   b4d28:	a904      	add	r1, sp, #16
   b4d2a:	a802      	add	r0, sp, #8
   b4d2c:	f7ff feef 	bl	b4b0e <_ZNK8particle10BleAddresseqERKS0_>
   b4d30:	4604      	mov	r4, r0
   b4d32:	b900      	cbnz	r0, b4d36 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b4d34:	2400      	movs	r4, #0
    WiringBleLock lk;
   b4d36:	a801      	add	r0, sp, #4
   b4d38:	f7ff fed0 	bl	b4adc <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b4d3c:	4620      	mov	r0, r4
   b4d3e:	b007      	add	sp, #28
   b4d40:	bd30      	pop	{r4, r5, pc}
	...

000b4d44 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b4d44:	b510      	push	{r4, lr}
   b4d46:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b4d48:	2064      	movs	r0, #100	; 0x64
   b4d4a:	f7ff f9b4 	bl	b40b6 <_Znwj>
   b4d4e:	b168      	cbz	r0, b4d6c <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b4d50:	2300      	movs	r3, #0
   b4d52:	e9c0 3300 	strd	r3, r3, [r0]
   b4d56:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b4d5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b4d5e:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b4d62:	6203      	str	r3, [r0, #32]
    _Function_base() : _M_manager(nullptr) { }
   b4d64:	62c3      	str	r3, [r0, #44]	; 0x2c
   b4d66:	63c3      	str	r3, [r0, #60]	; 0x3c
   b4d68:	64c3      	str	r3, [r0, #76]	; 0x4c
   b4d6a:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b4d6c:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b4d6e:	b920      	cbnz	r0, b4d7a <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b4d70:	4a0a      	ldr	r2, [pc, #40]	; (b4d9c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b4d72:	490b      	ldr	r1, [pc, #44]	; (b4da0 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b4d74:	200a      	movs	r0, #10
   b4d76:	f7ff fc49 	bl	b460c <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b4d7a:	2000      	movs	r0, #0
   b4d7c:	f7ff fb52 	bl	b4424 <hal_ble_stack_init>
   b4d80:	b120      	cbz	r0, b4d8c <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b4d82:	4a06      	ldr	r2, [pc, #24]	; (b4d9c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b4d84:	4907      	ldr	r1, [pc, #28]	; (b4da4 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b4d86:	200a      	movs	r0, #10
   b4d88:	f7ff fc40 	bl	b460c <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b4d8c:	6821      	ldr	r1, [r4, #0]
   b4d8e:	4806      	ldr	r0, [pc, #24]	; (b4da8 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b4d90:	2200      	movs	r2, #0
   b4d92:	f7ff fb81 	bl	b4498 <hal_ble_set_callback_on_periph_link_events>
}
   b4d96:	4620      	mov	r0, r4
   b4d98:	bd10      	pop	{r4, pc}
   b4d9a:	bf00      	nop
   b4d9c:	000b4405 	.word	0x000b4405
   b4da0:	000b764c 	.word	0x000b764c
   b4da4:	000b768a 	.word	0x000b768a
   b4da8:	000b52c9 	.word	0x000b52c9

000b4dac <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b4dac:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b4dae:	4c0a      	ldr	r4, [pc, #40]	; (b4dd8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b4db0:	7823      	ldrb	r3, [r4, #0]
   b4db2:	f3bf 8f5b 	dmb	ish
   b4db6:	07db      	lsls	r3, r3, #31
   b4db8:	d40c      	bmi.n	b4dd4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b4dba:	4620      	mov	r0, r4
   b4dbc:	f7ff f98e 	bl	b40dc <__cxa_guard_acquire>
   b4dc0:	b140      	cbz	r0, b4dd4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b4dc2:	4806      	ldr	r0, [pc, #24]	; (b4ddc <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b4dc4:	f7ff ffbe 	bl	b4d44 <_ZN8particle14BleLocalDeviceC1Ev>
   b4dc8:	4620      	mov	r0, r4
   b4dca:	f7ff f98c 	bl	b40e6 <__cxa_guard_release>
   b4dce:	4804      	ldr	r0, [pc, #16]	; (b4de0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b4dd0:	f002 fa0a 	bl	b71e8 <atexit>
    return instance;
}
   b4dd4:	4801      	ldr	r0, [pc, #4]	; (b4ddc <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b4dd6:	bd10      	pop	{r4, pc}
   b4dd8:	2003e6b8 	.word	0x2003e6b8
   b4ddc:	2003e6c0 	.word	0x2003e6c0
   b4de0:	000b4fb9 	.word	0x000b4fb9

000b4de4 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b4de4:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b4de6:	2000      	movs	r0, #0
   b4de8:	f7ff fb1c 	bl	b4424 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b4dec:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b4df0:	bd08      	pop	{r3, pc}

000b4df2 <_ZNK8particle14BleLocalDevice22setAdvertisingIntervalEt>:

bool BleLocalDevice::getProvisioningStatus() const {
    return system_ble_prov_get_status(nullptr);
}

int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
   b4df2:	b530      	push	{r4, r5, lr}
   b4df4:	b085      	sub	sp, #20
    hal_ble_adv_params_t advParams = {};
   b4df6:	2400      	movs	r4, #0
    advParams.size = sizeof(hal_ble_adv_params_t);
   b4df8:	230c      	movs	r3, #12
   b4dfa:	f8ad 3006 	strh.w	r3, [sp, #6]
int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
   b4dfe:	460d      	mov	r5, r1
    advParams.version = BLE_API_VERSION;
   b4e00:	2303      	movs	r3, #3
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
   b4e02:	4621      	mov	r1, r4
   b4e04:	a801      	add	r0, sp, #4
    hal_ble_adv_params_t advParams = {};
   b4e06:	e9cd 4402 	strd	r4, r4, [sp, #8]
    advParams.version = BLE_API_VERSION;
   b4e0a:	f8ad 3004 	strh.w	r3, [sp, #4]
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
   b4e0e:	f7ff fb19 	bl	b4444 <hal_ble_gap_get_advertising_parameters>
   b4e12:	2800      	cmp	r0, #0
   b4e14:	db05      	blt.n	b4e22 <_ZNK8particle14BleLocalDevice22setAdvertisingIntervalEt+0x30>
    advParams.interval = interval;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
   b4e16:	4621      	mov	r1, r4
   b4e18:	a801      	add	r0, sp, #4
    advParams.interval = interval;
   b4e1a:	f8ad 5008 	strh.w	r5, [sp, #8]
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
   b4e1e:	f7ff fb09 	bl	b4434 <hal_ble_gap_set_advertising_parameters>
}
   b4e22:	b005      	add	sp, #20
   b4e24:	bd30      	pop	{r4, r5, pc}

000b4e26 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b4e26:	b919      	cbnz	r1, b4e30 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b4e28:	460a      	mov	r2, r1
   b4e2a:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b4e2c:	f7ff bb12 	b.w	b4454 <hal_ble_gap_set_advertising_data>
   b4e30:	e9d1 0100 	ldrd	r0, r1, [r1]
   b4e34:	2200      	movs	r2, #0
   b4e36:	e7f9      	b.n	b4e2c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b4e38 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4e38:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4e3a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4e3e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4e40:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b4e44:	42ae      	cmp	r6, r5
   b4e46:	d004      	beq.n	b4e52 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b4e48:	4628      	mov	r0, r5
   b4e4a:	f7ff fd23 	bl	b4894 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b4e4e:	3510      	adds	r5, #16
   b4e50:	e7f8      	b.n	b4e44 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b4e52:	6820      	ldr	r0, [r4, #0]
   b4e54:	f7ff fc96 	bl	b4784 <free>
}
   b4e58:	4620      	mov	r0, r4
   b4e5a:	bd70      	pop	{r4, r5, r6, pc}

000b4e5c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b4e5c:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b4e5e:	1e14      	subs	r4, r2, #0
   b4e60:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b4e62:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b4e64:	db02      	blt.n	b4e6c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b4e66:	1862      	adds	r2, r4, r1
   b4e68:	429a      	cmp	r2, r3
   b4e6a:	dd00      	ble.n	b4e6e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b4e6c:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b4e6e:	682a      	ldr	r2, [r5, #0]
   b4e70:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b4e72:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b4e74:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b4e76:	1a52      	subs	r2, r2, r1
   b4e78:	f002 f9e2 	bl	b7240 <memmove>
    size_ -= n;
   b4e7c:	686a      	ldr	r2, [r5, #4]
   b4e7e:	1b12      	subs	r2, r2, r4
   b4e80:	606a      	str	r2, [r5, #4]
}
   b4e82:	bd38      	pop	{r3, r4, r5, pc}

000b4e84 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b4e84:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b4e86:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b4e88:	4604      	mov	r4, r0
   b4e8a:	460d      	mov	r5, r1
   b4e8c:	ab01      	add	r3, sp, #4
   b4e8e:	e9d0 0100 	ldrd	r0, r1, [r0]
   b4e92:	f7ff fda7 	bl	b49e4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b4e96:	4602      	mov	r2, r0
   b4e98:	b138      	cbz	r0, b4eaa <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b4e9a:	9901      	ldr	r1, [sp, #4]
   b4e9c:	4620      	mov	r0, r4
   b4e9e:	f7ff ffdd 	bl	b4e5c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b4ea2:	4629      	mov	r1, r5
   b4ea4:	4620      	mov	r0, r4
   b4ea6:	f7ff ffed 	bl	b4e84 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b4eaa:	b003      	add	sp, #12
   b4eac:	bd30      	pop	{r4, r5, pc}

000b4eae <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b4eae:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b4eb0:	460c      	mov	r4, r1
   b4eb2:	b929      	cbnz	r1, b4ec0 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b4eb4:	460a      	mov	r2, r1
   b4eb6:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b4eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b4ebc:	f7ff bad2 	b.w	b4464 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b4ec0:	2101      	movs	r1, #1
   b4ec2:	4620      	mov	r0, r4
   b4ec4:	f7ff ffde 	bl	b4e84 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b4ec8:	e9d4 0100 	ldrd	r0, r1, [r4]
   b4ecc:	2200      	movs	r2, #0
   b4ece:	e7f3      	b.n	b4eb8 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b4ed0 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b4ed0:	b538      	push	{r3, r4, r5, lr}
   b4ed2:	4604      	mov	r4, r0
   b4ed4:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b4ed6:	f7ff ffa6 	bl	b4e26 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b4eda:	2800      	cmp	r0, #0
   b4edc:	db0a      	blt.n	b4ef4 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b4ede:	4629      	mov	r1, r5
   b4ee0:	4620      	mov	r0, r4
   b4ee2:	f7ff ffe4 	bl	b4eae <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b4ee6:	2800      	cmp	r0, #0
   b4ee8:	db04      	blt.n	b4ef4 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b4eea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b4eee:	2000      	movs	r0, #0
   b4ef0:	f7ff bac0 	b.w	b4474 <hal_ble_gap_start_advertising>
}
   b4ef4:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4ef8 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
   b4ef8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b4efa:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b4efc:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b4efe:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4f00:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b4f02:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4f04:	f7ff f8d7 	bl	b40b6 <_Znwj>
   b4f08:	b118      	cbz	r0, b4f12 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b4f0a:	682b      	ldr	r3, [r5, #0]
   b4f0c:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b4f0e:	686b      	ldr	r3, [r5, #4]
   b4f10:	6043      	str	r3, [r0, #4]
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   b4f12:	4b03      	ldr	r3, [pc, #12]	; (b4f20 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x28>)
   b4f14:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b4f16:	4b03      	ldr	r3, [pc, #12]	; (b4f24 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4f18:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b4f1a:	60a3      	str	r3, [r4, #8]
	  }
      }
   b4f1c:	4620      	mov	r0, r4
   b4f1e:	bd38      	pop	{r3, r4, r5, pc}
   b4f20:	000b4a0f 	.word	0x000b4a0f
   b4f24:	000b4a1b 	.word	0x000b4a1b

000b4f28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b4f28:	680b      	ldr	r3, [r1, #0]
   b4f2a:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b4f2c:	b113      	cbz	r3, b4f34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b4f2e:	685a      	ldr	r2, [r3, #4]
   b4f30:	3201      	adds	r2, #1
   b4f32:	605a      	str	r2, [r3, #4]
      }
   b4f34:	4770      	bx	lr

000b4f36 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4f36:	b510      	push	{r4, lr}
   b4f38:	f851 3b04 	ldr.w	r3, [r1], #4
   b4f3c:	4604      	mov	r4, r0
   b4f3e:	f840 3b04 	str.w	r3, [r0], #4
   b4f42:	f7ff fff1 	bl	b4f28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b4f46:	4620      	mov	r0, r4
   b4f48:	bd10      	pop	{r4, pc}

000b4f4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b4f4a:	b510      	push	{r4, lr}
   b4f4c:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b4f4e:	6800      	ldr	r0, [r0, #0]
   b4f50:	b108      	cbz	r0, b4f56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b4f52:	f7ff fd8b 	bl	b4a6c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b4f56:	4620      	mov	r0, r4
   b4f58:	bd10      	pop	{r4, pc}

000b4f5a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4f5a:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4f5c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4f60:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4f62:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b4f66:	42ae      	cmp	r6, r5
   b4f68:	d004      	beq.n	b4f74 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
      ~__shared_ptr() = default;
   b4f6a:	1d28      	adds	r0, r5, #4
   b4f6c:	f7ff ffed 	bl	b4f4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4f70:	3508      	adds	r5, #8
   b4f72:	e7f8      	b.n	b4f66 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b4f74:	6820      	ldr	r0, [r4, #0]
   b4f76:	f7ff fc05 	bl	b4784 <free>
}
   b4f7a:	4620      	mov	r0, r4
   b4f7c:	bd70      	pop	{r4, r5, r6, pc}

000b4f7e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4f7e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4f80:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4f84:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4f86:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b4f8a:	42ae      	cmp	r6, r5
   b4f8c:	d004      	beq.n	b4f98 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b4f8e:	1d28      	adds	r0, r5, #4
   b4f90:	f7ff ffdb 	bl	b4f4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4f94:	3508      	adds	r5, #8
   b4f96:	e7f8      	b.n	b4f8a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b4f98:	6820      	ldr	r0, [r4, #0]
   b4f9a:	f7ff fbf3 	bl	b4784 <free>
}
   b4f9e:	4620      	mov	r0, r4
   b4fa0:	bd70      	pop	{r4, r5, r6, pc}

000b4fa2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b4fa2:	b510      	push	{r4, lr}
   b4fa4:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b4fa6:	3024      	adds	r0, #36	; 0x24
   b4fa8:	f7ff ffe9 	bl	b4f7e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b4fac:	f104 0018 	add.w	r0, r4, #24
   b4fb0:	f7ff ffd3 	bl	b4f5a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b4fb4:	bd10      	pop	{r4, pc}
	...

000b4fb8 <__tcf_0>:
    static BleLocalDevice instance;
   b4fb8:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b4fba:	4b17      	ldr	r3, [pc, #92]	; (b5018 <__tcf_0+0x60>)
   b4fbc:	681c      	ldr	r4, [r3, #0]
   b4fbe:	b354      	cbz	r4, b5016 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b4fc0:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b4fc4:	f7ff fd49 	bl	b4a5a <_ZNSt14_Function_baseD1Ev>
   b4fc8:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b4fcc:	f7ff fd45 	bl	b4a5a <_ZNSt14_Function_baseD1Ev>
   b4fd0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b4fd4:	f7ff fd41 	bl	b4a5a <_ZNSt14_Function_baseD1Ev>
   b4fd8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b4fdc:	f7ff fd3d 	bl	b4a5a <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b4fe0:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b4fe4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b4fe8:	42ae      	cmp	r6, r5
   b4fea:	d004      	beq.n	b4ff6 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b4fec:	1d28      	adds	r0, r5, #4
   b4fee:	f7ff ffac 	bl	b4f4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4ff2:	3508      	adds	r5, #8
   b4ff4:	e7f8      	b.n	b4fe8 <__tcf_0+0x30>
    ::free(ptr);
   b4ff6:	69a0      	ldr	r0, [r4, #24]
   b4ff8:	f7ff fbc4 	bl	b4784 <free>
    ~BleLocalDeviceImpl() = default;
   b4ffc:	f104 000c 	add.w	r0, r4, #12
   b5000:	f7ff ffbd 	bl	b4f7e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b5004:	4620      	mov	r0, r4
   b5006:	f7ff ffa8 	bl	b4f5a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b500a:	4620      	mov	r0, r4
   b500c:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b500e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b5012:	f7ff b854 	b.w	b40be <_ZdlPvj>
   b5016:	bd70      	pop	{r4, r5, r6, pc}
   b5018:	2003e6c0 	.word	0x2003e6c0

000b501c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b501c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b501e:	b510      	push	{r4, lr}
      if (_M_empty())
   b5020:	b90a      	cbnz	r2, b5026 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b5022:	f001 ffcb 	bl	b6fbc <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b5026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b502a:	68c3      	ldr	r3, [r0, #12]
   b502c:	4718      	bx	r3

000b502e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b502e:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b5030:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b5032:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b5034:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b5036:	dd03      	ble.n	b5040 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b5038:	f7ff fbac 	bl	b4794 <realloc>
            if (!d) {
   b503c:	b918      	cbnz	r0, b5046 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b503e:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b5040:	f7ff fba0 	bl	b4784 <free>
        T* d = nullptr;
   b5044:	2000      	movs	r0, #0
        data_ = d;
   b5046:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b5048:	60a5      	str	r5, [r4, #8]
        return true;
   b504a:	2001      	movs	r0, #1
   b504c:	e7f7      	b.n	b503e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b504e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b504e:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b5050:	6883      	ldr	r3, [r0, #8]
   b5052:	428b      	cmp	r3, r1
   b5054:	da02      	bge.n	b505c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b5056:	f7ff ffea 	bl	b502e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b505a:	bd08      	pop	{r3, pc}
    return true;
   b505c:	2001      	movs	r0, #1
   b505e:	e7fc      	b.n	b505a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b5060 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b5060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5064:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5066:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b5068:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b506a:	4419      	add	r1, r3
   b506c:	6883      	ldr	r3, [r0, #8]
   b506e:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b5070:	4604      	mov	r4, r0
   b5072:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5074:	dc12      	bgt.n	b509c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b5076:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5078:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b507a:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b507c:	1bd2      	subs	r2, r2, r7
   b507e:	4631      	mov	r1, r6
   b5080:	1970      	adds	r0, r6, r5
   b5082:	f002 f8dd 	bl	b7240 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b5086:	462a      	mov	r2, r5
   b5088:	4641      	mov	r1, r8
   b508a:	4630      	mov	r0, r6
   b508c:	f002 f8ca 	bl	b7224 <memcpy>
    size_ += n;
   b5090:	6863      	ldr	r3, [r4, #4]
   b5092:	442b      	add	r3, r5
   b5094:	6063      	str	r3, [r4, #4]
    return true;
   b5096:	2001      	movs	r0, #1
}
   b5098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b509c:	f7ff ffc7 	bl	b502e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b50a0:	2800      	cmp	r0, #0
   b50a2:	d1e8      	bne.n	b5076 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b50a4:	e7f8      	b.n	b5098 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b50a6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b50a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b50a8:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b50aa:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b50ae:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b50b0:	4604      	mov	r4, r0
   b50b2:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b50b4:	da0b      	bge.n	b50ce <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b50b6:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b50b8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b50ba:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b50bc:	1b52      	subs	r2, r2, r5
   b50be:	1c48      	adds	r0, r1, #1
   b50c0:	f002 f8be 	bl	b7240 <memmove>
    new(p) T(std::move(value));
   b50c4:	557e      	strb	r6, [r7, r5]
    ++size_;
   b50c6:	6863      	ldr	r3, [r4, #4]
   b50c8:	3301      	adds	r3, #1
   b50ca:	6063      	str	r3, [r4, #4]
}
   b50cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b50ce:	3101      	adds	r1, #1
   b50d0:	f7ff ffad 	bl	b502e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b50d4:	2800      	cmp	r0, #0
   b50d6:	d1ee      	bne.n	b50b6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b50d8:	e7f8      	b.n	b50cc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b50da <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b50da:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b50dc:	6841      	ldr	r1, [r0, #4]
   b50de:	f7ff bfe2 	b.w	b50a6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b50e2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b50e2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b50e6:	4604      	mov	r4, r0
   b50e8:	461d      	mov	r5, r3
   b50ea:	460f      	mov	r7, r1
   b50ec:	ab01      	add	r3, sp, #4
   b50ee:	4690      	mov	r8, r2
   b50f0:	460a      	mov	r2, r1
   b50f2:	e9d0 0100 	ldrd	r0, r1, [r0]
   b50f6:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b50fa:	f7ff fc73 	bl	b49e4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b50fe:	1cae      	adds	r6, r5, #2
   b5100:	6863      	ldr	r3, [r4, #4]
   b5102:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b5104:	f1b9 0f00 	cmp.w	r9, #0
   b5108:	d126      	bne.n	b5158 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b510a:	b328      	cbz	r0, b5158 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b510c:	4433      	add	r3, r6
   b510e:	1a1b      	subs	r3, r3, r0
   b5110:	2bff      	cmp	r3, #255	; 0xff
   b5112:	d809      	bhi.n	b5128 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b5114:	9901      	ldr	r1, [sp, #4]
   b5116:	4620      	mov	r0, r4
   b5118:	f7ff fea0 	bl	b4e5c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b511c:	6861      	ldr	r1, [r4, #4]
   b511e:	4620      	mov	r0, r4
   b5120:	4431      	add	r1, r6
   b5122:	f7ff ff94 	bl	b504e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b5126:	b918      	cbnz	r0, b5130 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b5128:	6860      	ldr	r0, [r4, #4]
}
   b512a:	b003      	add	sp, #12
   b512c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b5130:	1c6a      	adds	r2, r5, #1
   b5132:	9901      	ldr	r1, [sp, #4]
   b5134:	b2d2      	uxtb	r2, r2
   b5136:	4620      	mov	r0, r4
   b5138:	f7ff ffb5 	bl	b50a6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b513c:	9901      	ldr	r1, [sp, #4]
   b513e:	463a      	mov	r2, r7
   b5140:	3101      	adds	r1, #1
   b5142:	4620      	mov	r0, r4
   b5144:	f7ff ffaf 	bl	b50a6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b5148:	9901      	ldr	r1, [sp, #4]
   b514a:	462b      	mov	r3, r5
   b514c:	4642      	mov	r2, r8
   b514e:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b5150:	4620      	mov	r0, r4
   b5152:	f7ff ff85 	bl	b5060 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b5156:	e7e7      	b.n	b5128 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b5158:	18f1      	adds	r1, r6, r3
   b515a:	29ff      	cmp	r1, #255	; 0xff
   b515c:	d8e4      	bhi.n	b5128 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b515e:	4620      	mov	r0, r4
   b5160:	f7ff ff75 	bl	b504e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b5164:	2800      	cmp	r0, #0
   b5166:	d0df      	beq.n	b5128 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b5168:	1c69      	adds	r1, r5, #1
   b516a:	b2c9      	uxtb	r1, r1
   b516c:	4620      	mov	r0, r4
   b516e:	f7ff ffb4 	bl	b50da <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b5172:	4639      	mov	r1, r7
   b5174:	4620      	mov	r0, r4
   b5176:	f7ff ffb0 	bl	b50da <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b517a:	6861      	ldr	r1, [r4, #4]
   b517c:	462b      	mov	r3, r5
   b517e:	4642      	mov	r2, r8
   b5180:	e7e6      	b.n	b5150 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b5182 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b5182:	b430      	push	{r4, r5}
   b5184:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b5188:	b11a      	cbz	r2, b5192 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b518a:	9502      	str	r5, [sp, #8]
}
   b518c:	bc30      	pop	{r4, r5}
   b518e:	f7ff bfa8 	b.w	b50e2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b5192:	6840      	ldr	r0, [r0, #4]
}
   b5194:	bc30      	pop	{r4, r5}
   b5196:	4770      	bx	lr

000b5198 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b5198:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b519a:	2300      	movs	r3, #0
   b519c:	e9c0 3300 	strd	r3, r3, [r0]
   b51a0:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b51a2:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b51a4:	9300      	str	r3, [sp, #0]
   b51a6:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b51a8:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b51ac:	4619      	mov	r1, r3
   b51ae:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b51b2:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b51b4:	f7ff ffe5 	bl	b5182 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b51b8:	4620      	mov	r0, r4
   b51ba:	b004      	add	sp, #16
   b51bc:	bd10      	pop	{r4, pc}

000b51be <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b51be:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b51c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b51c2:	4604      	mov	r4, r0
   b51c4:	460d      	mov	r5, r1
   b51c6:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b51c8:	d914      	bls.n	b51f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b51ca:	4290      	cmp	r0, r2
   b51cc:	d213      	bcs.n	b51f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b51ce:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b51d2:	1a75      	subs	r5, r6, r1
   b51d4:	f1a1 0708 	sub.w	r7, r1, #8
   b51d8:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b51da:	42b7      	cmp	r7, r6
   b51dc:	d018      	beq.n	b5210 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b51de:	b11c      	cbz	r4, b51e8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b51e0:	4631      	mov	r1, r6
   b51e2:	4620      	mov	r0, r4
   b51e4:	f7ff fea7 	bl	b4f36 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b51e8:	1d30      	adds	r0, r6, #4
   b51ea:	f7ff feae 	bl	b4f4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b51ee:	3e08      	subs	r6, #8
   b51f0:	3c08      	subs	r4, #8
   b51f2:	e7f2      	b.n	b51da <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b51f4:	d00c      	beq.n	b5210 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b51f6:	42b5      	cmp	r5, r6
   b51f8:	d00a      	beq.n	b5210 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b51fa:	b11c      	cbz	r4, b5204 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b51fc:	4629      	mov	r1, r5
   b51fe:	4620      	mov	r0, r4
   b5200:	f7ff fe99 	bl	b4f36 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b5204:	1d28      	adds	r0, r5, #4
   b5206:	f7ff fea0 	bl	b4f4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b520a:	3508      	adds	r5, #8
   b520c:	3408      	adds	r4, #8
   b520e:	e7f2      	b.n	b51f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b5210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5212 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5212:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5214:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b5216:	6846      	ldr	r6, [r0, #4]
   b5218:	4668      	mov	r0, sp
   b521a:	f7ff fe8c 	bl	b4f36 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b521e:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b5222:	429f      	cmp	r7, r3
   b5224:	db12      	blt.n	b524c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b5226:	3701      	adds	r7, #1
        if (n > 0) {
   b5228:	2f00      	cmp	r7, #0
   b522a:	dd29      	ble.n	b5280 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b522c:	00f8      	lsls	r0, r7, #3
   b522e:	f7ff faa1 	bl	b4774 <malloc>
            if (!d) {
   b5232:	4605      	mov	r5, r0
   b5234:	b1f0      	cbz	r0, b5274 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b5236:	e9d4 1200 	ldrd	r1, r2, [r4]
   b523a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b523e:	f7ff ffbe 	bl	b51be <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b5242:	6820      	ldr	r0, [r4, #0]
   b5244:	f7ff fa9e 	bl	b4784 <free>
        data_ = d;
   b5248:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b524a:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b524c:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b524e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5250:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b5254:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b5258:	4631      	mov	r1, r6
   b525a:	f106 0008 	add.w	r0, r6, #8
   b525e:	f7ff ffae 	bl	b51be <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b5262:	b11e      	cbz	r6, b526c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b5264:	4669      	mov	r1, sp
   b5266:	4630      	mov	r0, r6
   b5268:	f7ff fe65 	bl	b4f36 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b526c:	6863      	ldr	r3, [r4, #4]
   b526e:	3301      	adds	r3, #1
   b5270:	6063      	str	r3, [r4, #4]
    return true;
   b5272:	2501      	movs	r5, #1
   b5274:	a801      	add	r0, sp, #4
   b5276:	f7ff fe68 	bl	b4f4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b527a:	4628      	mov	r0, r5
   b527c:	b003      	add	sp, #12
   b527e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b5280:	2500      	movs	r5, #0
   b5282:	e7de      	b.n	b5242 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b5284 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b5286:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b528a:	4605      	mov	r5, r0
   b528c:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b528e:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b5292:	42a6      	cmp	r6, r4
   b5294:	d005      	beq.n	b52a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b5296:	4639      	mov	r1, r7
   b5298:	4620      	mov	r0, r4
   b529a:	f7ff fd30 	bl	b4cfe <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b529e:	b108      	cbz	r0, b52a4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b52a0:	b914      	cbnz	r4, b52a8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b52a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b52a4:	3408      	adds	r4, #8
   b52a6:	e7f4      	b.n	b5292 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b52a8:	1d20      	adds	r0, r4, #4
   b52aa:	f7ff fe4e 	bl	b4f4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b52ae:	e9d5 3200 	ldrd	r3, r2, [r5]
   b52b2:	f104 0108 	add.w	r1, r4, #8
   b52b6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b52ba:	4620      	mov	r0, r4
   b52bc:	f7ff ff7f 	bl	b51be <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b52c0:	686b      	ldr	r3, [r5, #4]
   b52c2:	3b01      	subs	r3, #1
   b52c4:	606b      	str	r3, [r5, #4]
    return true;
   b52c6:	e7ec      	b.n	b52a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>

000b52c8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b52c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b52cc:	4605      	mov	r5, r0
   b52ce:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b52d0:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b52d2:	460c      	mov	r4, r1
        WiringBleLock lk;
   b52d4:	f7ff fbf4 	bl	b4ac0 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b52d8:	682e      	ldr	r6, [r5, #0]
   b52da:	1ef3      	subs	r3, r6, #3
   b52dc:	2b0d      	cmp	r3, #13
   b52de:	d83c      	bhi.n	b535a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b52e0:	e8df f013 	tbh	[pc, r3, lsl #1]
   b52e4:	0057000e 	.word	0x0057000e
   b52e8:	00d3003b 	.word	0x00d3003b
   b52ec:	003b003b 	.word	0x003b003b
   b52f0:	003b003b 	.word	0x003b003b
   b52f4:	009d003b 	.word	0x009d003b
   b52f8:	009d009d 	.word	0x009d009d
   b52fc:	009d009d 	.word	0x009d009d
                    BlePeerDevice peer;
   b5300:	a804      	add	r0, sp, #16
   b5302:	f7ff fcc7 	bl	b4c94 <_ZN8particle13BlePeerDeviceC1Ev>
                    peer.impl()->connHandle() = event->conn_handle;
   b5306:	9b04      	ldr	r3, [sp, #16]
   b5308:	89aa      	ldrh	r2, [r5, #12]
   b530a:	801a      	strh	r2, [r3, #0]
                    peer.impl()->address() = event->params.connected.info->address;
   b530c:	6869      	ldr	r1, [r5, #4]
   b530e:	9804      	ldr	r0, [sp, #16]
   b5310:	3108      	adds	r1, #8
   b5312:	3002      	adds	r0, #2
   b5314:	f7ff fbee 	bl	b4af4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b5318:	a904      	add	r1, sp, #16
   b531a:	a806      	add	r0, sp, #24
   b531c:	f7ff fe0b 	bl	b4f36 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    if (!impl->peers_.append(peer)) {
   b5320:	a906      	add	r1, sp, #24
   b5322:	f104 0018 	add.w	r0, r4, #24
   b5326:	f7ff ff74 	bl	b5212 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b532a:	4605      	mov	r5, r0
   b532c:	a807      	add	r0, sp, #28
   b532e:	f7ff fe0c 	bl	b4f4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5332:	b9c5      	cbnz	r5, b5366 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                        LOG(TRACE, "Failed to append peer Central device.");
   b5334:	2320      	movs	r3, #32
   b5336:	e9cd 3506 	strd	r3, r5, [sp, #24]
   b533a:	4b5e      	ldr	r3, [pc, #376]	; (b54b4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b533c:	495e      	ldr	r1, [pc, #376]	; (b54b8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b533e:	9300      	str	r3, [sp, #0]
   b5340:	aa06      	add	r2, sp, #24
   b5342:	462b      	mov	r3, r5
   b5344:	2001      	movs	r0, #1
   b5346:	f7ff f969 	bl	b461c <log_message>
                        hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b534a:	9b04      	ldr	r3, [sp, #16]
   b534c:	4629      	mov	r1, r5
   b534e:	8818      	ldrh	r0, [r3, #0]
   b5350:	f7ff f898 	bl	b4484 <hal_ble_gap_disconnect>
   b5354:	a805      	add	r0, sp, #20
   b5356:	f7ff fdf8 	bl	b4f4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b535a:	a803      	add	r0, sp, #12
   b535c:	f7ff fbbe 	bl	b4adc <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b5360:	b00e      	add	sp, #56	; 0x38
   b5362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if (impl->connectedCallback_) {
   b5366:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b5368:	b123      	cbz	r3, b5374 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xac>
                        impl->connectedCallback_(peer);
   b536a:	a904      	add	r1, sp, #16
   b536c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b5370:	f7ff fe54 	bl	b501c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b5374:	a805      	add	r0, sp, #20
   b5376:	f7ff fde8 	bl	b4f4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                LOG(TRACE, "Connected");
   b537a:	2120      	movs	r1, #32
   b537c:	2300      	movs	r3, #0
   b537e:	e9cd 1306 	strd	r1, r3, [sp, #24]
   b5382:	4a4e      	ldr	r2, [pc, #312]	; (b54bc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
                    LOG(TRACE, "Disconnected");
   b5384:	9200      	str	r2, [sp, #0]
   b5386:	494c      	ldr	r1, [pc, #304]	; (b54b8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b5388:	aa06      	add	r2, sp, #24
   b538a:	2001      	movs	r0, #1
   b538c:	f7ff f946 	bl	b461c <log_message>
   b5390:	e7e3      	b.n	b535a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b5392:	89a9      	ldrh	r1, [r5, #12]
   b5394:	4620      	mov	r0, r4
   b5396:	f7ff fc6b 	bl	b4c70 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b539a:	4606      	mov	r6, r0
   b539c:	2800      	cmp	r0, #0
   b539e:	d0dc      	beq.n	b535a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b53a0:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b53a2:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b53a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b53aa:	8029      	strh	r1, [r5, #0]
   b53ac:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b53b0:	429a      	cmp	r2, r3
   b53b2:	d003      	beq.n	b53bc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
   b53b4:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b53b8:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b53ba:	e7f9      	b.n	b53b0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe8>
    destruct(data_, data_ + size_);
   b53bc:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b53c0:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b53c4:	45b8      	cmp	r8, r7
   b53c6:	d004      	beq.n	b53d2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10a>
      ~__shared_ptr() = default;
   b53c8:	1d38      	adds	r0, r7, #4
   b53ca:	f7ff fdbe 	bl	b4f4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b53ce:	3708      	adds	r7, #8
   b53d0:	e7f8      	b.n	b53c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfc>
    size_ = 0;
   b53d2:	2300      	movs	r3, #0
   b53d4:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b53d6:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b53da:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b53de:	45b8      	cmp	r8, r7
   b53e0:	d004      	beq.n	b53ec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x124>
   b53e2:	1d38      	adds	r0, r7, #4
   b53e4:	f7ff fdb1 	bl	b4f4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b53e8:	3708      	adds	r7, #8
   b53ea:	e7f8      	b.n	b53de <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x116>
    size_ = 0;
   b53ec:	2300      	movs	r3, #0
   b53ee:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b53f0:	72ab      	strb	r3, [r5, #10]
                        if (impl->disconnectedCallback_) {
   b53f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b53f4:	b123      	cbz	r3, b5400 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>
                            impl->disconnectedCallback_(*peer);
   b53f6:	4631      	mov	r1, r6
   b53f8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b53fc:	f7ff fe0e 	bl	b501c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
      { return _M_ptr; }
   b5400:	6833      	ldr	r3, [r6, #0]
                        peer->impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b5402:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b5406:	801a      	strh	r2, [r3, #0]
                        impl->peers_.removeOne(*peer);
   b5408:	4631      	mov	r1, r6
   b540a:	f104 0018 	add.w	r0, r4, #24
   b540e:	f7ff ff39 	bl	b5284 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
                    LOG(TRACE, "Disconnected");
   b5412:	2220      	movs	r2, #32
   b5414:	2300      	movs	r3, #0
   b5416:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b541a:	4a29      	ldr	r2, [pc, #164]	; (b54c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f8>)
   b541c:	e7b2      	b.n	b5384 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbc>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b541e:	89a9      	ldrh	r1, [r5, #12]
   b5420:	4620      	mov	r0, r4
   b5422:	f7ff fc25 	bl	b4c70 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b5426:	2800      	cmp	r0, #0
   b5428:	d097      	beq.n	b535a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b542a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b542c:	2b00      	cmp	r3, #0
   b542e:	d094      	beq.n	b535a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b5430:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b5432:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b5434:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b5438:	d001      	beq.n	b543e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x176>
   b543a:	2e10      	cmp	r6, #16
   b543c:	d117      	bne.n	b546e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a6>
                        BlePairingEventPayload payload = {};
   b543e:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b5440:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b5442:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b5444:	2506      	movs	r5, #6
                        };
   b5446:	f88d 3015 	strb.w	r3, [sp, #21]
   b544a:	9104      	str	r1, [sp, #16]
   b544c:	f88d 2014 	strb.w	r2, [sp, #20]
   b5450:	9006      	str	r0, [sp, #24]
   b5452:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b5456:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b5458:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b545c:	9508      	str	r5, [sp, #32]
   b545e:	e883 0003 	stmia.w	r3, {r0, r1}
   b5462:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b5464:	a906      	add	r1, sp, #24
   b5466:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b546a:	4798      	blx	r3
   b546c:	e775      	b.n	b535a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b546e:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b5470:	bf01      	itttt	eq
   b5472:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b5474:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b5476:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b547a:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b547c:	bf0f      	iteee	eq
   b547e:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b5482:	461a      	movne	r2, r3
   b5484:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b5486:	461d      	movne	r5, r3
   b5488:	e7dd      	b.n	b5446 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b548a:	89a9      	ldrh	r1, [r5, #12]
   b548c:	4620      	mov	r0, r4
   b548e:	f7ff fbef 	bl	b4c70 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b5492:	4601      	mov	r1, r0
   b5494:	2800      	cmp	r0, #0
   b5496:	f43f af60 	beq.w	b535a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b549a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b549c:	2b00      	cmp	r3, #0
   b549e:	f43f af5c 	beq.w	b535a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b54a2:	686b      	ldr	r3, [r5, #4]
   b54a4:	9306      	str	r3, [sp, #24]
   b54a6:	aa06      	add	r2, sp, #24
   b54a8:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b54aa:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b54ae:	4798      	blx	r3
   b54b0:	e753      	b.n	b535a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b54b2:	bf00      	nop
   b54b4:	000b76cc 	.word	0x000b76cc
   b54b8:	000b7663 	.word	0x000b7663
   b54bc:	000b76f2 	.word	0x000b76f2
   b54c0:	000b76fc 	.word	0x000b76fc

000b54c4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b54c4:	b513      	push	{r0, r1, r4, lr}
   b54c6:	460b      	mov	r3, r1
   b54c8:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b54ca:	e9d0 0100 	ldrd	r0, r1, [r0]
   b54ce:	466c      	mov	r4, sp
   b54d0:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b54d4:	e893 0003 	ldmia.w	r3, {r0, r1}
   b54d8:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b54dc:	e894 0003 	ldmia.w	r4, {r0, r1}
   b54e0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b54e4:	b002      	add	sp, #8
   b54e6:	bd10      	pop	{r4, pc}

000b54e8 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>:
      void swap(function& __x) noexcept
   b54e8:	b538      	push	{r3, r4, r5, lr}
   b54ea:	4605      	mov	r5, r0
   b54ec:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b54ee:	f7ff ffe9 	bl	b54c4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b54f2:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b54f4:	68a2      	ldr	r2, [r4, #8]
   b54f6:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b54f8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b54fa:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b54fc:	68e2      	ldr	r2, [r4, #12]
   b54fe:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5500:	60e3      	str	r3, [r4, #12]
      }
   b5502:	bd38      	pop	{r3, r4, r5, pc}

000b5504 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onDisconnected(BleOnDisconnectedCallback callback, void* context) const {
   b5504:	b510      	push	{r4, lr}
        disconnectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnDisconnectedStdFunction)nullptr;
   b5506:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onDisconnected(BleOnDisconnectedCallback callback, void* context) const {
   b5508:	b08a      	sub	sp, #40	; 0x28
        disconnectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnDisconnectedStdFunction)nullptr;
   b550a:	3434      	adds	r4, #52	; 0x34
   b550c:	b1b9      	cbz	r1, b553e <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x3a>
   b550e:	e9cd 1200 	strd	r1, r2, [sp]
   b5512:	a802      	add	r0, sp, #8
   b5514:	4669      	mov	r1, sp
   b5516:	f7ff fcef 	bl	b4ef8 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b551a:	2300      	movs	r3, #0
	__x.swap(*this);
   b551c:	a906      	add	r1, sp, #24
   b551e:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b5520:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b5522:	f7ff ffe1 	bl	b54e8 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   b5526:	4621      	mov	r1, r4
   b5528:	a806      	add	r0, sp, #24
   b552a:	f7ff ffdd 	bl	b54e8 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   b552e:	a806      	add	r0, sp, #24
   b5530:	f7ff fa93 	bl	b4a5a <_ZNSt14_Function_baseD1Ev>
   b5534:	a802      	add	r0, sp, #8
   b5536:	f7ff fa90 	bl	b4a5a <_ZNSt14_Function_baseD1Ev>
}
   b553a:	b00a      	add	sp, #40	; 0x28
   b553c:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b553e:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b5540:	e7eb      	b.n	b551a <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000b5542 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b5542:	b510      	push	{r4, lr}
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b5544:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b5546:	b08a      	sub	sp, #40	; 0x28
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b5548:	3424      	adds	r4, #36	; 0x24
   b554a:	b1b9      	cbz	r1, b557c <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x3a>
   b554c:	e9cd 1200 	strd	r1, r2, [sp]
   b5550:	a802      	add	r0, sp, #8
   b5552:	4669      	mov	r1, sp
   b5554:	f7ff fcd0 	bl	b4ef8 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b5558:	2300      	movs	r3, #0
	__x.swap(*this);
   b555a:	a906      	add	r1, sp, #24
   b555c:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b555e:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b5560:	f7ff ffc2 	bl	b54e8 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   b5564:	4621      	mov	r1, r4
   b5566:	a806      	add	r0, sp, #24
   b5568:	f7ff ffbe 	bl	b54e8 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   b556c:	a806      	add	r0, sp, #24
   b556e:	f7ff fa74 	bl	b4a5a <_ZNSt14_Function_baseD1Ev>
   b5572:	a802      	add	r0, sp, #8
   b5574:	f7ff fa71 	bl	b4a5a <_ZNSt14_Function_baseD1Ev>
}
   b5578:	b00a      	add	sp, #40	; 0x28
   b557a:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b557c:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b557e:	e7eb      	b.n	b5558 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000b5580 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b5580:	4802      	ldr	r0, [pc, #8]	; (b558c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5582:	2300      	movs	r3, #0
   b5584:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b5586:	f7fe bf91 	b.w	b44ac <os_mutex_recursive_create>
   b558a:	bf00      	nop
   b558c:	2003e6bc 	.word	0x2003e6bc

000b5590 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5592:	4606      	mov	r6, r0
   b5594:	460d      	mov	r5, r1
  size_t n = 0;
   b5596:	188f      	adds	r7, r1, r2
   b5598:	2400      	movs	r4, #0
  while (size--) {
   b559a:	42bd      	cmp	r5, r7
   b559c:	d00c      	beq.n	b55b8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b559e:	6833      	ldr	r3, [r6, #0]
   b55a0:	f815 1b01 	ldrb.w	r1, [r5], #1
   b55a4:	689b      	ldr	r3, [r3, #8]
   b55a6:	4630      	mov	r0, r6
   b55a8:	4798      	blx	r3
     if (chunk>=0)
   b55aa:	1e03      	subs	r3, r0, #0
   b55ac:	db01      	blt.n	b55b2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b55ae:	441c      	add	r4, r3
  while (size--) {
   b55b0:	e7f3      	b.n	b559a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b55b2:	2c00      	cmp	r4, #0
   b55b4:	bf08      	it	eq
   b55b6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b55b8:	4620      	mov	r0, r4
   b55ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b55bc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b55bc:	b513      	push	{r0, r1, r4, lr}
   b55be:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b55c0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b55c2:	b159      	cbz	r1, b55dc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b55c4:	9101      	str	r1, [sp, #4]
   b55c6:	f7fe fd33 	bl	b4030 <strlen>
   b55ca:	6823      	ldr	r3, [r4, #0]
   b55cc:	9901      	ldr	r1, [sp, #4]
   b55ce:	68db      	ldr	r3, [r3, #12]
   b55d0:	4602      	mov	r2, r0
   b55d2:	4620      	mov	r0, r4
    }
   b55d4:	b002      	add	sp, #8
   b55d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b55da:	4718      	bx	r3
    }
   b55dc:	b002      	add	sp, #8
   b55de:	bd10      	pop	{r4, pc}

000b55e0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b55e0:	6803      	ldr	r3, [r0, #0]
   b55e2:	689b      	ldr	r3, [r3, #8]
   b55e4:	4718      	bx	r3

000b55e6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b55e6:	b530      	push	{r4, r5, lr}
   b55e8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b55ea:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b55ec:	2a01      	cmp	r2, #1
  *str = '\0';
   b55ee:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b55f2:	bf98      	it	ls
   b55f4:	220a      	movls	r2, #10
   b55f6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b55f8:	460d      	mov	r5, r1
   b55fa:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b55fe:	fb01 5312 	mls	r3, r1, r2, r5
   b5602:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5606:	2b09      	cmp	r3, #9
   b5608:	bf94      	ite	ls
   b560a:	3330      	addls	r3, #48	; 0x30
   b560c:	3337      	addhi	r3, #55	; 0x37
   b560e:	b2db      	uxtb	r3, r3
  } while(n);
   b5610:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5612:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5616:	d9ef      	bls.n	b55f8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5618:	4621      	mov	r1, r4
   b561a:	f7ff ffcf 	bl	b55bc <_ZN5Print5writeEPKc>
}
   b561e:	b00b      	add	sp, #44	; 0x2c
   b5620:	bd30      	pop	{r4, r5, pc}

000b5622 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b5622:	6880      	ldr	r0, [r0, #8]
   b5624:	6803      	ldr	r3, [r0, #0]
   b5626:	68db      	ldr	r3, [r3, #12]
   b5628:	4718      	bx	r3

000b562a <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b562a:	4770      	bx	lr

000b562c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b562c:	4608      	mov	r0, r1
   b562e:	b111      	cbz	r1, b5636 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b5630:	680b      	ldr	r3, [r1, #0]
   b5632:	685b      	ldr	r3, [r3, #4]
   b5634:	4718      	bx	r3
}
   b5636:	4770      	bx	lr

000b5638 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b5638:	4770      	bx	lr

000b563a <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b563a:	4770      	bx	lr

000b563c <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b563c:	4770      	bx	lr

000b563e <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b563e:	4770      	bx	lr

000b5640 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b5640:	b538      	push	{r3, r4, r5, lr}
   b5642:	4604      	mov	r4, r0
   b5644:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b5646:	6800      	ldr	r0, [r0, #0]
   b5648:	212e      	movs	r1, #46	; 0x2e
   b564a:	f001 fe56 	bl	b72fa <strchrnul>
    size = s - category;
   b564e:	6823      	ldr	r3, [r4, #0]
   b5650:	1ac3      	subs	r3, r0, r3
   b5652:	602b      	str	r3, [r5, #0]
    if (size) {
   b5654:	b123      	cbz	r3, b5660 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b5656:	7803      	ldrb	r3, [r0, #0]
   b5658:	b103      	cbz	r3, b565c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b565a:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
   b565c:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b565e:	6020      	str	r0, [r4, #0]
}
   b5660:	4618      	mov	r0, r3
   b5662:	bd38      	pop	{r3, r4, r5, pc}

000b5664 <_ZN5spark16JSONStreamWriterD0Ev>:
   b5664:	b510      	push	{r4, lr}
   b5666:	210c      	movs	r1, #12
   b5668:	4604      	mov	r4, r0
   b566a:	f7fe fd28 	bl	b40be <_ZdlPvj>
   b566e:	4620      	mov	r0, r4
   b5670:	bd10      	pop	{r4, pc}

000b5672 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b5672:	b510      	push	{r4, lr}
   b5674:	2104      	movs	r1, #4
   b5676:	4604      	mov	r4, r0
   b5678:	f7fe fd21 	bl	b40be <_ZdlPvj>
   b567c:	4620      	mov	r0, r4
   b567e:	bd10      	pop	{r4, pc}

000b5680 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b5680:	b510      	push	{r4, lr}
   b5682:	2104      	movs	r1, #4
   b5684:	4604      	mov	r4, r0
   b5686:	f7fe fd1a 	bl	b40be <_ZdlPvj>
   b568a:	4620      	mov	r0, r4
   b568c:	bd10      	pop	{r4, pc}

000b568e <_ZN14RecursiveMutex4lockEv.isra.0>:
    void lock() { os_mutex_recursive_lock(handle_); }
   b568e:	f7fe bf1d 	b.w	b44cc <os_mutex_recursive_lock>

000b5692 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b5692:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b5694:	f7fe fcc2 	bl	b401c <strcmp>
}
   b5698:	fab0 f080 	clz	r0, r0
   b569c:	0940      	lsrs	r0, r0, #5
   b569e:	bd08      	pop	{r3, pc}

000b56a0 <__tcf_1>:
   b56a0:	4770      	bx	lr

000b56a2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b56a2:	b510      	push	{r4, lr}
   b56a4:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b56a6:	f001 f8fb 	bl	b68a0 <_Z16_fetch_usbserialv>
   b56aa:	4284      	cmp	r4, r0
   b56ac:	d010      	beq.n	b56d0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b56ae:	f001 fc5d 	bl	b6f6c <_Z22__fetch_global_Serial1v>
   b56b2:	4284      	cmp	r4, r0
   b56b4:	d105      	bne.n	b56c2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b56b6:	f001 fc59 	bl	b6f6c <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b56ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b56be:	f001 b96e 	b.w	b699e <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b56c2:	b12c      	cbz	r4, b56d0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b56c4:	6823      	ldr	r3, [r4, #0]
   b56c6:	4620      	mov	r0, r4
   b56c8:	685b      	ldr	r3, [r3, #4]
}
   b56ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b56ce:	4718      	bx	r3
   b56d0:	bd10      	pop	{r4, pc}

000b56d2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b56d2:	680b      	ldr	r3, [r1, #0]
   b56d4:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b56d6:	684b      	ldr	r3, [r1, #4]
   b56d8:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b56da:	b113      	cbz	r3, b56e2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b56dc:	685a      	ldr	r2, [r3, #4]
   b56de:	3201      	adds	r2, #1
   b56e0:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b56e2:	4770      	bx	lr

000b56e4 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b56e4:	b513      	push	{r0, r1, r4, lr}
   b56e6:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b56e8:	4608      	mov	r0, r1
   b56ea:	9101      	str	r1, [sp, #4]
   b56ec:	f7fe fca0 	bl	b4030 <strlen>
   b56f0:	9901      	ldr	r1, [sp, #4]
   b56f2:	4602      	mov	r2, r0
   b56f4:	4620      	mov	r0, r4
}
   b56f6:	b002      	add	sp, #8
   b56f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b56fc:	f001 bc0a 	b.w	b6f14 <_ZN5spark10JSONWriter5valueEPKcj>

000b5700 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b5700:	b513      	push	{r0, r1, r4, lr}
   b5702:	4604      	mov	r4, r0
    write(str, strlen(str));
   b5704:	4608      	mov	r0, r1
   b5706:	9101      	str	r1, [sp, #4]
   b5708:	f7fe fc92 	bl	b4030 <strlen>
   b570c:	6823      	ldr	r3, [r4, #0]
   b570e:	9901      	ldr	r1, [sp, #4]
   b5710:	68db      	ldr	r3, [r3, #12]
   b5712:	4602      	mov	r2, r0
   b5714:	4620      	mov	r0, r4
}
   b5716:	b002      	add	sp, #8
   b5718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b571c:	4718      	bx	r3

000b571e <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b571e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b5720:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b5722:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b5726:	68db      	ldr	r3, [r3, #12]
   b5728:	2201      	movs	r2, #1
   b572a:	f10d 0107 	add.w	r1, sp, #7
   b572e:	4798      	blx	r3
}
   b5730:	b003      	add	sp, #12
   b5732:	f85d fb04 	ldr.w	pc, [sp], #4

000b5736 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b5736:	680a      	ldr	r2, [r1, #0]
   b5738:	6002      	str	r2, [r0, #0]
   b573a:	684a      	ldr	r2, [r1, #4]
   b573c:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b573e:	2200      	movs	r2, #0
   b5740:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b5744:	b510      	push	{r4, lr}
   b5746:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5748:	688c      	ldr	r4, [r1, #8]
   b574a:	6084      	str	r4, [r0, #8]
   b574c:	68cc      	ldr	r4, [r1, #12]
   b574e:	60c4      	str	r4, [r0, #12]
   b5750:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b5752:	608a      	str	r2, [r1, #8]
   b5754:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5756:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b5758:	610a      	str	r2, [r1, #16]
   b575a:	bd10      	pop	{r4, pc}

000b575c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b575c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b5760:	e9d0 8400 	ldrd	r8, r4, [r0]
   b5764:	f04f 0a14 	mov.w	sl, #20
   b5768:	9300      	str	r3, [sp, #0]
   b576a:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b576e:	4b18      	ldr	r3, [pc, #96]	; (b57d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b5770:	10a4      	asrs	r4, r4, #2
   b5772:	4617      	mov	r7, r2
   b5774:	435c      	muls	r4, r3
   b5776:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b5778:	2c00      	cmp	r4, #0
   b577a:	dd21      	ble.n	b57c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b577c:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b577e:	fb0a f006 	mul.w	r0, sl, r6
   b5782:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b5786:	463a      	mov	r2, r7
   b5788:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b578c:	5828      	ldr	r0, [r5, r0]
   b578e:	9101      	str	r1, [sp, #4]
   b5790:	455f      	cmp	r7, fp
   b5792:	bf28      	it	cs
   b5794:	465a      	movcs	r2, fp
   b5796:	f001 fdc2 	bl	b731e <strncmp>
                if (cmp == 0) {
   b579a:	2800      	cmp	r0, #0
   b579c:	9901      	ldr	r1, [sp, #4]
   b579e:	f04f 0301 	mov.w	r3, #1
   b57a2:	d10b      	bne.n	b57bc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b57a4:	455f      	cmp	r7, fp
   b57a6:	d103      	bne.n	b57b0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b57a8:	9a00      	ldr	r2, [sp, #0]
   b57aa:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b57ac:	4634      	mov	r4, r6
   b57ae:	e7e3      	b.n	b5778 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b57b0:	d9fc      	bls.n	b57ac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b57b2:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b57b4:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b57b8:	3e01      	subs	r6, #1
   b57ba:	e7f7      	b.n	b57ac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b57bc:	dbf9      	blt.n	b57b2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b57be:	e7f5      	b.n	b57ac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b57c0:	eba5 0508 	sub.w	r5, r5, r8
}
   b57c4:	4802      	ldr	r0, [pc, #8]	; (b57d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b57c6:	10ad      	asrs	r5, r5, #2
   b57c8:	4368      	muls	r0, r5
   b57ca:	b003      	add	sp, #12
   b57cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b57d0:	cccccccd 	.word	0xcccccccd

000b57d4 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b57d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b57d6:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b57d8:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b57da:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b57dc:	b303      	cbz	r3, b5820 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b57de:	b1f9      	cbz	r1, b5820 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b57e0:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b57e2:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b57e6:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b57e8:	a903      	add	r1, sp, #12
   b57ea:	a801      	add	r0, sp, #4
   b57ec:	f7ff ff28 	bl	b5640 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b57f0:	4601      	mov	r1, r0
   b57f2:	b1a8      	cbz	r0, b5820 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b57f4:	f10d 030b 	add.w	r3, sp, #11
   b57f8:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b57fa:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b57fe:	4620      	mov	r0, r4
   b5800:	f7ff ffac 	bl	b575c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b5804:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b5808:	b153      	cbz	r3, b5820 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b580a:	6823      	ldr	r3, [r4, #0]
   b580c:	2414      	movs	r4, #20
   b580e:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b5812:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b5814:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b5818:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b581a:	bfa8      	it	ge
   b581c:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b581e:	e7e3      	b.n	b57e8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b5820:	4628      	mov	r0, r5
   b5822:	b004      	add	sp, #16
   b5824:	bd70      	pop	{r4, r5, r6, pc}

000b5826 <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b5826:	b40e      	push	{r1, r2, r3}
   b5828:	b5f0      	push	{r4, r5, r6, r7, lr}
   b582a:	b08c      	sub	sp, #48	; 0x30
   b582c:	af00      	add	r7, sp, #0
   b582e:	f107 0544 	add.w	r5, r7, #68	; 0x44
   b5832:	4604      	mov	r4, r0
   b5834:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5838:	607a      	str	r2, [r7, #4]
   b583a:	462b      	mov	r3, r5
   b583c:	2120      	movs	r1, #32
   b583e:	f107 0010 	add.w	r0, r7, #16
    va_start(args, fmt);
   b5842:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5844:	f7fe ffae 	bl	b47a4 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
   b5848:	281f      	cmp	r0, #31
   b584a:	687a      	ldr	r2, [r7, #4]
   b584c:	d91a      	bls.n	b5884 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
   b584e:	f100 0308 	add.w	r3, r0, #8
   b5852:	f023 0307 	bic.w	r3, r3, #7
        }
   b5856:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
   b5858:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b585c:	1c41      	adds	r1, r0, #1
   b585e:	462b      	mov	r3, r5
   b5860:	4668      	mov	r0, sp
        va_start(args, fmt);
   b5862:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5864:	f7fe ff9e 	bl	b47a4 <vsnprintf>
        if (n > 0) {
   b5868:	1e02      	subs	r2, r0, #0
   b586a:	dd04      	ble.n	b5876 <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
   b586c:	6823      	ldr	r3, [r4, #0]
   b586e:	4669      	mov	r1, sp
   b5870:	68db      	ldr	r3, [r3, #12]
   b5872:	4620      	mov	r0, r4
   b5874:	4798      	blx	r3
   b5876:	46b5      	mov	sp, r6
}
   b5878:	3730      	adds	r7, #48	; 0x30
   b587a:	46bd      	mov	sp, r7
   b587c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b5880:	b003      	add	sp, #12
   b5882:	4770      	bx	lr
    } else if (n > 0) {
   b5884:	2800      	cmp	r0, #0
   b5886:	d0f7      	beq.n	b5878 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
   b5888:	6823      	ldr	r3, [r4, #0]
   b588a:	4602      	mov	r2, r0
   b588c:	68db      	ldr	r3, [r3, #12]
   b588e:	f107 0110 	add.w	r1, r7, #16
   b5892:	4620      	mov	r0, r4
   b5894:	4798      	blx	r3
}
   b5896:	e7ef      	b.n	b5878 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

000b5898 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b5898:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b589a:	4c09      	ldr	r4, [pc, #36]	; (b58c0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b589c:	7823      	ldrb	r3, [r4, #0]
   b589e:	f3bf 8f5b 	dmb	ish
   b58a2:	07db      	lsls	r3, r3, #31
   b58a4:	d409      	bmi.n	b58ba <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b58a6:	4620      	mov	r0, r4
   b58a8:	f7fe fc18 	bl	b40dc <__cxa_guard_acquire>
   b58ac:	b128      	cbz	r0, b58ba <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b58ae:	4620      	mov	r0, r4
   b58b0:	f7fe fc19 	bl	b40e6 <__cxa_guard_release>
   b58b4:	4803      	ldr	r0, [pc, #12]	; (b58c4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b58b6:	f001 fc97 	bl	b71e8 <atexit>
}
   b58ba:	4803      	ldr	r0, [pc, #12]	; (b58c8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b58bc:	bd10      	pop	{r4, pc}
   b58be:	bf00      	nop
   b58c0:	2003e6c8 	.word	0x2003e6c8
   b58c4:	000b5639 	.word	0x000b5639
   b58c8:	2003e5e8 	.word	0x2003e5e8

000b58cc <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b58cc:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b58ce:	4c09      	ldr	r4, [pc, #36]	; (b58f4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b58d0:	7823      	ldrb	r3, [r4, #0]
   b58d2:	f3bf 8f5b 	dmb	ish
   b58d6:	07db      	lsls	r3, r3, #31
   b58d8:	d409      	bmi.n	b58ee <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b58da:	4620      	mov	r0, r4
   b58dc:	f7fe fbfe 	bl	b40dc <__cxa_guard_acquire>
   b58e0:	b128      	cbz	r0, b58ee <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b58e2:	4620      	mov	r0, r4
   b58e4:	f7fe fbff 	bl	b40e6 <__cxa_guard_release>
   b58e8:	4803      	ldr	r0, [pc, #12]	; (b58f8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b58ea:	f001 fc7d 	bl	b71e8 <atexit>
    return &factory;
}
   b58ee:	4803      	ldr	r0, [pc, #12]	; (b58fc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b58f0:	bd10      	pop	{r4, pc}
   b58f2:	bf00      	nop
   b58f4:	2003e6cc 	.word	0x2003e6cc
   b58f8:	000b56a1 	.word	0x000b56a1
   b58fc:	2003e5ec 	.word	0x2003e5ec

000b5900 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b5900:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b5902:	2500      	movs	r5, #0
   b5904:	4604      	mov	r4, r0
   b5906:	e9c0 5500 	strd	r5, r5, [r0]
   b590a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b590e:	6085      	str	r5, [r0, #8]
   b5910:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b5912:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b5916:	f7fe fdc9 	bl	b44ac <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b591a:	f7ff ffbd 	bl	b5898 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b591e:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b5920:	f7ff ffd4 	bl	b58cc <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b5924:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b5926:	6220      	str	r0, [r4, #32]
}
   b5928:	4620      	mov	r0, r4
   b592a:	bd38      	pop	{r3, r4, r5, pc}

000b592c <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b592c:	b510      	push	{r4, lr}
    static LogManager mgr;
   b592e:	4c0a      	ldr	r4, [pc, #40]	; (b5958 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b5930:	7823      	ldrb	r3, [r4, #0]
   b5932:	f3bf 8f5b 	dmb	ish
   b5936:	07db      	lsls	r3, r3, #31
   b5938:	d40c      	bmi.n	b5954 <_ZN5spark10LogManager8instanceEv+0x28>
   b593a:	4620      	mov	r0, r4
   b593c:	f7fe fbce 	bl	b40dc <__cxa_guard_acquire>
   b5940:	b140      	cbz	r0, b5954 <_ZN5spark10LogManager8instanceEv+0x28>
   b5942:	4806      	ldr	r0, [pc, #24]	; (b595c <_ZN5spark10LogManager8instanceEv+0x30>)
   b5944:	f7ff ffdc 	bl	b5900 <_ZN5spark10LogManagerC1Ev>
   b5948:	4620      	mov	r0, r4
   b594a:	f7fe fbcc 	bl	b40e6 <__cxa_guard_release>
   b594e:	4804      	ldr	r0, [pc, #16]	; (b5960 <_ZN5spark10LogManager8instanceEv+0x34>)
   b5950:	f001 fc4a 	bl	b71e8 <atexit>
    return &mgr;
}
   b5954:	4801      	ldr	r0, [pc, #4]	; (b595c <_ZN5spark10LogManager8instanceEv+0x30>)
   b5956:	bd10      	pop	{r4, pc}
   b5958:	2003e6c4 	.word	0x2003e6c4
   b595c:	2003e6d4 	.word	0x2003e6d4
   b5960:	000b5e81 	.word	0x000b5e81

000b5964 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b5964:	4a02      	ldr	r2, [pc, #8]	; (b5970 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b5966:	4903      	ldr	r1, [pc, #12]	; (b5974 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b5968:	4803      	ldr	r0, [pc, #12]	; (b5978 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b596a:	2300      	movs	r3, #0
   b596c:	f7fe be6e 	b.w	b464c <log_set_callbacks>
   b5970:	000b5c65 	.word	0x000b5c65
   b5974:	000b5bf1 	.word	0x000b5bf1
   b5978:	000b5b71 	.word	0x000b5b71

000b597c <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b597c:	2300      	movs	r3, #0
   b597e:	461a      	mov	r2, r3
   b5980:	4619      	mov	r1, r3
   b5982:	4618      	mov	r0, r3
   b5984:	f7fe be62 	b.w	b464c <log_set_callbacks>

000b5988 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b5988:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b598a:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b598c:	4604      	mov	r4, r0
   b598e:	4668      	mov	r0, sp
   b5990:	f7ff fe9f 	bl	b56d2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b5994:	466a      	mov	r2, sp
   b5996:	4629      	mov	r1, r5
   b5998:	4620      	mov	r0, r4
   b599a:	f001 f9db 	bl	b6d54 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b599e:	a801      	add	r0, sp, #4
   b59a0:	f7ff fad3 	bl	b4f4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b59a4:	4620      	mov	r0, r4
   b59a6:	b003      	add	sp, #12
   b59a8:	bd30      	pop	{r4, r5, pc}

000b59aa <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b59aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b59ac:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b59ae:	4604      	mov	r4, r0
   b59b0:	4668      	mov	r0, sp
   b59b2:	f7ff fe8e 	bl	b56d2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b59b6:	466a      	mov	r2, sp
   b59b8:	4629      	mov	r1, r5
   b59ba:	4620      	mov	r0, r4
   b59bc:	f001 f9a6 	bl	b6d0c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b59c0:	a801      	add	r0, sp, #4
   b59c2:	f7ff fac2 	bl	b4f4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b59c6:	4620      	mov	r0, r4
   b59c8:	b003      	add	sp, #12
   b59ca:	bd30      	pop	{r4, r5, pc}

000b59cc <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b59cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b59ce:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b59d0:	4604      	mov	r4, r0
   b59d2:	4668      	mov	r0, sp
   b59d4:	f7ff fe7d 	bl	b56d2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b59d8:	466a      	mov	r2, sp
   b59da:	4629      	mov	r1, r5
   b59dc:	4620      	mov	r0, r4
   b59de:	f001 f93e 	bl	b6c5e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b59e2:	a801      	add	r0, sp, #4
   b59e4:	f7ff fab1 	bl	b4f4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b59e8:	4620      	mov	r0, r4
   b59ea:	b003      	add	sp, #12
   b59ec:	bd30      	pop	{r4, r5, pc}
	...

000b59f0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b59f0:	b570      	push	{r4, r5, r6, lr}
   b59f2:	b08a      	sub	sp, #40	; 0x28
   b59f4:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b59f6:	4601      	mov	r1, r0
   b59f8:	a804      	add	r0, sp, #16
   b59fa:	f7ff ffc5 	bl	b5988 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b59fe:	4e14      	ldr	r6, [pc, #80]	; (b5a50 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b5a00:	a804      	add	r0, sp, #16
   b5a02:	f001 f9bf 	bl	b6d84 <_ZN5spark18JSONObjectIterator4nextEv>
   b5a06:	b1e8      	cbz	r0, b5a44 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b5a08:	a904      	add	r1, sp, #16
   b5a0a:	4668      	mov	r0, sp
   b5a0c:	f7ff ffcd 	bl	b59aa <_ZNK5spark18JSONObjectIterator4nameEv>
   b5a10:	9802      	ldr	r0, [sp, #8]
   b5a12:	4631      	mov	r1, r6
   b5a14:	f7ff fe3d 	bl	b5692 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b5a18:	4604      	mov	r4, r0
   b5a1a:	b110      	cbz	r0, b5a22 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b5a1c:	1e2c      	subs	r4, r5, #0
   b5a1e:	bf18      	it	ne
   b5a20:	2401      	movne	r4, #1
   b5a22:	a801      	add	r0, sp, #4
   b5a24:	f7ff fa91 	bl	b4f4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5a28:	2c00      	cmp	r4, #0
   b5a2a:	d0e9      	beq.n	b5a00 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b5a2c:	a904      	add	r1, sp, #16
   b5a2e:	4668      	mov	r0, sp
   b5a30:	f7ff ffcc 	bl	b59cc <_ZNK5spark18JSONObjectIterator5valueEv>
   b5a34:	4668      	mov	r0, sp
   b5a36:	f001 f948 	bl	b6cca <_ZNK5spark9JSONValue5toIntEv>
   b5a3a:	6028      	str	r0, [r5, #0]
   b5a3c:	a801      	add	r0, sp, #4
   b5a3e:	f7ff fa84 	bl	b4f4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5a42:	e7dd      	b.n	b5a00 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b5a44:	a805      	add	r0, sp, #20
   b5a46:	f7ff fa80 	bl	b4f4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5a4a:	b00a      	add	sp, #40	; 0x28
   b5a4c:	bd70      	pop	{r4, r5, r6, pc}
   b5a4e:	bf00      	nop
   b5a50:	000b7730 	.word	0x000b7730

000b5a54 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b5a54:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5a56:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b5a58:	4620      	mov	r0, r4
   b5a5a:	4913      	ldr	r1, [pc, #76]	; (b5aa8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b5a5c:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b5a5e:	f7fe fadd 	bl	b401c <strcmp>
   b5a62:	b950      	cbnz	r0, b5a7a <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b5a64:	f000 ff1c 	bl	b68a0 <_Z16_fetch_usbserialv>
   b5a68:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5a6c:	f000 ff08 	bl	b6880 <_ZN9USBSerial5beginEl>
}
   b5a70:	b003      	add	sp, #12
   b5a72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b5a76:	f000 bf13 	b.w	b68a0 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b5a7a:	490c      	ldr	r1, [pc, #48]	; (b5aac <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b5a7c:	4620      	mov	r0, r4
   b5a7e:	f7fe facd 	bl	b401c <strcmp>
   b5a82:	b978      	cbnz	r0, b5aa4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b5a84:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b5a88:	a901      	add	r1, sp, #4
   b5a8a:	4628      	mov	r0, r5
        int baud = 9600;
   b5a8c:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b5a8e:	f7ff ffaf 	bl	b59f0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b5a92:	f001 fa6b 	bl	b6f6c <_Z22__fetch_global_Serial1v>
   b5a96:	9901      	ldr	r1, [sp, #4]
   b5a98:	f000 ff7e 	bl	b6998 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b5a9c:	f001 fa66 	bl	b6f6c <_Z22__fetch_global_Serial1v>
}
   b5aa0:	b003      	add	sp, #12
   b5aa2:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b5aa4:	2000      	movs	r0, #0
   b5aa6:	e7fb      	b.n	b5aa0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b5aa8:	000b7735 	.word	0x000b7735
   b5aac:	000b773c 	.word	0x000b773c

000b5ab0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5ab0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5ab2:	e9d0 5300 	ldrd	r5, r3, [r0]
   b5ab6:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5ab8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5aba:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5abe:	42ae      	cmp	r6, r5
   b5ac0:	d005      	beq.n	b5ace <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b5ac2:	f105 0008 	add.w	r0, r5, #8
   b5ac6:	f7ff fff3 	bl	b5ab0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b5aca:	3514      	adds	r5, #20
   b5acc:	e7f7      	b.n	b5abe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b5ace:	6820      	ldr	r0, [r4, #0]
   b5ad0:	f7fe fe58 	bl	b4784 <free>
}
   b5ad4:	4620      	mov	r0, r4
   b5ad6:	bd70      	pop	{r4, r5, r6, pc}

000b5ad8 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b5ad8:	b510      	push	{r4, lr}
   b5ada:	4604      	mov	r4, r0
   b5adc:	300c      	adds	r0, #12
   b5ade:	f7ff ffe7 	bl	b5ab0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b5ae2:	4620      	mov	r0, r4
   b5ae4:	f7ff f9a8 	bl	b4e38 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b5ae8:	4620      	mov	r0, r4
   b5aea:	bd10      	pop	{r4, pc}

000b5aec <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b5aec:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b5aee:	4b04      	ldr	r3, [pc, #16]	; (b5b00 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b5af0:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b5af2:	f840 3b04 	str.w	r3, [r0], #4
   b5af6:	f7ff ffef 	bl	b5ad8 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b5afa:	4620      	mov	r0, r4
   b5afc:	bd10      	pop	{r4, pc}
   b5afe:	bf00      	nop
   b5b00:	000b75e8 	.word	0x000b75e8

000b5b04 <_ZN5spark16StreamLogHandlerD0Ev>:
   b5b04:	b510      	push	{r4, lr}
   b5b06:	4604      	mov	r4, r0
   b5b08:	f7ff fff0 	bl	b5aec <_ZN5spark16StreamLogHandlerD1Ev>
   b5b0c:	4620      	mov	r0, r4
   b5b0e:	2124      	movs	r1, #36	; 0x24
   b5b10:	f7fe fad5 	bl	b40be <_ZdlPvj>
   b5b14:	4620      	mov	r0, r4
   b5b16:	bd10      	pop	{r4, pc}

000b5b18 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b5b18:	b510      	push	{r4, lr}
   b5b1a:	4b03      	ldr	r3, [pc, #12]	; (b5b28 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b5b1c:	6003      	str	r3, [r0, #0]
   b5b1e:	4604      	mov	r4, r0
   b5b20:	f7ff ffe4 	bl	b5aec <_ZN5spark16StreamLogHandlerD1Ev>
   b5b24:	4620      	mov	r0, r4
   b5b26:	bd10      	pop	{r4, pc}
   b5b28:	000b77e0 	.word	0x000b77e0

000b5b2c <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b5b2c:	b510      	push	{r4, lr}
   b5b2e:	4604      	mov	r4, r0
   b5b30:	f7ff fff2 	bl	b5b18 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b5b34:	4620      	mov	r0, r4
   b5b36:	2124      	movs	r1, #36	; 0x24
   b5b38:	f7fe fac1 	bl	b40be <_ZdlPvj>
   b5b3c:	4620      	mov	r0, r4
   b5b3e:	bd10      	pop	{r4, pc}

000b5b40 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b5b40:	2200      	movs	r2, #0
   b5b42:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b5b46:	b510      	push	{r4, lr}
        capacity_(0) {
   b5b48:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b5b4a:	680c      	ldr	r4, [r1, #0]
   b5b4c:	6004      	str	r4, [r0, #0]
   b5b4e:	684c      	ldr	r4, [r1, #4]
   b5b50:	6044      	str	r4, [r0, #4]
   b5b52:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5b54:	600a      	str	r2, [r1, #0]
   b5b56:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5b58:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5b5a:	608a      	str	r2, [r1, #8]
}
   b5b5c:	bd10      	pop	{r4, pc}

000b5b5e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b5b5e:	b510      	push	{r4, lr}
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b5b60:	6803      	ldr	r3, [r0, #0]
   b5b62:	4604      	mov	r4, r0
   b5b64:	6818      	ldr	r0, [r3, #0]
   b5b66:	f7fe fcb9 	bl	b44dc <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b5b6a:	4620      	mov	r0, r4
   b5b6c:	bd10      	pop	{r4, pc}
	...

000b5b70 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b5b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5b74:	b087      	sub	sp, #28
   b5b76:	4680      	mov	r8, r0
   b5b78:	9303      	str	r3, [sp, #12]
    #endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)

static inline bool hal_interrupt_is_isr() {
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b5b7a:	4b1c      	ldr	r3, [pc, #112]	; (b5bec <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b5b7c:	685b      	ldr	r3, [r3, #4]
   b5b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b5b82:	4689      	mov	r9, r1
   b5b84:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
   b5b86:	b96b      	cbnz	r3, b5ba4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b5b88:	f7ff fed0 	bl	b592c <_ZN5spark10LogManager8instanceEv>
   b5b8c:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b5b8e:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b5b92:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5b94:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b5b96:	f7ff fd7a 	bl	b568e <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b5b9a:	7b23      	ldrb	r3, [r4, #12]
   b5b9c:	b12b      	cbz	r3, b5baa <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b5b9e:	a805      	add	r0, sp, #20
   b5ba0:	f7ff ffdd 	bl	b5b5e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b5ba4:	b007      	add	sp, #28
   b5ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b5baa:	2301      	movs	r3, #1
   b5bac:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b5bae:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b5bb2:	fa5f f989 	uxtb.w	r9, r9
   b5bb6:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b5bba:	45aa      	cmp	sl, r5
   b5bbc:	d012      	beq.n	b5be4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b5bbe:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b5bc2:	4631      	mov	r1, r6
   b5bc4:	1d38      	adds	r0, r7, #4
   b5bc6:	f7ff fe05 	bl	b57d4 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b5bca:	4581      	cmp	r9, r0
   b5bcc:	d3f5      	bcc.n	b5bba <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b5bce:	683b      	ldr	r3, [r7, #0]
   b5bd0:	9a03      	ldr	r2, [sp, #12]
   b5bd2:	9200      	str	r2, [sp, #0]
   b5bd4:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b5bd8:	464a      	mov	r2, r9
   b5bda:	4633      	mov	r3, r6
   b5bdc:	4641      	mov	r1, r8
   b5bde:	4638      	mov	r0, r7
   b5be0:	47d8      	blx	fp
   b5be2:	e7ea      	b.n	b5bba <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b5be4:	2300      	movs	r3, #0
   b5be6:	7323      	strb	r3, [r4, #12]
   b5be8:	e7d9      	b.n	b5b9e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b5bea:	bf00      	nop
   b5bec:	e000ed00 	.word	0xe000ed00

000b5bf0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b5bf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5bf4:	469b      	mov	fp, r3
   b5bf6:	4b1a      	ldr	r3, [pc, #104]	; (b5c60 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b5bf8:	685b      	ldr	r3, [r3, #4]
   b5bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b5bfe:	4680      	mov	r8, r0
   b5c00:	4689      	mov	r9, r1
   b5c02:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
   b5c04:	b96b      	cbnz	r3, b5c22 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b5c06:	f7ff fe91 	bl	b592c <_ZN5spark10LogManager8instanceEv>
   b5c0a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b5c0c:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b5c10:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5c12:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b5c14:	f7ff fd3b 	bl	b568e <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b5c18:	7b23      	ldrb	r3, [r4, #12]
   b5c1a:	b12b      	cbz	r3, b5c28 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b5c1c:	a801      	add	r0, sp, #4
   b5c1e:	f7ff ff9e 	bl	b5b5e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b5c22:	b003      	add	sp, #12
   b5c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b5c28:	2301      	movs	r3, #1
   b5c2a:	7323      	strb	r3, [r4, #12]
   b5c2c:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b5c30:	b2f6      	uxtb	r6, r6
   b5c32:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b5c36:	4555      	cmp	r5, sl
   b5c38:	d00e      	beq.n	b5c58 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b5c3a:	f855 7b04 	ldr.w	r7, [r5], #4
   b5c3e:	4659      	mov	r1, fp
   b5c40:	1d38      	adds	r0, r7, #4
   b5c42:	f7ff fdc7 	bl	b57d4 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b5c46:	4286      	cmp	r6, r0
   b5c48:	d3f5      	bcc.n	b5c36 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b5c4a:	683b      	ldr	r3, [r7, #0]
   b5c4c:	464a      	mov	r2, r9
   b5c4e:	68db      	ldr	r3, [r3, #12]
   b5c50:	4641      	mov	r1, r8
   b5c52:	4638      	mov	r0, r7
   b5c54:	4798      	blx	r3
   b5c56:	e7ee      	b.n	b5c36 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b5c58:	2300      	movs	r3, #0
   b5c5a:	7323      	strb	r3, [r4, #12]
   b5c5c:	e7de      	b.n	b5c1c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b5c5e:	bf00      	nop
   b5c60:	e000ed00 	.word	0xe000ed00

000b5c64 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b5c64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5c68:	4b16      	ldr	r3, [pc, #88]	; (b5cc4 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b5c6a:	685b      	ldr	r3, [r3, #4]
   b5c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b5c70:	4605      	mov	r5, r0
   b5c72:	460f      	mov	r7, r1
    if (hal_interrupt_is_isr()) {
   b5c74:	bb1b      	cbnz	r3, b5cbe <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b5c76:	f7ff fe59 	bl	b592c <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b5c7a:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b5c7e:	4604      	mov	r4, r0
   b5c80:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5c82:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b5c84:	f7ff fd03 	bl	b568e <_ZN14RecursiveMutex4lockEv.isra.0>
   b5c88:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b5c8c:	2446      	movs	r4, #70	; 0x46
   b5c8e:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b5c92:	45b0      	cmp	r8, r6
   b5c94:	d109      	bne.n	b5caa <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b5c96:	a801      	add	r0, sp, #4
   b5c98:	f7ff ff61 	bl	b5b5e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b5c9c:	42a5      	cmp	r5, r4
   b5c9e:	bfb4      	ite	lt
   b5ca0:	2000      	movlt	r0, #0
   b5ca2:	2001      	movge	r0, #1
}
   b5ca4:	b002      	add	sp, #8
   b5ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b5caa:	f856 0b04 	ldr.w	r0, [r6], #4
   b5cae:	4639      	mov	r1, r7
   b5cb0:	3004      	adds	r0, #4
   b5cb2:	f7ff fd8f 	bl	b57d4 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b5cb6:	4284      	cmp	r4, r0
   b5cb8:	bfa8      	it	ge
   b5cba:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b5cbc:	e7e9      	b.n	b5c92 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b5cbe:	2000      	movs	r0, #0
   b5cc0:	e7f0      	b.n	b5ca4 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b5cc2:	bf00      	nop
   b5cc4:	e000ed00 	.word	0xe000ed00

000b5cc8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5cca:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b5cce:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5cd0:	4604      	mov	r4, r0
   b5cd2:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5cd4:	db0d      	blt.n	b5cf2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b5cd6:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b5cd8:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b5cda:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b5cdc:	dd04      	ble.n	b5ce8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b5cde:	00b9      	lsls	r1, r7, #2
   b5ce0:	f7fe fd58 	bl	b4794 <realloc>
            if (!d) {
   b5ce4:	b918      	cbnz	r0, b5cee <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b5ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b5ce8:	f7fe fd4c 	bl	b4784 <free>
        T* d = nullptr;
   b5cec:	2000      	movs	r0, #0
        data_ = d;
   b5cee:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b5cf0:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b5cf2:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b5cf4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5cf6:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b5cfa:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5cfc:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b5d00:	1d08      	adds	r0, r1, #4
   b5d02:	f001 fa9d 	bl	b7240 <memmove>
    new(p) T(std::move(value));
   b5d06:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b5d0a:	6863      	ldr	r3, [r4, #4]
   b5d0c:	3301      	adds	r3, #1
   b5d0e:	6063      	str	r3, [r4, #4]
    return true;
   b5d10:	2001      	movs	r0, #1
   b5d12:	e7e8      	b.n	b5ce6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b5d14 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b5d14:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b5d16:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b5d1a:	4604      	mov	r4, r0
   b5d1c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5d1e:	9301      	str	r3, [sp, #4]
   b5d20:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b5d22:	f7ff fcb4 	bl	b568e <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b5d26:	e9d4 3200 	ldrd	r3, r2, [r4]
   b5d2a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b5d2e:	4293      	cmp	r3, r2
   b5d30:	4619      	mov	r1, r3
   b5d32:	d00b      	beq.n	b5d4c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b5d34:	6809      	ldr	r1, [r1, #0]
   b5d36:	42a9      	cmp	r1, r5
   b5d38:	f103 0304 	add.w	r3, r3, #4
   b5d3c:	d1f7      	bne.n	b5d2e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b5d3e:	a801      	add	r0, sp, #4
   b5d40:	f7ff ff0d 	bl	b5b5e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b5d44:	2500      	movs	r5, #0
}
   b5d46:	4628      	mov	r0, r5
   b5d48:	b003      	add	sp, #12
   b5d4a:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b5d4c:	4629      	mov	r1, r5
   b5d4e:	4620      	mov	r0, r4
   b5d50:	f7ff ffba 	bl	b5cc8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b5d54:	4605      	mov	r5, r0
   b5d56:	2800      	cmp	r0, #0
   b5d58:	d0f1      	beq.n	b5d3e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b5d5a:	6863      	ldr	r3, [r4, #4]
   b5d5c:	2b01      	cmp	r3, #1
   b5d5e:	d101      	bne.n	b5d64 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b5d60:	f7ff fe00 	bl	b5964 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5d64:	a801      	add	r0, sp, #4
   b5d66:	f7ff fefa 	bl	b5b5e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b5d6a:	e7ec      	b.n	b5d46 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b5d6c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5d6c:	b570      	push	{r4, r5, r6, lr}
   b5d6e:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b5d70:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5d74:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b5d76:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b5d7a:	4282      	cmp	r2, r0
   b5d7c:	d00f      	beq.n	b5d9e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b5d7e:	4601      	mov	r1, r0
            if (*p == value) {
   b5d80:	681d      	ldr	r5, [r3, #0]
   b5d82:	f851 6b04 	ldr.w	r6, [r1], #4
   b5d86:	42ae      	cmp	r6, r5
   b5d88:	d107      	bne.n	b5d9a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5d8a:	1a52      	subs	r2, r2, r1
   b5d8c:	f001 fa58 	bl	b7240 <memmove>
    --size_;
   b5d90:	6863      	ldr	r3, [r4, #4]
   b5d92:	3b01      	subs	r3, #1
   b5d94:	6063      	str	r3, [r4, #4]
    return true;
   b5d96:	2001      	movs	r0, #1
}
   b5d98:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b5d9a:	4608      	mov	r0, r1
   b5d9c:	e7ed      	b.n	b5d7a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b5d9e:	2000      	movs	r0, #0
   b5da0:	e7fa      	b.n	b5d98 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b5da2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b5da2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b5da4:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b5da8:	4604      	mov	r4, r0
   b5daa:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b5dac:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5dae:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b5db0:	f7ff fc6d 	bl	b568e <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b5db4:	a901      	add	r1, sp, #4
   b5db6:	4620      	mov	r0, r4
   b5db8:	f7ff ffd8 	bl	b5d6c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b5dbc:	b118      	cbz	r0, b5dc6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b5dbe:	6863      	ldr	r3, [r4, #4]
   b5dc0:	b90b      	cbnz	r3, b5dc6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b5dc2:	f7ff fddb 	bl	b597c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5dc6:	a803      	add	r0, sp, #12
   b5dc8:	f7ff fec9 	bl	b5b5e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b5dcc:	b004      	add	sp, #16
   b5dce:	bd10      	pop	{r4, pc}

000b5dd0 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b5dd0:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b5dd2:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b5dd6:	2318      	movs	r3, #24
   b5dd8:	4604      	mov	r4, r0
   b5dda:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b5dde:	42ae      	cmp	r6, r5
   b5de0:	d015      	beq.n	b5e0e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b5de2:	f105 0110 	add.w	r1, r5, #16
   b5de6:	4620      	mov	r0, r4
   b5de8:	f7ff ffc0 	bl	b5d6c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b5dec:	6863      	ldr	r3, [r4, #4]
   b5dee:	b90b      	cbnz	r3, b5df4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b5df0:	f7ff fdc4 	bl	b597c <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b5df4:	69e0      	ldr	r0, [r4, #28]
   b5df6:	6929      	ldr	r1, [r5, #16]
   b5df8:	6803      	ldr	r3, [r0, #0]
   b5dfa:	68db      	ldr	r3, [r3, #12]
   b5dfc:	4798      	blx	r3
        if (h.stream) {
   b5dfe:	6969      	ldr	r1, [r5, #20]
   b5e00:	b119      	cbz	r1, b5e0a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b5e02:	6a20      	ldr	r0, [r4, #32]
   b5e04:	6803      	ldr	r3, [r0, #0]
   b5e06:	68db      	ldr	r3, [r3, #12]
   b5e08:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b5e0a:	3518      	adds	r5, #24
   b5e0c:	e7e7      	b.n	b5dde <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b5e0e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b5e12:	2618      	movs	r6, #24
   b5e14:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5e18:	42ae      	cmp	r6, r5
   b5e1a:	d004      	beq.n	b5e26 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b5e1c:	4628      	mov	r0, r5
   b5e1e:	f7fe fd39 	bl	b4894 <_ZN6StringD1Ev>
   b5e22:	3518      	adds	r5, #24
   b5e24:	e7f8      	b.n	b5e18 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b5e26:	2300      	movs	r3, #0
   b5e28:	6163      	str	r3, [r4, #20]
}
   b5e2a:	bd70      	pop	{r4, r5, r6, pc}

000b5e2c <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b5e2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5e2e:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b5e30:	f7ff fda4 	bl	b597c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5e34:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b5e38:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5e3a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b5e3c:	f7ff fc27 	bl	b568e <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b5e40:	4620      	mov	r0, r4
   b5e42:	f7ff ffc5 	bl	b5dd0 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b5e46:	a801      	add	r0, sp, #4
   b5e48:	f7ff fe89 	bl	b5b5e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b5e4c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5e4e:	b108      	cbz	r0, b5e54 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b5e50:	f7fe fb34 	bl	b44bc <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b5e54:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b5e58:	2618      	movs	r6, #24
   b5e5a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5e5e:	42ae      	cmp	r6, r5
   b5e60:	d004      	beq.n	b5e6c <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b5e62:	4628      	mov	r0, r5
   b5e64:	f7fe fd16 	bl	b4894 <_ZN6StringD1Ev>
   b5e68:	3518      	adds	r5, #24
   b5e6a:	e7f8      	b.n	b5e5e <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b5e6c:	6920      	ldr	r0, [r4, #16]
   b5e6e:	f7fe fc89 	bl	b4784 <free>
   b5e72:	6820      	ldr	r0, [r4, #0]
   b5e74:	f7fe fc86 	bl	b4784 <free>
}
   b5e78:	4620      	mov	r0, r4
   b5e7a:	b002      	add	sp, #8
   b5e7c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5e80 <__tcf_2>:
    static LogManager mgr;
   b5e80:	4801      	ldr	r0, [pc, #4]	; (b5e88 <__tcf_2+0x8>)
   b5e82:	f7ff bfd3 	b.w	b5e2c <_ZN5spark10LogManagerD1Ev>
   b5e86:	bf00      	nop
   b5e88:	2003e6d4 	.word	0x2003e6d4

000b5e8c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b5e8c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5e8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5e90:	4604      	mov	r4, r0
   b5e92:	460d      	mov	r5, r1
   b5e94:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5e96:	d915      	bls.n	b5ec4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b5e98:	4290      	cmp	r0, r2
   b5e9a:	d214      	bcs.n	b5ec6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b5e9c:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b5ea0:	1a75      	subs	r5, r6, r1
   b5ea2:	f1a1 0714 	sub.w	r7, r1, #20
   b5ea6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5ea8:	42b7      	cmp	r7, r6
   b5eaa:	d01a      	beq.n	b5ee2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b5eac:	b11c      	cbz	r4, b5eb6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b5eae:	4631      	mov	r1, r6
   b5eb0:	4620      	mov	r0, r4
   b5eb2:	f7ff fc40 	bl	b5736 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b5eb6:	f106 0008 	add.w	r0, r6, #8
   b5eba:	f7ff fdf9 	bl	b5ab0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b5ebe:	3e14      	subs	r6, #20
   b5ec0:	3c14      	subs	r4, #20
   b5ec2:	e7f1      	b.n	b5ea8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b5ec4:	d00d      	beq.n	b5ee2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b5ec6:	42b5      	cmp	r5, r6
   b5ec8:	d00b      	beq.n	b5ee2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b5eca:	b11c      	cbz	r4, b5ed4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b5ecc:	4629      	mov	r1, r5
   b5ece:	4620      	mov	r0, r4
   b5ed0:	f7ff fc31 	bl	b5736 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b5ed4:	f105 0008 	add.w	r0, r5, #8
   b5ed8:	f7ff fdea 	bl	b5ab0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b5edc:	3514      	adds	r5, #20
   b5ede:	3414      	adds	r4, #20
   b5ee0:	e7f1      	b.n	b5ec6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b5ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5ee4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b5ee4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5ee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5ee8:	4604      	mov	r4, r0
   b5eea:	460d      	mov	r5, r1
   b5eec:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5eee:	d914      	bls.n	b5f1a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b5ef0:	4290      	cmp	r0, r2
   b5ef2:	d213      	bcs.n	b5f1c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b5ef4:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b5ef8:	1a75      	subs	r5, r6, r1
   b5efa:	f1a1 0710 	sub.w	r7, r1, #16
   b5efe:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5f00:	42b7      	cmp	r7, r6
   b5f02:	d018      	beq.n	b5f36 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b5f04:	b11c      	cbz	r4, b5f0e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b5f06:	4631      	mov	r1, r6
   b5f08:	4620      	mov	r0, r4
   b5f0a:	f7fe fd2b 	bl	b4964 <_ZN6StringC1EOS_>
                end->~T();
   b5f0e:	4630      	mov	r0, r6
   b5f10:	f7fe fcc0 	bl	b4894 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b5f14:	3e10      	subs	r6, #16
   b5f16:	3c10      	subs	r4, #16
   b5f18:	e7f2      	b.n	b5f00 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b5f1a:	d00c      	beq.n	b5f36 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b5f1c:	42b5      	cmp	r5, r6
   b5f1e:	d00a      	beq.n	b5f36 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b5f20:	b11c      	cbz	r4, b5f2a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b5f22:	4629      	mov	r1, r5
   b5f24:	4620      	mov	r0, r4
   b5f26:	f7fe fd1d 	bl	b4964 <_ZN6StringC1EOS_>
                p->~T();
   b5f2a:	4628      	mov	r0, r5
   b5f2c:	f7fe fcb2 	bl	b4894 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b5f30:	3510      	adds	r5, #16
   b5f32:	3410      	adds	r4, #16
   b5f34:	e7f2      	b.n	b5f1c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b5f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5f38 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b5f38:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b5f3a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b5f3c:	4605      	mov	r5, r0
        if (n > 0) {
   b5f3e:	dd11      	ble.n	b5f64 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b5f40:	0130      	lsls	r0, r6, #4
   b5f42:	f7fe fc17 	bl	b4774 <malloc>
            if (!d) {
   b5f46:	4604      	mov	r4, r0
   b5f48:	b158      	cbz	r0, b5f62 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b5f4a:	e9d5 1200 	ldrd	r1, r2, [r5]
   b5f4e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b5f52:	f7ff ffc7 	bl	b5ee4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b5f56:	6828      	ldr	r0, [r5, #0]
   b5f58:	f7fe fc14 	bl	b4784 <free>
        data_ = d;
   b5f5c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b5f5e:	60ae      	str	r6, [r5, #8]
        return true;
   b5f60:	2001      	movs	r0, #1
    }
   b5f62:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b5f64:	2400      	movs	r4, #0
   b5f66:	e7f6      	b.n	b5f56 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b5f68 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b5f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5f6c:	4690      	mov	r8, r2
   b5f6e:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b5f70:	2300      	movs	r3, #0
   b5f72:	9103      	str	r1, [sp, #12]
    return size_;
   b5f74:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b5f78:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b5f7a:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b5f7c:	4299      	cmp	r1, r3
        capacity_(0) {
   b5f7e:	e9c0 3300 	strd	r3, r3, [r0]
   b5f82:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b5f86:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b5f8a:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b5f8e:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b5f90:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b5f92:	dc23      	bgt.n	b5fdc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b5f94:	e9d8 5700 	ldrd	r5, r7, [r8]
   b5f98:	2314      	movs	r3, #20
   b5f9a:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b5f9e:	42af      	cmp	r7, r5
   b5fa0:	d03b      	beq.n	b601a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b5fa2:	4629      	mov	r1, r5
   b5fa4:	a80b      	add	r0, sp, #44	; 0x2c
   b5fa6:	f7fe fcdd 	bl	b4964 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b5faa:	a90b      	add	r1, sp, #44	; 0x2c
   b5fac:	a80f      	add	r0, sp, #60	; 0x3c
   b5fae:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b5fb0:	f7fe fcd8 	bl	b4964 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5fb4:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b5fb8:	4299      	cmp	r1, r3
   b5fba:	da1b      	bge.n	b5ff4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b5fbc:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b5fbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b5fc0:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b5fc4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b5fc8:	4631      	mov	r1, r6
   b5fca:	f106 0010 	add.w	r0, r6, #16
   b5fce:	f7ff ff89 	bl	b5ee4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b5fd2:	b9ee      	cbnz	r6, b6010 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b5fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5fd6:	3301      	adds	r3, #1
   b5fd8:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b5fda:	e011      	b.n	b6000 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b5fdc:	a808      	add	r0, sp, #32
   b5fde:	f7ff ffab 	bl	b5f38 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b5fe2:	2800      	cmp	r0, #0
   b5fe4:	d1d6      	bne.n	b5f94 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b5fe6:	a808      	add	r0, sp, #32
   b5fe8:	f7fe ff26 	bl	b4e38 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b5fec:	4620      	mov	r0, r4
   b5fee:	b015      	add	sp, #84	; 0x54
   b5ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5ff4:	3101      	adds	r1, #1
   b5ff6:	a808      	add	r0, sp, #32
   b5ff8:	f7ff ff9e 	bl	b5f38 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b5ffc:	2800      	cmp	r0, #0
   b5ffe:	d1dd      	bne.n	b5fbc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b6000:	a80f      	add	r0, sp, #60	; 0x3c
   b6002:	f7fe fc47 	bl	b4894 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b6006:	a80b      	add	r0, sp, #44	; 0x2c
   b6008:	f7fe fc44 	bl	b4894 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b600c:	3514      	adds	r5, #20
   b600e:	e7c6      	b.n	b5f9e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b6010:	a90f      	add	r1, sp, #60	; 0x3c
   b6012:	4630      	mov	r0, r6
   b6014:	f7fe fca6 	bl	b4964 <_ZN6StringC1EOS_>
   b6018:	e7dc      	b.n	b5fd4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b601a:	2600      	movs	r6, #0
   b601c:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b6020:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b6022:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b6026:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b602a:	429e      	cmp	r6, r3
   b602c:	da7c      	bge.n	b6128 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b602e:	0133      	lsls	r3, r6, #4
   b6030:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b6032:	9306      	str	r3, [sp, #24]
        if (!category) {
   b6034:	b90b      	cbnz	r3, b603a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b6036:	3601      	adds	r6, #1
   b6038:	e7f5      	b.n	b6026 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b603a:	2300      	movs	r3, #0
   b603c:	9307      	str	r3, [sp, #28]
   b603e:	fb09 f306 	mul.w	r3, r9, r6
   b6042:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b6044:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b6046:	a907      	add	r1, sp, #28
   b6048:	a806      	add	r0, sp, #24
   b604a:	f7ff faf9 	bl	b5640 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b604e:	4682      	mov	sl, r0
   b6050:	2800      	cmp	r0, #0
   b6052:	d0f0      	beq.n	b6036 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b6054:	f04f 0300 	mov.w	r3, #0
   b6058:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b605c:	4601      	mov	r1, r0
   b605e:	9a07      	ldr	r2, [sp, #28]
   b6060:	f10d 0317 	add.w	r3, sp, #23
   b6064:	4628      	mov	r0, r5
   b6066:	f7ff fb79 	bl	b575c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b606a:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b606e:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b6070:	2f00      	cmp	r7, #0
   b6072:	d14a      	bne.n	b610a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b6074:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b6078:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b607c:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b6080:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6084:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b6088:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b608c:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b608e:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b6092:	4293      	cmp	r3, r2
   b6094:	db17      	blt.n	b60c6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b6096:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b609a:	f1ba 0f00 	cmp.w	sl, #0
   b609e:	dd30      	ble.n	b6102 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b60a0:	fb09 f00a 	mul.w	r0, r9, sl
   b60a4:	f7fe fb66 	bl	b4774 <malloc>
            if (!d) {
   b60a8:	4683      	mov	fp, r0
   b60aa:	b360      	cbz	r0, b6106 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b60ac:	e9d5 1200 	ldrd	r1, r2, [r5]
   b60b0:	fb09 1202 	mla	r2, r9, r2, r1
   b60b4:	f7ff feea 	bl	b5e8c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b60b8:	6828      	ldr	r0, [r5, #0]
   b60ba:	f7fe fb63 	bl	b4784 <free>
        data_ = d;
   b60be:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b60c2:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b60c6:	682b      	ldr	r3, [r5, #0]
   b60c8:	9a01      	ldr	r2, [sp, #4]
   b60ca:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b60ce:	686a      	ldr	r2, [r5, #4]
   b60d0:	4651      	mov	r1, sl
   b60d2:	fb09 3202 	mla	r2, r9, r2, r3
   b60d6:	f10a 0014 	add.w	r0, sl, #20
   b60da:	f7ff fed7 	bl	b5e8c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b60de:	f1ba 0f00 	cmp.w	sl, #0
   b60e2:	d003      	beq.n	b60ec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b60e4:	a90f      	add	r1, sp, #60	; 0x3c
   b60e6:	4650      	mov	r0, sl
   b60e8:	f7ff fb25 	bl	b5736 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b60ec:	686b      	ldr	r3, [r5, #4]
   b60ee:	3301      	adds	r3, #1
   b60f0:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b60f2:	a811      	add	r0, sp, #68	; 0x44
   b60f4:	f7ff fcdc 	bl	b5ab0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b60f8:	b13f      	cbz	r7, b610a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b60fa:	a80b      	add	r0, sp, #44	; 0x2c
   b60fc:	f7ff fcd8 	bl	b5ab0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b6100:	e771      	b.n	b5fe6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b6102:	46bb      	mov	fp, r7
   b6104:	e7d8      	b.n	b60b8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b6106:	2701      	movs	r7, #1
   b6108:	e7f3      	b.n	b60f2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b610a:	9b01      	ldr	r3, [sp, #4]
   b610c:	682d      	ldr	r5, [r5, #0]
   b610e:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b6112:	9b06      	ldr	r3, [sp, #24]
   b6114:	781b      	ldrb	r3, [r3, #0]
   b6116:	b92b      	cbnz	r3, b6124 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b6118:	f8d8 3000 	ldr.w	r3, [r8]
   b611c:	9a02      	ldr	r2, [sp, #8]
   b611e:	4413      	add	r3, r2
   b6120:	7c1b      	ldrb	r3, [r3, #16]
   b6122:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b6124:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b6126:	e78e      	b.n	b6046 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6128:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b612a:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b612c:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b612e:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6130:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6132:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b6134:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b6136:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6138:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b613a:	60a2      	str	r2, [r4, #8]
   b613c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b613e:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6140:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b6142:	60e2      	str	r2, [r4, #12]
   b6144:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b6146:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6148:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b614a:	6122      	str	r2, [r4, #16]
   b614c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b614e:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b6150:	9b03      	ldr	r3, [sp, #12]
   b6152:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b6154:	6162      	str	r2, [r4, #20]
   b6156:	7623      	strb	r3, [r4, #24]
   b6158:	e7cf      	b.n	b60fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b615c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b615c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b615e:	4604      	mov	r4, r0
   b6160:	b087      	sub	sp, #28
   b6162:	460d      	mov	r5, r1
        filter_(level, filters) {
   b6164:	4626      	mov	r6, r4
        stream_(&stream) {
   b6166:	4619      	mov	r1, r3
   b6168:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b616a:	4617      	mov	r7, r2
        stream_(&stream) {
   b616c:	f7fe f8a2 	bl	b42b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b6170:	4b0b      	ldr	r3, [pc, #44]	; (b61a0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b6172:	f846 3b04 	str.w	r3, [r6], #4
   b6176:	4669      	mov	r1, sp
   b6178:	a803      	add	r0, sp, #12
   b617a:	f7fe f89b 	bl	b42b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b617e:	aa03      	add	r2, sp, #12
   b6180:	4639      	mov	r1, r7
   b6182:	4630      	mov	r0, r6
   b6184:	f7ff fef0 	bl	b5f68 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6188:	a803      	add	r0, sp, #12
   b618a:	f7fe f852 	bl	b4232 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b618e:	4668      	mov	r0, sp
   b6190:	f7fe f84f 	bl	b4232 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6194:	4b03      	ldr	r3, [pc, #12]	; (b61a4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b6196:	6023      	str	r3, [r4, #0]
}
   b6198:	4620      	mov	r0, r4
        stream_(&stream) {
   b619a:	6225      	str	r5, [r4, #32]
}
   b619c:	b007      	add	sp, #28
   b619e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b61a0:	000b75e8 	.word	0x000b75e8
   b61a4:	000b77c8 	.word	0x000b77c8

000b61a8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b61a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b61aa:	460f      	mov	r7, r1
   b61ac:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b61ae:	491d      	ldr	r1, [pc, #116]	; (b6224 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b61b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b61b2:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b61b4:	4616      	mov	r6, r2
   b61b6:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b61b8:	f7fd ff30 	bl	b401c <strcmp>
   b61bc:	b9c0      	cbnz	r0, b61f0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b61be:	b1a4      	cbz	r4, b61ea <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b61c0:	4629      	mov	r1, r5
   b61c2:	a801      	add	r0, sp, #4
   b61c4:	f7ff fcbc 	bl	b5b40 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b61c8:	4917      	ldr	r1, [pc, #92]	; (b6228 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b61ca:	2024      	movs	r0, #36	; 0x24
   b61cc:	f000 fef2 	bl	b6fb4 <_ZnwjRKSt9nothrow_t>
   b61d0:	4605      	mov	r5, r0
   b61d2:	b130      	cbz	r0, b61e2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b61d4:	ab01      	add	r3, sp, #4
   b61d6:	4632      	mov	r2, r6
   b61d8:	4621      	mov	r1, r4
   b61da:	f7ff ffbf 	bl	b615c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b61de:	4b13      	ldr	r3, [pc, #76]	; (b622c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b61e0:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b61e2:	a801      	add	r0, sp, #4
   b61e4:	f7fe f825 	bl	b4232 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b61e8:	462c      	mov	r4, r5
}
   b61ea:	4620      	mov	r0, r4
   b61ec:	b005      	add	sp, #20
   b61ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b61f0:	490f      	ldr	r1, [pc, #60]	; (b6230 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b61f2:	4638      	mov	r0, r7
   b61f4:	f7fd ff12 	bl	b401c <strcmp>
   b61f8:	b990      	cbnz	r0, b6220 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b61fa:	2c00      	cmp	r4, #0
   b61fc:	d0f5      	beq.n	b61ea <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b61fe:	4629      	mov	r1, r5
   b6200:	a801      	add	r0, sp, #4
   b6202:	f7ff fc9d 	bl	b5b40 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b6206:	4908      	ldr	r1, [pc, #32]	; (b6228 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b6208:	2024      	movs	r0, #36	; 0x24
   b620a:	f000 fed3 	bl	b6fb4 <_ZnwjRKSt9nothrow_t>
   b620e:	4605      	mov	r5, r0
   b6210:	2800      	cmp	r0, #0
   b6212:	d0e6      	beq.n	b61e2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b6214:	ab01      	add	r3, sp, #4
   b6216:	4632      	mov	r2, r6
   b6218:	4621      	mov	r1, r4
   b621a:	f7ff ff9f 	bl	b615c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b621e:	e7e0      	b.n	b61e2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b6220:	2400      	movs	r4, #0
   b6222:	e7e2      	b.n	b61ea <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b6224:	000b7744 	.word	0x000b7744
   b6228:	000b7931 	.word	0x000b7931
   b622c:	000b77e0 	.word	0x000b77e0
   b6230:	000b7748 	.word	0x000b7748

000b6234 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b6234:	4b01      	ldr	r3, [pc, #4]	; (b623c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6236:	4a02      	ldr	r2, [pc, #8]	; (b6240 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6238:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b623a:	4770      	bx	lr
   b623c:	2003e6d0 	.word	0x2003e6d0
   b6240:	000b7759 	.word	0x000b7759

000b6244 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6248:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b624a:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b624e:	4604      	mov	r4, r0
   b6250:	460e      	mov	r6, r1
   b6252:	4617      	mov	r7, r2
   b6254:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b6256:	f000 fb23 	bl	b68a0 <_Z16_fetch_usbserialv>
   b625a:	4581      	cmp	r9, r0
   b625c:	d04c      	beq.n	b62f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b625e:	792b      	ldrb	r3, [r5, #4]
   b6260:	0719      	lsls	r1, r3, #28
   b6262:	d504      	bpl.n	b626e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b6264:	696a      	ldr	r2, [r5, #20]
   b6266:	4954      	ldr	r1, [pc, #336]	; (b63b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b6268:	4620      	mov	r0, r4
   b626a:	f7ff fadc 	bl	b5826 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b626e:	f1b8 0f00 	cmp.w	r8, #0
   b6272:	d00d      	beq.n	b6290 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b6274:	215b      	movs	r1, #91	; 0x5b
   b6276:	4620      	mov	r0, r4
   b6278:	f7ff fa51 	bl	b571e <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b627c:	4641      	mov	r1, r8
   b627e:	4620      	mov	r0, r4
   b6280:	f7ff fa3e 	bl	b5700 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b6284:	6823      	ldr	r3, [r4, #0]
   b6286:	494d      	ldr	r1, [pc, #308]	; (b63bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b6288:	68db      	ldr	r3, [r3, #12]
   b628a:	2202      	movs	r2, #2
   b628c:	4620      	mov	r0, r4
   b628e:	4798      	blx	r3
    if (attr.has_file) {
   b6290:	792b      	ldrb	r3, [r5, #4]
   b6292:	07da      	lsls	r2, r3, #31
   b6294:	d523      	bpl.n	b62de <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b6296:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b629a:	212f      	movs	r1, #47	; 0x2f
   b629c:	4640      	mov	r0, r8
   b629e:	f001 f85e 	bl	b735e <strrchr>
    if (s1) {
   b62a2:	b108      	cbz	r0, b62a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b62a4:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b62a8:	4641      	mov	r1, r8
   b62aa:	4620      	mov	r0, r4
   b62ac:	f7ff fa28 	bl	b5700 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b62b0:	792b      	ldrb	r3, [r5, #4]
   b62b2:	079b      	lsls	r3, r3, #30
   b62b4:	d508      	bpl.n	b62c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b62b6:	213a      	movs	r1, #58	; 0x3a
   b62b8:	4620      	mov	r0, r4
   b62ba:	f7ff fa30 	bl	b571e <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b62be:	68ea      	ldr	r2, [r5, #12]
   b62c0:	493f      	ldr	r1, [pc, #252]	; (b63c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b62c2:	4620      	mov	r0, r4
   b62c4:	f7ff faaf 	bl	b5826 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b62c8:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b62ca:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b62cc:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b62d0:	68db      	ldr	r3, [r3, #12]
   b62d2:	bf14      	ite	ne
   b62d4:	493b      	ldrne	r1, [pc, #236]	; (b63c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b62d6:	493c      	ldreq	r1, [pc, #240]	; (b63c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b62d8:	2202      	movs	r2, #2
            write(": ", 2);
   b62da:	4620      	mov	r0, r4
   b62dc:	4798      	blx	r3
    if (attr.has_function) {
   b62de:	792b      	ldrb	r3, [r5, #4]
   b62e0:	0758      	lsls	r0, r3, #29
   b62e2:	d51d      	bpl.n	b6320 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b62e4:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b62e6:	460b      	mov	r3, r1
   b62e8:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b62ea:	f813 0b01 	ldrb.w	r0, [r3], #1
   b62ee:	b160      	cbz	r0, b630a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b62f0:	2820      	cmp	r0, #32
   b62f2:	d108      	bne.n	b6306 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b62f4:	4619      	mov	r1, r3
   b62f6:	e7f7      	b.n	b62e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b62f8:	4834      	ldr	r0, [pc, #208]	; (b63cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b62fa:	f000 fbc8 	bl	b6a8e <_ZN5spark12NetworkClass9listeningEv>
   b62fe:	2800      	cmp	r0, #0
   b6300:	d0ad      	beq.n	b625e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b6302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b6306:	2828      	cmp	r0, #40	; 0x28
   b6308:	d1ee      	bne.n	b62e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b630a:	6823      	ldr	r3, [r4, #0]
   b630c:	1a52      	subs	r2, r2, r1
   b630e:	68db      	ldr	r3, [r3, #12]
   b6310:	4620      	mov	r0, r4
   b6312:	4798      	blx	r3
        write("(): ", 4);
   b6314:	6823      	ldr	r3, [r4, #0]
   b6316:	492e      	ldr	r1, [pc, #184]	; (b63d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b6318:	68db      	ldr	r3, [r3, #12]
   b631a:	2204      	movs	r2, #4
   b631c:	4620      	mov	r0, r4
   b631e:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b6320:	2100      	movs	r1, #0
   b6322:	4638      	mov	r0, r7
   b6324:	f7fe f98a 	bl	b463c <log_level_name>
   b6328:	4601      	mov	r1, r0
    write(s);
   b632a:	4620      	mov	r0, r4
   b632c:	f7ff f9e8 	bl	b5700 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b6330:	6823      	ldr	r3, [r4, #0]
   b6332:	4925      	ldr	r1, [pc, #148]	; (b63c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b6334:	68db      	ldr	r3, [r3, #12]
   b6336:	2202      	movs	r2, #2
   b6338:	4620      	mov	r0, r4
   b633a:	4798      	blx	r3
    if (msg) {
   b633c:	b11e      	cbz	r6, b6346 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b633e:	4631      	mov	r1, r6
   b6340:	4620      	mov	r0, r4
   b6342:	f7ff f9dd 	bl	b5700 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b6346:	792b      	ldrb	r3, [r5, #4]
   b6348:	f013 0f30 	tst.w	r3, #48	; 0x30
   b634c:	d02c      	beq.n	b63a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b634e:	6823      	ldr	r3, [r4, #0]
   b6350:	4920      	ldr	r1, [pc, #128]	; (b63d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b6352:	68db      	ldr	r3, [r3, #12]
   b6354:	2202      	movs	r2, #2
   b6356:	4620      	mov	r0, r4
   b6358:	4798      	blx	r3
        if (attr.has_code) {
   b635a:	792b      	ldrb	r3, [r5, #4]
   b635c:	06d9      	lsls	r1, r3, #27
   b635e:	d50a      	bpl.n	b6376 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b6360:	6823      	ldr	r3, [r4, #0]
   b6362:	491d      	ldr	r1, [pc, #116]	; (b63d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b6364:	68db      	ldr	r3, [r3, #12]
   b6366:	2207      	movs	r2, #7
   b6368:	4620      	mov	r0, r4
   b636a:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b636c:	69aa      	ldr	r2, [r5, #24]
   b636e:	491b      	ldr	r1, [pc, #108]	; (b63dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b6370:	4620      	mov	r0, r4
   b6372:	f7ff fa58 	bl	b5826 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b6376:	792b      	ldrb	r3, [r5, #4]
   b6378:	069a      	lsls	r2, r3, #26
   b637a:	d511      	bpl.n	b63a0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b637c:	06db      	lsls	r3, r3, #27
   b637e:	d505      	bpl.n	b638c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b6380:	6823      	ldr	r3, [r4, #0]
   b6382:	4910      	ldr	r1, [pc, #64]	; (b63c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b6384:	68db      	ldr	r3, [r3, #12]
   b6386:	2202      	movs	r2, #2
   b6388:	4620      	mov	r0, r4
   b638a:	4798      	blx	r3
            write("details = ", 10);
   b638c:	6823      	ldr	r3, [r4, #0]
   b638e:	4914      	ldr	r1, [pc, #80]	; (b63e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b6390:	68db      	ldr	r3, [r3, #12]
   b6392:	4620      	mov	r0, r4
   b6394:	220a      	movs	r2, #10
   b6396:	4798      	blx	r3
            write(attr.details);
   b6398:	69e9      	ldr	r1, [r5, #28]
   b639a:	4620      	mov	r0, r4
   b639c:	f7ff f9b0 	bl	b5700 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b63a0:	215d      	movs	r1, #93	; 0x5d
   b63a2:	4620      	mov	r0, r4
   b63a4:	f7ff f9bb 	bl	b571e <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b63a8:	6823      	ldr	r3, [r4, #0]
   b63aa:	490e      	ldr	r1, [pc, #56]	; (b63e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b63ac:	68db      	ldr	r3, [r3, #12]
   b63ae:	4620      	mov	r0, r4
   b63b0:	2202      	movs	r2, #2
}
   b63b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b63b6:	4718      	bx	r3
   b63b8:	000b775d 	.word	0x000b775d
   b63bc:	000b7764 	.word	0x000b7764
   b63c0:	000b7767 	.word	0x000b7767
   b63c4:	000b776a 	.word	0x000b776a
   b63c8:	000b776f 	.word	0x000b776f
   b63cc:	2003e738 	.word	0x2003e738
   b63d0:	000b776d 	.word	0x000b776d
   b63d4:	000b7772 	.word	0x000b7772
   b63d8:	000b7775 	.word	0x000b7775
   b63dc:	000b777d 	.word	0x000b777d
   b63e0:	000b7780 	.word	0x000b7780
   b63e4:	000b778b 	.word	0x000b778b

000b63e8 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b63e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b63ec:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
   b63ee:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b63f0:	460d      	mov	r5, r1
   b63f2:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
   b63f4:	f000 fa54 	bl	b68a0 <_Z16_fetch_usbserialv>
   b63f8:	4287      	cmp	r7, r0
   b63fa:	d007      	beq.n	b640c <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
   b63fc:	6a20      	ldr	r0, [r4, #32]
   b63fe:	6803      	ldr	r3, [r0, #0]
   b6400:	4632      	mov	r2, r6
   b6402:	4629      	mov	r1, r5
   b6404:	68db      	ldr	r3, [r3, #12]
}
   b6406:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
   b640a:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
   b640c:	4803      	ldr	r0, [pc, #12]	; (b641c <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
   b640e:	f000 fb3e 	bl	b6a8e <_ZN5spark12NetworkClass9listeningEv>
   b6412:	2800      	cmp	r0, #0
   b6414:	d0f2      	beq.n	b63fc <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
   b6416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b641a:	bf00      	nop
   b641c:	2003e738 	.word	0x2003e738

000b6420 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6424:	b085      	sub	sp, #20
    return stream_;
   b6426:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b642a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b642c:	4605      	mov	r5, r0
   b642e:	460f      	mov	r7, r1
   b6430:	4690      	mov	r8, r2
   b6432:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b6434:	f000 fa34 	bl	b68a0 <_Z16_fetch_usbserialv>
   b6438:	4581      	cmp	r9, r0
   b643a:	d105      	bne.n	b6448 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b643c:	4849      	ldr	r0, [pc, #292]	; (b6564 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b643e:	f000 fb26 	bl	b6a8e <_ZN5spark12NetworkClass9listeningEv>
   b6442:	2800      	cmp	r0, #0
   b6444:	f040 808a 	bne.w	b655c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b6448:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b644a:	4a47      	ldr	r2, [pc, #284]	; (b6568 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b644c:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b644e:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b6452:	a801      	add	r0, sp, #4
        strm_(stream) {
   b6454:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b6456:	f88d 9008 	strb.w	r9, [sp, #8]
   b645a:	f000 fcbc 	bl	b6dd6 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b645e:	4649      	mov	r1, r9
   b6460:	4640      	mov	r0, r8
   b6462:	f7fe f8eb 	bl	b463c <log_level_name>
    json.name("l", 1).value(s);
   b6466:	4941      	ldr	r1, [pc, #260]	; (b656c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b6468:	4680      	mov	r8, r0
   b646a:	2201      	movs	r2, #1
   b646c:	a801      	add	r0, sp, #4
   b646e:	f000 fd41 	bl	b6ef4 <_ZN5spark10JSONWriter4nameEPKcj>
   b6472:	4641      	mov	r1, r8
   b6474:	f7ff f936 	bl	b56e4 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b6478:	b13f      	cbz	r7, b648a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b647a:	493d      	ldr	r1, [pc, #244]	; (b6570 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b647c:	2201      	movs	r2, #1
   b647e:	a801      	add	r0, sp, #4
   b6480:	f000 fd38 	bl	b6ef4 <_ZN5spark10JSONWriter4nameEPKcj>
   b6484:	4639      	mov	r1, r7
   b6486:	f7ff f92d 	bl	b56e4 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b648a:	b13e      	cbz	r6, b649c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b648c:	4939      	ldr	r1, [pc, #228]	; (b6574 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b648e:	2201      	movs	r2, #1
   b6490:	a801      	add	r0, sp, #4
   b6492:	f000 fd2f 	bl	b6ef4 <_ZN5spark10JSONWriter4nameEPKcj>
   b6496:	4631      	mov	r1, r6
   b6498:	f7ff f924 	bl	b56e4 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b649c:	7923      	ldrb	r3, [r4, #4]
   b649e:	07df      	lsls	r7, r3, #31
   b64a0:	d50e      	bpl.n	b64c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b64a2:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b64a4:	212f      	movs	r1, #47	; 0x2f
   b64a6:	4630      	mov	r0, r6
   b64a8:	f000 ff59 	bl	b735e <strrchr>
    if (s1) {
   b64ac:	b100      	cbz	r0, b64b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b64ae:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b64b0:	4931      	ldr	r1, [pc, #196]	; (b6578 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b64b2:	2201      	movs	r2, #1
   b64b4:	a801      	add	r0, sp, #4
   b64b6:	f000 fd1d 	bl	b6ef4 <_ZN5spark10JSONWriter4nameEPKcj>
   b64ba:	4631      	mov	r1, r6
   b64bc:	f7ff f912 	bl	b56e4 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b64c0:	7923      	ldrb	r3, [r4, #4]
   b64c2:	079e      	lsls	r6, r3, #30
   b64c4:	d507      	bpl.n	b64d6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b64c6:	492d      	ldr	r1, [pc, #180]	; (b657c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b64c8:	2202      	movs	r2, #2
   b64ca:	a801      	add	r0, sp, #4
   b64cc:	f000 fd12 	bl	b6ef4 <_ZN5spark10JSONWriter4nameEPKcj>
   b64d0:	68e1      	ldr	r1, [r4, #12]
   b64d2:	f000 fc8d 	bl	b6df0 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b64d6:	7923      	ldrb	r3, [r4, #4]
   b64d8:	0758      	lsls	r0, r3, #29
   b64da:	d514      	bpl.n	b6506 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b64dc:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b64de:	4633      	mov	r3, r6
   b64e0:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b64e2:	f813 2b01 	ldrb.w	r2, [r3], #1
   b64e6:	b12a      	cbz	r2, b64f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b64e8:	2a20      	cmp	r2, #32
   b64ea:	d101      	bne.n	b64f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b64ec:	461e      	mov	r6, r3
   b64ee:	e7f7      	b.n	b64e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b64f0:	2a28      	cmp	r2, #40	; 0x28
   b64f2:	d1f5      	bne.n	b64e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b64f4:	4922      	ldr	r1, [pc, #136]	; (b6580 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b64f6:	2202      	movs	r2, #2
   b64f8:	a801      	add	r0, sp, #4
   b64fa:	f000 fcfb 	bl	b6ef4 <_ZN5spark10JSONWriter4nameEPKcj>
   b64fe:	1bba      	subs	r2, r7, r6
   b6500:	4631      	mov	r1, r6
   b6502:	f000 fd07 	bl	b6f14 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b6506:	7923      	ldrb	r3, [r4, #4]
   b6508:	0719      	lsls	r1, r3, #28
   b650a:	d507      	bpl.n	b651c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b650c:	491d      	ldr	r1, [pc, #116]	; (b6584 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b650e:	2201      	movs	r2, #1
   b6510:	a801      	add	r0, sp, #4
   b6512:	f000 fcef 	bl	b6ef4 <_ZN5spark10JSONWriter4nameEPKcj>
   b6516:	6961      	ldr	r1, [r4, #20]
   b6518:	f000 fc7c 	bl	b6e14 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b651c:	7923      	ldrb	r3, [r4, #4]
   b651e:	06da      	lsls	r2, r3, #27
   b6520:	d508      	bpl.n	b6534 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b6522:	2204      	movs	r2, #4
   b6524:	4918      	ldr	r1, [pc, #96]	; (b6588 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b6526:	eb0d 0002 	add.w	r0, sp, r2
   b652a:	f000 fce3 	bl	b6ef4 <_ZN5spark10JSONWriter4nameEPKcj>
   b652e:	69a1      	ldr	r1, [r4, #24]
   b6530:	f000 fc5e 	bl	b6df0 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b6534:	7923      	ldrb	r3, [r4, #4]
   b6536:	069b      	lsls	r3, r3, #26
   b6538:	d507      	bpl.n	b654a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b653a:	4914      	ldr	r1, [pc, #80]	; (b658c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b653c:	2206      	movs	r2, #6
   b653e:	a801      	add	r0, sp, #4
   b6540:	f000 fcd8 	bl	b6ef4 <_ZN5spark10JSONWriter4nameEPKcj>
   b6544:	69e1      	ldr	r1, [r4, #28]
   b6546:	f7ff f8cd 	bl	b56e4 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b654a:	a801      	add	r0, sp, #4
   b654c:	f000 fc2d 	bl	b6daa <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b6550:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b6552:	490f      	ldr	r1, [pc, #60]	; (b6590 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b6554:	6803      	ldr	r3, [r0, #0]
   b6556:	2202      	movs	r2, #2
   b6558:	68db      	ldr	r3, [r3, #12]
   b655a:	4798      	blx	r3
}
   b655c:	b005      	add	sp, #20
   b655e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b6562:	bf00      	nop
   b6564:	2003e738 	.word	0x2003e738
   b6568:	000b77b0 	.word	0x000b77b0
   b656c:	000b773a 	.word	0x000b773a
   b6570:	000b778e 	.word	0x000b778e
   b6574:	000b7ab7 	.word	0x000b7ab7
   b6578:	000b7790 	.word	0x000b7790
   b657c:	000b7792 	.word	0x000b7792
   b6580:	000b7795 	.word	0x000b7795
   b6584:	000b7798 	.word	0x000b7798
   b6588:	000b779a 	.word	0x000b779a
   b658c:	000b779f 	.word	0x000b779f
   b6590:	000b778b 	.word	0x000b778b

000b6594 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6594:	4b02      	ldr	r3, [pc, #8]	; (b65a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b6596:	681a      	ldr	r2, [r3, #0]
   b6598:	4b02      	ldr	r3, [pc, #8]	; (b65a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b659a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b659c:	4770      	bx	lr
   b659e:	bf00      	nop
   b65a0:	2003e5f0 	.word	0x2003e5f0
   b65a4:	2003e6fc 	.word	0x2003e6fc

000b65a8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b65a8:	4b01      	ldr	r3, [pc, #4]	; (b65b0 <_GLOBAL__sub_I_RGB+0x8>)
   b65aa:	2200      	movs	r2, #0
   b65ac:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b65ae:	4770      	bx	lr
   b65b0:	2003e700 	.word	0x2003e700

000b65b4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b65b4:	4b01      	ldr	r3, [pc, #4]	; (b65bc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b65b6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b65b8:	4770      	bx	lr
   b65ba:	bf00      	nop
   b65bc:	2003e5f4 	.word	0x2003e5f4

000b65c0 <serialEventRun>:
{
   b65c0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b65c2:	4b0b      	ldr	r3, [pc, #44]	; (b65f0 <serialEventRun+0x30>)
   b65c4:	b143      	cbz	r3, b65d8 <serialEventRun+0x18>
   b65c6:	f000 f96b 	bl	b68a0 <_Z16_fetch_usbserialv>
   b65ca:	6803      	ldr	r3, [r0, #0]
   b65cc:	691b      	ldr	r3, [r3, #16]
   b65ce:	4798      	blx	r3
   b65d0:	2800      	cmp	r0, #0
   b65d2:	dd01      	ble.n	b65d8 <serialEventRun+0x18>
        serialEvent();
   b65d4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b65d8:	4b06      	ldr	r3, [pc, #24]	; (b65f4 <serialEventRun+0x34>)
   b65da:	b143      	cbz	r3, b65ee <serialEventRun+0x2e>
   b65dc:	f000 fcc6 	bl	b6f6c <_Z22__fetch_global_Serial1v>
   b65e0:	6803      	ldr	r3, [r0, #0]
   b65e2:	691b      	ldr	r3, [r3, #16]
   b65e4:	4798      	blx	r3
   b65e6:	2800      	cmp	r0, #0
   b65e8:	dd01      	ble.n	b65ee <serialEventRun+0x2e>
        serialEvent1();
   b65ea:	f3af 8000 	nop.w
}
   b65ee:	bd08      	pop	{r3, pc}
	...

000b65f8 <_post_loop>:
{
   b65f8:	b508      	push	{r3, lr}
	serialEventRun();
   b65fa:	f7ff ffe1 	bl	b65c0 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b65fe:	f7fd ff09 	bl	b4414 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6602:	4b01      	ldr	r3, [pc, #4]	; (b6608 <_post_loop+0x10>)
   b6604:	6018      	str	r0, [r3, #0]
}
   b6606:	bd08      	pop	{r3, pc}
   b6608:	2003e758 	.word	0x2003e758

000b660c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b660c:	4805      	ldr	r0, [pc, #20]	; (b6624 <_Z33system_initialize_user_backup_ramv+0x18>)
   b660e:	4a06      	ldr	r2, [pc, #24]	; (b6628 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6610:	4906      	ldr	r1, [pc, #24]	; (b662c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b6612:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6614:	1a12      	subs	r2, r2, r0
   b6616:	f000 fe05 	bl	b7224 <memcpy>
    __backup_sram_signature = signature;
   b661a:	4b05      	ldr	r3, [pc, #20]	; (b6630 <_Z33system_initialize_user_backup_ramv+0x24>)
   b661c:	4a05      	ldr	r2, [pc, #20]	; (b6634 <_Z33system_initialize_user_backup_ramv+0x28>)
   b661e:	601a      	str	r2, [r3, #0]
}
   b6620:	bd08      	pop	{r3, pc}
   b6622:	bf00      	nop
   b6624:	2003f400 	.word	0x2003f400
   b6628:	2003f404 	.word	0x2003f404
   b662c:	000b7c78 	.word	0x000b7c78
   b6630:	2003f400 	.word	0x2003f400
   b6634:	9a271c1e 	.word	0x9a271c1e

000b6638 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6638:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b663a:	2300      	movs	r3, #0
   b663c:	9300      	str	r3, [sp, #0]
   b663e:	461a      	mov	r2, r3
   b6640:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6644:	f7fe f824 	bl	b4690 <system_ctrl_set_result>
}
   b6648:	b003      	add	sp, #12
   b664a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6650 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6650:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b6652:	8843      	ldrh	r3, [r0, #2]
   b6654:	2b0a      	cmp	r3, #10
   b6656:	d008      	beq.n	b666a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6658:	2b50      	cmp	r3, #80	; 0x50
   b665a:	d10b      	bne.n	b6674 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b665c:	4b09      	ldr	r3, [pc, #36]	; (b6684 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b665e:	681b      	ldr	r3, [r3, #0]
   b6660:	b14b      	cbz	r3, b6676 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b6662:	b003      	add	sp, #12
   b6664:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6668:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b666a:	f7ff ffe5 	bl	b6638 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b666e:	b003      	add	sp, #12
   b6670:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6674:	2300      	movs	r3, #0
   b6676:	9300      	str	r3, [sp, #0]
   b6678:	461a      	mov	r2, r3
   b667a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b667e:	f7fe f807 	bl	b4690 <system_ctrl_set_result>
}
   b6682:	e7f4      	b.n	b666e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6684:	2003e714 	.word	0x2003e714

000b6688 <module_user_init_hook>:
{
   b6688:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b668a:	4812      	ldr	r0, [pc, #72]	; (b66d4 <module_user_init_hook+0x4c>)
   b668c:	2100      	movs	r1, #0
   b668e:	f7fe f8a9 	bl	b47e4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b6692:	4b11      	ldr	r3, [pc, #68]	; (b66d8 <module_user_init_hook+0x50>)
   b6694:	681a      	ldr	r2, [r3, #0]
   b6696:	4b11      	ldr	r3, [pc, #68]	; (b66dc <module_user_init_hook+0x54>)
   b6698:	429a      	cmp	r2, r3
   b669a:	4b11      	ldr	r3, [pc, #68]	; (b66e0 <module_user_init_hook+0x58>)
   b669c:	bf0c      	ite	eq
   b669e:	2201      	moveq	r2, #1
   b66a0:	2200      	movne	r2, #0
   b66a2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b66a4:	d001      	beq.n	b66aa <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b66a6:	f7ff ffb1 	bl	b660c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b66aa:	f7fd fea3 	bl	b43f4 <HAL_RNG_GetRandomNumber>
   b66ae:	4604      	mov	r4, r0
    srand(seed);
   b66b0:	f000 fde8 	bl	b7284 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b66b4:	4b0b      	ldr	r3, [pc, #44]	; (b66e4 <module_user_init_hook+0x5c>)
   b66b6:	b113      	cbz	r3, b66be <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b66b8:	4620      	mov	r0, r4
   b66ba:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b66be:	2100      	movs	r1, #0
   b66c0:	4808      	ldr	r0, [pc, #32]	; (b66e4 <module_user_init_hook+0x5c>)
   b66c2:	f7fe f84f 	bl	b4764 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b66c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b66ca:	4807      	ldr	r0, [pc, #28]	; (b66e8 <module_user_init_hook+0x60>)
   b66cc:	2100      	movs	r1, #0
   b66ce:	f7fd bfd5 	b.w	b467c <system_ctrl_set_app_request_handler>
   b66d2:	bf00      	nop
   b66d4:	000b65b5 	.word	0x000b65b5
   b66d8:	2003f400 	.word	0x2003f400
   b66dc:	9a271c1e 	.word	0x9a271c1e
   b66e0:	2003e710 	.word	0x2003e710
   b66e4:	00000000 	.word	0x00000000
   b66e8:	000b6651 	.word	0x000b6651

000b66ec <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b66ec:	4770      	bx	lr

000b66ee <_ZN9IPAddressD0Ev>:
   b66ee:	b510      	push	{r4, lr}
   b66f0:	2118      	movs	r1, #24
   b66f2:	4604      	mov	r4, r0
   b66f4:	f7fd fce3 	bl	b40be <_ZdlPvj>
   b66f8:	4620      	mov	r0, r4
   b66fa:	bd10      	pop	{r4, pc}

000b66fc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b66fc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b66fe:	7d03      	ldrb	r3, [r0, #20]
   b6700:	2b06      	cmp	r3, #6
{
   b6702:	b08d      	sub	sp, #52	; 0x34
   b6704:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6706:	f100 0704 	add.w	r7, r0, #4
   b670a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b670e:	d012      	beq.n	b6736 <_ZNK9IPAddress7printToER5Print+0x3a>
   b6710:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6714:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6718:	220a      	movs	r2, #10
   b671a:	4630      	mov	r0, r6
   b671c:	f7fe ff63 	bl	b55e6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6720:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6722:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6724:	d019      	beq.n	b675a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6726:	2c00      	cmp	r4, #0
   b6728:	d0f4      	beq.n	b6714 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b672a:	212e      	movs	r1, #46	; 0x2e
   b672c:	4630      	mov	r0, r6
   b672e:	f7fe ff57 	bl	b55e0 <_ZN5Print5printEc>
   b6732:	4404      	add	r4, r0
   b6734:	e7ee      	b.n	b6714 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6736:	232f      	movs	r3, #47	; 0x2f
   b6738:	466a      	mov	r2, sp
   b673a:	4639      	mov	r1, r7
   b673c:	200a      	movs	r0, #10
		buf[0] = 0;
   b673e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6742:	f7fd fed3 	bl	b44ec <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6746:	4668      	mov	r0, sp
   b6748:	f7fd fc72 	bl	b4030 <strlen>
   b674c:	6833      	ldr	r3, [r6, #0]
   b674e:	4602      	mov	r2, r0
   b6750:	68db      	ldr	r3, [r3, #12]
   b6752:	4669      	mov	r1, sp
   b6754:	4630      	mov	r0, r6
   b6756:	4798      	blx	r3
   b6758:	4604      	mov	r4, r0
    }
    return n;
}
   b675a:	4620      	mov	r0, r4
   b675c:	b00d      	add	sp, #52	; 0x34
   b675e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6760 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6760:	b510      	push	{r4, lr}
   b6762:	4b05      	ldr	r3, [pc, #20]	; (b6778 <_ZN9IPAddressC1Ev+0x18>)
   b6764:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6766:	2211      	movs	r2, #17
   b6768:	f840 3b04 	str.w	r3, [r0], #4
   b676c:	2100      	movs	r1, #0
   b676e:	f000 fd81 	bl	b7274 <memset>
}
   b6772:	4620      	mov	r0, r4
   b6774:	bd10      	pop	{r4, pc}
   b6776:	bf00      	nop
   b6778:	000b7844 	.word	0x000b7844

000b677c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b677c:	4603      	mov	r3, r0
   b677e:	4a07      	ldr	r2, [pc, #28]	; (b679c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6780:	b510      	push	{r4, lr}
   b6782:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6786:	f101 0210 	add.w	r2, r1, #16
   b678a:	f851 4b04 	ldr.w	r4, [r1], #4
   b678e:	f843 4b04 	str.w	r4, [r3], #4
   b6792:	4291      	cmp	r1, r2
   b6794:	d1f9      	bne.n	b678a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6796:	780a      	ldrb	r2, [r1, #0]
   b6798:	701a      	strb	r2, [r3, #0]
}
   b679a:	bd10      	pop	{r4, pc}
   b679c:	000b7844 	.word	0x000b7844

000b67a0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b67a0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b67a2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b67a6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b67aa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b67ae:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b67b2:	2304      	movs	r3, #4
   b67b4:	6041      	str	r1, [r0, #4]
   b67b6:	7503      	strb	r3, [r0, #20]
}
   b67b8:	bd10      	pop	{r4, pc}
	...

000b67bc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b67bc:	b507      	push	{r0, r1, r2, lr}
   b67be:	4b06      	ldr	r3, [pc, #24]	; (b67d8 <_ZN9IPAddressC1EPKh+0x1c>)
   b67c0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b67c2:	78cb      	ldrb	r3, [r1, #3]
   b67c4:	9300      	str	r3, [sp, #0]
   b67c6:	788b      	ldrb	r3, [r1, #2]
   b67c8:	784a      	ldrb	r2, [r1, #1]
   b67ca:	7809      	ldrb	r1, [r1, #0]
   b67cc:	f7ff ffe8 	bl	b67a0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b67d0:	b003      	add	sp, #12
   b67d2:	f85d fb04 	ldr.w	pc, [sp], #4
   b67d6:	bf00      	nop
   b67d8:	000b7844 	.word	0x000b7844

000b67dc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b67dc:	7441      	strb	r1, [r0, #17]
}
   b67de:	4770      	bx	lr

000b67e0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b67e0:	4770      	bx	lr

000b67e2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b67e2:	4770      	bx	lr

000b67e4 <_ZN9USBSerial4readEv>:
{
   b67e4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b67e6:	2100      	movs	r1, #0
   b67e8:	7c00      	ldrb	r0, [r0, #16]
   b67ea:	f7fd fef7 	bl	b45dc <HAL_USB_USART_Receive_Data>
}
   b67ee:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b67f2:	bd08      	pop	{r3, pc}

000b67f4 <_ZN9USBSerial4peekEv>:
{
   b67f4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b67f6:	2101      	movs	r1, #1
   b67f8:	7c00      	ldrb	r0, [r0, #16]
   b67fa:	f7fd feef 	bl	b45dc <HAL_USB_USART_Receive_Data>
}
   b67fe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6802:	bd08      	pop	{r3, pc}

000b6804 <_ZN9USBSerial17availableForWriteEv>:
{
   b6804:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b6806:	7c00      	ldrb	r0, [r0, #16]
   b6808:	f7fd fee0 	bl	b45cc <HAL_USB_USART_Available_Data_For_Write>
}
   b680c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6810:	bd08      	pop	{r3, pc}

000b6812 <_ZN9USBSerial9availableEv>:
{
   b6812:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6814:	7c00      	ldrb	r0, [r0, #16]
   b6816:	f7fd fed1 	bl	b45bc <HAL_USB_USART_Available_Data>
}
   b681a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b681e:	bd08      	pop	{r3, pc}

000b6820 <_ZN9USBSerial5writeEh>:
{
   b6820:	b513      	push	{r0, r1, r4, lr}
   b6822:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6824:	7c00      	ldrb	r0, [r0, #16]
{
   b6826:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6828:	f7fd fed0 	bl	b45cc <HAL_USB_USART_Available_Data_For_Write>
   b682c:	2800      	cmp	r0, #0
   b682e:	9901      	ldr	r1, [sp, #4]
   b6830:	dc01      	bgt.n	b6836 <_ZN9USBSerial5writeEh+0x16>
   b6832:	7c60      	ldrb	r0, [r4, #17]
   b6834:	b120      	cbz	r0, b6840 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6836:	7c20      	ldrb	r0, [r4, #16]
   b6838:	f7fd fed8 	bl	b45ec <HAL_USB_USART_Send_Data>
   b683c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6840:	b002      	add	sp, #8
   b6842:	bd10      	pop	{r4, pc}

000b6844 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6844:	7c00      	ldrb	r0, [r0, #16]
   b6846:	f7fd bed9 	b.w	b45fc <HAL_USB_USART_Flush_Data>

000b684a <_ZN9USBSerialD0Ev>:
   b684a:	b510      	push	{r4, lr}
   b684c:	2114      	movs	r1, #20
   b684e:	4604      	mov	r4, r0
   b6850:	f7fd fc35 	bl	b40be <_ZdlPvj>
   b6854:	4620      	mov	r0, r4
   b6856:	bd10      	pop	{r4, pc}

000b6858 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6858:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b685a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b685e:	4604      	mov	r4, r0
   b6860:	4608      	mov	r0, r1
   b6862:	2100      	movs	r1, #0
   b6864:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6868:	4b04      	ldr	r3, [pc, #16]	; (b687c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b686a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b686c:	2301      	movs	r3, #1
  _serial = serial;
   b686e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6870:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6872:	4611      	mov	r1, r2
   b6874:	f7fd fe8a 	bl	b458c <HAL_USB_USART_Init>
}
   b6878:	4620      	mov	r0, r4
   b687a:	bd10      	pop	{r4, pc}
   b687c:	000b7858 	.word	0x000b7858

000b6880 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6880:	7c00      	ldrb	r0, [r0, #16]
   b6882:	2200      	movs	r2, #0
   b6884:	f7fd be8a 	b.w	b459c <HAL_USB_USART_Begin>

000b6888 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b6888:	7c00      	ldrb	r0, [r0, #16]
   b688a:	f7fd be8f 	b.w	b45ac <HAL_USB_USART_End>

000b688e <_Z19acquireSerialBufferv>:
{
   b688e:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6890:	2214      	movs	r2, #20
{
   b6892:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6894:	2100      	movs	r1, #0
   b6896:	f000 fced 	bl	b7274 <memset>
}
   b689a:	4620      	mov	r0, r4
   b689c:	bd10      	pop	{r4, pc}
	...

000b68a0 <_Z16_fetch_usbserialv>:
{
   b68a0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b68a2:	4c0f      	ldr	r4, [pc, #60]	; (b68e0 <_Z16_fetch_usbserialv+0x40>)
{
   b68a4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b68a6:	a803      	add	r0, sp, #12
   b68a8:	f7ff fff1 	bl	b688e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b68ac:	7821      	ldrb	r1, [r4, #0]
   b68ae:	f3bf 8f5b 	dmb	ish
   b68b2:	f011 0101 	ands.w	r1, r1, #1
   b68b6:	d10f      	bne.n	b68d8 <_Z16_fetch_usbserialv+0x38>
   b68b8:	4620      	mov	r0, r4
   b68ba:	9101      	str	r1, [sp, #4]
   b68bc:	f7fd fc0e 	bl	b40dc <__cxa_guard_acquire>
   b68c0:	9901      	ldr	r1, [sp, #4]
   b68c2:	b148      	cbz	r0, b68d8 <_Z16_fetch_usbserialv+0x38>
   b68c4:	aa03      	add	r2, sp, #12
   b68c6:	4807      	ldr	r0, [pc, #28]	; (b68e4 <_Z16_fetch_usbserialv+0x44>)
   b68c8:	f7ff ffc6 	bl	b6858 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b68cc:	4620      	mov	r0, r4
   b68ce:	f7fd fc0a 	bl	b40e6 <__cxa_guard_release>
   b68d2:	4805      	ldr	r0, [pc, #20]	; (b68e8 <_Z16_fetch_usbserialv+0x48>)
   b68d4:	f000 fc88 	bl	b71e8 <atexit>
	return _usbserial;
}
   b68d8:	4802      	ldr	r0, [pc, #8]	; (b68e4 <_Z16_fetch_usbserialv+0x44>)
   b68da:	b008      	add	sp, #32
   b68dc:	bd10      	pop	{r4, pc}
   b68de:	bf00      	nop
   b68e0:	2003e718 	.word	0x2003e718
   b68e4:	2003e71c 	.word	0x2003e71c
   b68e8:	000b67e1 	.word	0x000b67e1

000b68ec <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b68ec:	4770      	bx	lr

000b68ee <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b68ee:	7441      	strb	r1, [r0, #17]
}
   b68f0:	4770      	bx	lr

000b68f2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b68f2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b68f4:	7c00      	ldrb	r0, [r0, #16]
   b68f6:	f7fd fe31 	bl	b455c <hal_usart_available_data_for_write>
}
   b68fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b68fe:	bd08      	pop	{r3, pc}

000b6900 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6900:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6902:	7c00      	ldrb	r0, [r0, #16]
   b6904:	f7fd fe0a 	bl	b451c <hal_usart_available>
}
   b6908:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b690c:	bd08      	pop	{r3, pc}

000b690e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b690e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6910:	7c00      	ldrb	r0, [r0, #16]
   b6912:	f7fd fe13 	bl	b453c <hal_usart_peek>
}
   b6916:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b691a:	bd08      	pop	{r3, pc}

000b691c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b691c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b691e:	7c00      	ldrb	r0, [r0, #16]
   b6920:	f7fd fe04 	bl	b452c <hal_usart_read>
}
   b6924:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6928:	bd08      	pop	{r3, pc}

000b692a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b692a:	7c00      	ldrb	r0, [r0, #16]
   b692c:	f7fd be0e 	b.w	b454c <hal_usart_flush>

000b6930 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6930:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6932:	7c45      	ldrb	r5, [r0, #17]
{
   b6934:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6936:	b12d      	cbz	r5, b6944 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6938:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b693a:	b003      	add	sp, #12
   b693c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6940:	f7fd bde4 	b.w	b450c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6944:	7c00      	ldrb	r0, [r0, #16]
   b6946:	9101      	str	r1, [sp, #4]
   b6948:	f7fd fe08 	bl	b455c <hal_usart_available_data_for_write>
   b694c:	2800      	cmp	r0, #0
   b694e:	9901      	ldr	r1, [sp, #4]
   b6950:	dcf2      	bgt.n	b6938 <_ZN11USARTSerial5writeEh+0x8>
}
   b6952:	4628      	mov	r0, r5
   b6954:	b003      	add	sp, #12
   b6956:	bd30      	pop	{r4, r5, pc}

000b6958 <_ZN11USARTSerialD0Ev>:
   b6958:	b510      	push	{r4, lr}
   b695a:	2114      	movs	r1, #20
   b695c:	4604      	mov	r4, r0
   b695e:	f7fd fbae 	bl	b40be <_ZdlPvj>
   b6962:	4620      	mov	r0, r4
   b6964:	bd10      	pop	{r4, pc}
	...

000b6968 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6968:	b510      	push	{r4, lr}
   b696a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b696e:	4604      	mov	r4, r0
   b6970:	4608      	mov	r0, r1
   b6972:	4611      	mov	r1, r2
   b6974:	2200      	movs	r2, #0
   b6976:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b697a:	4b04      	ldr	r3, [pc, #16]	; (b698c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b697c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b697e:	2301      	movs	r3, #1
  _serial = serial;
   b6980:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6982:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6984:	f7fd fdfa 	bl	b457c <hal_usart_init_ex>
}
   b6988:	4620      	mov	r0, r4
   b698a:	bd10      	pop	{r4, pc}
   b698c:	000b7888 	.word	0x000b7888

000b6990 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b6990:	7c00      	ldrb	r0, [r0, #16]
   b6992:	2300      	movs	r3, #0
   b6994:	f7fd bdea 	b.w	b456c <hal_usart_begin_config>

000b6998 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b6998:	2200      	movs	r2, #0
   b699a:	f7ff bff9 	b.w	b6990 <_ZN11USARTSerial5beginEmm>

000b699e <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b699e:	7c00      	ldrb	r0, [r0, #16]
   b69a0:	f7fd bdac 	b.w	b44fc <hal_usart_end>

000b69a4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b69a4:	2200      	movs	r2, #0
   b69a6:	6840      	ldr	r0, [r0, #4]
   b69a8:	4611      	mov	r1, r2
   b69aa:	f7fd be93 	b.w	b46d4 <network_ready>

000b69ae <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b69ae:	2200      	movs	r2, #0
   b69b0:	6840      	ldr	r0, [r0, #4]
   b69b2:	4611      	mov	r1, r2
   b69b4:	f7fd beae 	b.w	b4714 <network_listening>

000b69b8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b69b8:	2200      	movs	r2, #0
   b69ba:	6840      	ldr	r0, [r0, #4]
   b69bc:	4611      	mov	r1, r2
   b69be:	f7fd beb9 	b.w	b4734 <network_get_listen_timeout>

000b69c2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b69c2:	6840      	ldr	r0, [r0, #4]
   b69c4:	2200      	movs	r2, #0
   b69c6:	f7fd bead 	b.w	b4724 <network_set_listen_timeout>

000b69ca <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b69ca:	6840      	ldr	r0, [r0, #4]
   b69cc:	2200      	movs	r2, #0
   b69ce:	f081 0101 	eor.w	r1, r1, #1
   b69d2:	f7fd be97 	b.w	b4704 <network_listen>

000b69d6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b69d6:	2300      	movs	r3, #0
   b69d8:	6840      	ldr	r0, [r0, #4]
   b69da:	461a      	mov	r2, r3
   b69dc:	4619      	mov	r1, r3
   b69de:	f7fd be89 	b.w	b46f4 <network_off>

000b69e2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b69e2:	2300      	movs	r3, #0
   b69e4:	6840      	ldr	r0, [r0, #4]
   b69e6:	461a      	mov	r2, r3
   b69e8:	4619      	mov	r1, r3
   b69ea:	f7fd be7b 	b.w	b46e4 <network_on>

000b69ee <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b69ee:	2200      	movs	r2, #0
   b69f0:	6840      	ldr	r0, [r0, #4]
   b69f2:	4611      	mov	r1, r2
   b69f4:	f7fd be5e 	b.w	b46b4 <network_connecting>

000b69f8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b69f8:	6840      	ldr	r0, [r0, #4]
   b69fa:	2200      	movs	r2, #0
   b69fc:	2102      	movs	r1, #2
   b69fe:	f7fd be61 	b.w	b46c4 <network_disconnect>

000b6a02 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6a02:	2300      	movs	r3, #0
   b6a04:	6840      	ldr	r0, [r0, #4]
   b6a06:	461a      	mov	r2, r3
   b6a08:	f7fd be4c 	b.w	b46a4 <network_connect>

000b6a0c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6a0c:	4b02      	ldr	r3, [pc, #8]	; (b6a18 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6a0e:	2204      	movs	r2, #4
   b6a10:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6a12:	4a02      	ldr	r2, [pc, #8]	; (b6a1c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6a14:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b6a16:	4770      	bx	lr
   b6a18:	2003e730 	.word	0x2003e730
   b6a1c:	000b78b8 	.word	0x000b78b8

000b6a20 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6a20:	2300      	movs	r3, #0
   b6a22:	6840      	ldr	r0, [r0, #4]
   b6a24:	461a      	mov	r2, r3
   b6a26:	f7fd be3d 	b.w	b46a4 <network_connect>

000b6a2a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6a2a:	6840      	ldr	r0, [r0, #4]
   b6a2c:	2200      	movs	r2, #0
   b6a2e:	2102      	movs	r1, #2
   b6a30:	f7fd be48 	b.w	b46c4 <network_disconnect>

000b6a34 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6a34:	2200      	movs	r2, #0
   b6a36:	6840      	ldr	r0, [r0, #4]
   b6a38:	4611      	mov	r1, r2
   b6a3a:	f7fd be3b 	b.w	b46b4 <network_connecting>

000b6a3e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6a3e:	2200      	movs	r2, #0
   b6a40:	6840      	ldr	r0, [r0, #4]
   b6a42:	4611      	mov	r1, r2
   b6a44:	f7fd be46 	b.w	b46d4 <network_ready>

000b6a48 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6a48:	2300      	movs	r3, #0
   b6a4a:	6840      	ldr	r0, [r0, #4]
   b6a4c:	461a      	mov	r2, r3
   b6a4e:	4619      	mov	r1, r3
   b6a50:	f7fd be48 	b.w	b46e4 <network_on>

000b6a54 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6a54:	2300      	movs	r3, #0
   b6a56:	6840      	ldr	r0, [r0, #4]
   b6a58:	461a      	mov	r2, r3
   b6a5a:	4619      	mov	r1, r3
   b6a5c:	f7fd be4a 	b.w	b46f4 <network_off>

000b6a60 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6a60:	6840      	ldr	r0, [r0, #4]
   b6a62:	2100      	movs	r1, #0
   b6a64:	f7fd be6e 	b.w	b4744 <network_is_on>

000b6a68 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6a68:	6840      	ldr	r0, [r0, #4]
   b6a6a:	2100      	movs	r1, #0
   b6a6c:	f7fd be72 	b.w	b4754 <network_is_off>

000b6a70 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6a70:	6840      	ldr	r0, [r0, #4]
   b6a72:	2200      	movs	r2, #0
   b6a74:	f081 0101 	eor.w	r1, r1, #1
   b6a78:	f7fd be44 	b.w	b4704 <network_listen>

000b6a7c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6a7c:	6840      	ldr	r0, [r0, #4]
   b6a7e:	2200      	movs	r2, #0
   b6a80:	f7fd be50 	b.w	b4724 <network_set_listen_timeout>

000b6a84 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6a84:	2200      	movs	r2, #0
   b6a86:	6840      	ldr	r0, [r0, #4]
   b6a88:	4611      	mov	r1, r2
   b6a8a:	f7fd be53 	b.w	b4734 <network_get_listen_timeout>

000b6a8e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6a8e:	2200      	movs	r2, #0
   b6a90:	6840      	ldr	r0, [r0, #4]
   b6a92:	4611      	mov	r1, r2
   b6a94:	f7fd be3e 	b.w	b4714 <network_listening>

000b6a98 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6a98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6a9c:	b095      	sub	sp, #84	; 0x54
   b6a9e:	4614      	mov	r4, r2
   b6aa0:	460d      	mov	r5, r1
   b6aa2:	4607      	mov	r7, r0
    IPAddress addr;
   b6aa4:	f7ff fe5c 	bl	b6760 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6aa8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6aaa:	221c      	movs	r2, #28
   b6aac:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6aae:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6ab0:	f000 fbe0 	bl	b7274 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6ab4:	2340      	movs	r3, #64	; 0x40
   b6ab6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6ab8:	4620      	mov	r0, r4
   b6aba:	466b      	mov	r3, sp
   b6abc:	aa0c      	add	r2, sp, #48	; 0x30
   b6abe:	2100      	movs	r1, #0
   b6ac0:	f7fd fc90 	bl	b43e4 <netdb_getaddrinfo>
    if (!r) {
   b6ac4:	4604      	mov	r4, r0
   b6ac6:	2800      	cmp	r0, #0
   b6ac8:	d14b      	bne.n	b6b62 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6aca:	4602      	mov	r2, r0
   b6acc:	2101      	movs	r1, #1
   b6ace:	6868      	ldr	r0, [r5, #4]
   b6ad0:	f7fd fe00 	bl	b46d4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6ad4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6ad6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6ad8:	4622      	mov	r2, r4
   b6ada:	6868      	ldr	r0, [r5, #4]
   b6adc:	f7fd fdfa 	bl	b46d4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6ae0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6ae2:	4681      	mov	r9, r0
        bool ok = false;
   b6ae4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6ae6:	2e00      	cmp	r6, #0
   b6ae8:	d03b      	beq.n	b6b62 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6aea:	2900      	cmp	r1, #0
   b6aec:	d139      	bne.n	b6b62 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6aee:	6873      	ldr	r3, [r6, #4]
   b6af0:	2b02      	cmp	r3, #2
   b6af2:	d003      	beq.n	b6afc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6af4:	2b0a      	cmp	r3, #10
   b6af6:	d011      	beq.n	b6b1c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6af8:	69f6      	ldr	r6, [r6, #28]
   b6afa:	e7f4      	b.n	b6ae6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6afc:	f1b8 0f00 	cmp.w	r8, #0
   b6b00:	d0fa      	beq.n	b6af8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6b02:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6b04:	a806      	add	r0, sp, #24
   b6b06:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6b08:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6b0a:	f7ff fe57 	bl	b67bc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6b0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6b10:	1d3c      	adds	r4, r7, #4
   b6b12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6b14:	682b      	ldr	r3, [r5, #0]
   b6b16:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6b18:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6b1a:	e7ed      	b.n	b6af8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6b1c:	f1b9 0f00 	cmp.w	r9, #0
   b6b20:	d0ea      	beq.n	b6af8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6b22:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6b24:	2210      	movs	r2, #16
   b6b26:	a801      	add	r0, sp, #4
   b6b28:	f000 fba4 	bl	b7274 <memset>
                    a.v = 6;
   b6b2c:	2306      	movs	r3, #6
   b6b2e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6b32:	ad01      	add	r5, sp, #4
   b6b34:	f104 0308 	add.w	r3, r4, #8
   b6b38:	3418      	adds	r4, #24
   b6b3a:	6818      	ldr	r0, [r3, #0]
   b6b3c:	6859      	ldr	r1, [r3, #4]
   b6b3e:	462a      	mov	r2, r5
   b6b40:	c203      	stmia	r2!, {r0, r1}
   b6b42:	3308      	adds	r3, #8
   b6b44:	42a3      	cmp	r3, r4
   b6b46:	4615      	mov	r5, r2
   b6b48:	d1f7      	bne.n	b6b3a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6b4a:	a901      	add	r1, sp, #4
   b6b4c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6b4e:	ad07      	add	r5, sp, #28
   b6b50:	f7ff fe14 	bl	b677c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6b56:	1d3c      	adds	r4, r7, #4
   b6b58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6b5a:	682b      	ldr	r3, [r5, #0]
   b6b5c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6b5e:	4649      	mov	r1, r9
   b6b60:	e7ca      	b.n	b6af8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6b62:	9800      	ldr	r0, [sp, #0]
   b6b64:	f7fd fc36 	bl	b43d4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6b68:	4638      	mov	r0, r7
   b6b6a:	b015      	add	sp, #84	; 0x54
   b6b6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6b70 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6b70:	4b02      	ldr	r3, [pc, #8]	; (b6b7c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6b72:	4a03      	ldr	r2, [pc, #12]	; (b6b80 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6b74:	601a      	str	r2, [r3, #0]
   b6b76:	2200      	movs	r2, #0
   b6b78:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b6b7a:	4770      	bx	lr
   b6b7c:	2003e738 	.word	0x2003e738
   b6b80:	000b78f4 	.word	0x000b78f4

000b6b84 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b6b84:	f100 0310 	add.w	r3, r0, #16
   b6b88:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b6b8a:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b6b8e:	2901      	cmp	r1, #1
   b6b90:	4618      	mov	r0, r3
   b6b92:	d108      	bne.n	b6ba6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b6b94:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b6b98:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b6b9c:	3a01      	subs	r2, #1
   b6b9e:	f103 0310 	add.w	r3, r3, #16
   b6ba2:	d1f2      	bne.n	b6b8a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b6ba4:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b6ba6:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b6ba8:	bf04      	itt	eq
   b6baa:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b6bae:	1852      	addeq	r2, r2, r1
   b6bb0:	e7f4      	b.n	b6b9c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b6bb2 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b6bb2:	b40e      	push	{r1, r2, r3}
   b6bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6bb6:	b088      	sub	sp, #32
   b6bb8:	af00      	add	r7, sp, #0
   b6bba:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6bbe:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b6bc0:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6bc4:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b6bc6:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6bc8:	462b      	mov	r3, r5
   b6bca:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b6bcc:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6bce:	f7fd fde9 	bl	b47a4 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b6bd2:	280f      	cmp	r0, #15
   b6bd4:	687a      	ldr	r2, [r7, #4]
   b6bd6:	d91a      	bls.n	b6c0e <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b6bd8:	f100 0308 	add.w	r3, r0, #8
   b6bdc:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b6be0:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b6be2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6be6:	1c41      	adds	r1, r0, #1
   b6be8:	462b      	mov	r3, r5
   b6bea:	4668      	mov	r0, sp
        va_start(args, fmt);
   b6bec:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6bee:	f7fd fdd9 	bl	b47a4 <vsnprintf>
        if (n > 0) {
   b6bf2:	1e02      	subs	r2, r0, #0
   b6bf4:	dd04      	ble.n	b6c00 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b6bf6:	6823      	ldr	r3, [r4, #0]
   b6bf8:	4669      	mov	r1, sp
   b6bfa:	689b      	ldr	r3, [r3, #8]
   b6bfc:	4620      	mov	r0, r4
   b6bfe:	4798      	blx	r3
   b6c00:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b6c02:	3720      	adds	r7, #32
   b6c04:	46bd      	mov	sp, r7
   b6c06:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b6c0a:	b003      	add	sp, #12
   b6c0c:	4770      	bx	lr
    } else if (n > 0) {
   b6c0e:	2800      	cmp	r0, #0
   b6c10:	d0f7      	beq.n	b6c02 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b6c12:	6823      	ldr	r3, [r4, #0]
   b6c14:	4602      	mov	r2, r0
   b6c16:	689b      	ldr	r3, [r3, #8]
   b6c18:	f107 0110 	add.w	r1, r7, #16
   b6c1c:	4620      	mov	r0, r4
   b6c1e:	4798      	blx	r3
}
   b6c20:	e7ef      	b.n	b6c02 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b6c22 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b6c22:	b538      	push	{r3, r4, r5, lr}
   b6c24:	680b      	ldr	r3, [r1, #0]
   b6c26:	6003      	str	r3, [r0, #0]
   b6c28:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b6c2a:	6843      	ldr	r3, [r0, #4]
   b6c2c:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b6c2e:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b6c30:	d008      	beq.n	b6c44 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b6c32:	b115      	cbz	r5, b6c3a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b6c34:	686b      	ldr	r3, [r5, #4]
   b6c36:	3301      	adds	r3, #1
   b6c38:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b6c3a:	6860      	ldr	r0, [r4, #4]
   b6c3c:	b108      	cbz	r0, b6c42 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b6c3e:	f7fd ff15 	bl	b4a6c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b6c42:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b6c44:	bd38      	pop	{r3, r4, r5, pc}

000b6c46 <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
   b6c46:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b6c48:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b6c4a:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b6c4e:	689b      	ldr	r3, [r3, #8]
   b6c50:	2201      	movs	r2, #1
   b6c52:	f10d 0107 	add.w	r1, sp, #7
   b6c56:	4798      	blx	r3
}
   b6c58:	b003      	add	sp, #12
   b6c5a:	f85d fb04 	ldr.w	pc, [sp], #4

000b6c5e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b6c5e:	460b      	mov	r3, r1
   b6c60:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b6c62:	2200      	movs	r2, #0
   b6c64:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b6c66:	e9c0 2200 	strd	r2, r2, [r0]
   b6c6a:	4604      	mov	r4, r0
        t_ = t;
   b6c6c:	6083      	str	r3, [r0, #8]
    if (t) {
   b6c6e:	b90b      	cbnz	r3, b6c74 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b6c70:	4620      	mov	r0, r4
   b6c72:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b6c74:	f7ff ffd5 	bl	b6c22 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b6c78:	e7fa      	b.n	b6c70 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b6c7a <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b6c7a:	6883      	ldr	r3, [r0, #8]
   b6c7c:	b1eb      	cbz	r3, b6cba <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b6c7e:	781a      	ldrb	r2, [r3, #0]
   b6c80:	2a03      	cmp	r2, #3
   b6c82:	d81a      	bhi.n	b6cba <_ZNK5spark9JSONValue4typeEv+0x40>
   b6c84:	e8df f002 	tbb	[pc, r2]
   b6c88:	1b021704 	.word	0x1b021704
   b6c8c:	2005      	movs	r0, #5
   b6c8e:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b6c90:	6802      	ldr	r2, [r0, #0]
   b6c92:	685b      	ldr	r3, [r3, #4]
   b6c94:	6852      	ldr	r2, [r2, #4]
   b6c96:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b6c98:	282d      	cmp	r0, #45	; 0x2d
   b6c9a:	d012      	beq.n	b6cc2 <_ZNK5spark9JSONValue4typeEv+0x48>
   b6c9c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b6ca0:	2b09      	cmp	r3, #9
   b6ca2:	d90e      	bls.n	b6cc2 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b6ca4:	2874      	cmp	r0, #116	; 0x74
   b6ca6:	d00e      	beq.n	b6cc6 <_ZNK5spark9JSONValue4typeEv+0x4c>
   b6ca8:	2866      	cmp	r0, #102	; 0x66
   b6caa:	d00c      	beq.n	b6cc6 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b6cac:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b6cb0:	4258      	negs	r0, r3
   b6cb2:	4158      	adcs	r0, r3
   b6cb4:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b6cb6:	2006      	movs	r0, #6
   b6cb8:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b6cba:	2000      	movs	r0, #0
   b6cbc:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b6cbe:	2004      	movs	r0, #4
   b6cc0:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b6cc2:	2003      	movs	r0, #3
   b6cc4:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b6cc6:	2002      	movs	r0, #2
}
   b6cc8:	4770      	bx	lr

000b6cca <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b6cca:	b510      	push	{r4, lr}
   b6ccc:	4604      	mov	r4, r0
    switch (type()) {
   b6cce:	f7ff ffd4 	bl	b6c7a <_ZNK5spark9JSONValue4typeEv>
   b6cd2:	2802      	cmp	r0, #2
   b6cd4:	d00e      	beq.n	b6cf4 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b6cd6:	1ec3      	subs	r3, r0, #3
   b6cd8:	b2db      	uxtb	r3, r3
   b6cda:	2b01      	cmp	r3, #1
   b6cdc:	d814      	bhi.n	b6d08 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b6cde:	6822      	ldr	r2, [r4, #0]
   b6ce0:	68a3      	ldr	r3, [r4, #8]
   b6ce2:	6850      	ldr	r0, [r2, #4]
   b6ce4:	685b      	ldr	r3, [r3, #4]
}
   b6ce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b6cea:	220a      	movs	r2, #10
   b6cec:	2100      	movs	r1, #0
   b6cee:	4418      	add	r0, r3
   b6cf0:	f000 bbcc 	b.w	b748c <strtol>
        const char* const s = d_->json + t_->start;
   b6cf4:	6822      	ldr	r2, [r4, #0]
   b6cf6:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b6cf8:	6852      	ldr	r2, [r2, #4]
   b6cfa:	685b      	ldr	r3, [r3, #4]
   b6cfc:	5cd0      	ldrb	r0, [r2, r3]
   b6cfe:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b6d02:	4258      	negs	r0, r3
   b6d04:	4158      	adcs	r0, r3
}
   b6d06:	bd10      	pop	{r4, pc}
    switch (type()) {
   b6d08:	2000      	movs	r0, #0
   b6d0a:	e7fc      	b.n	b6d06 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b6d0c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b6d0c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b6d0e:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b6d10:	e9c0 3300 	strd	r3, r3, [r0]
   b6d14:	4604      	mov	r4, r0
        n_(0) {
   b6d16:	480e      	ldr	r0, [pc, #56]	; (b6d50 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b6d18:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b6d1c:	b1a9      	cbz	r1, b6d4a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b6d1e:	780b      	ldrb	r3, [r1, #0]
   b6d20:	2b03      	cmp	r3, #3
   b6d22:	d006      	beq.n	b6d32 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b6d24:	b98b      	cbnz	r3, b6d4a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b6d26:	6813      	ldr	r3, [r2, #0]
   b6d28:	6858      	ldr	r0, [r3, #4]
   b6d2a:	684b      	ldr	r3, [r1, #4]
   b6d2c:	5cc3      	ldrb	r3, [r0, r3]
   b6d2e:	2b6e      	cmp	r3, #110	; 0x6e
   b6d30:	d007      	beq.n	b6d42 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b6d32:	6813      	ldr	r3, [r2, #0]
   b6d34:	684d      	ldr	r5, [r1, #4]
   b6d36:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b6d38:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b6d3a:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b6d3c:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b6d3e:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b6d40:	60e3      	str	r3, [r4, #12]
   b6d42:	4611      	mov	r1, r2
   b6d44:	4620      	mov	r0, r4
   b6d46:	f7ff ff6c 	bl	b6c22 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b6d4a:	4620      	mov	r0, r4
   b6d4c:	bd38      	pop	{r3, r4, r5, pc}
   b6d4e:	bf00      	nop
   b6d50:	000b778d 	.word	0x000b778d

000b6d54 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b6d54:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b6d56:	2500      	movs	r5, #0
   b6d58:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b6d5a:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b6d5e:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b6d62:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b6d66:	4604      	mov	r4, r0
   b6d68:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b6d6a:	b14b      	cbz	r3, b6d80 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b6d6c:	781a      	ldrb	r2, [r3, #0]
   b6d6e:	2a01      	cmp	r2, #1
   b6d70:	d106      	bne.n	b6d80 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b6d72:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b6d76:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b6d78:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b6d7a:	6143      	str	r3, [r0, #20]
   b6d7c:	f7ff ff51 	bl	b6c22 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b6d80:	4620      	mov	r0, r4
   b6d82:	bd38      	pop	{r3, r4, r5, pc}

000b6d84 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b6d84:	b510      	push	{r4, lr}
    if (!n_) {
   b6d86:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b6d88:	4604      	mov	r4, r0
    if (!n_) {
   b6d8a:	b163      	cbz	r3, b6da6 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b6d8c:	6880      	ldr	r0, [r0, #8]
   b6d8e:	60e0      	str	r0, [r4, #12]
    --n_;
   b6d90:	3b01      	subs	r3, #1
    ++t_;
   b6d92:	3010      	adds	r0, #16
   b6d94:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b6d96:	6120      	str	r0, [r4, #16]
    --n_;
   b6d98:	6163      	str	r3, [r4, #20]
    if (n_) {
   b6d9a:	b113      	cbz	r3, b6da2 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b6d9c:	f7ff fef2 	bl	b6b84 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b6da0:	60a0      	str	r0, [r4, #8]
    return true;
   b6da2:	2001      	movs	r0, #1
   b6da4:	e000      	b.n	b6da8 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b6da6:	4618      	mov	r0, r3
}
   b6da8:	bd10      	pop	{r4, pc}

000b6daa <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b6daa:	b510      	push	{r4, lr}
    write('}');
   b6dac:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b6dae:	4604      	mov	r4, r0
    write('}');
   b6db0:	f7ff ff49 	bl	b6c46 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b6db4:	2301      	movs	r3, #1
   b6db6:	7123      	strb	r3, [r4, #4]
}
   b6db8:	4620      	mov	r0, r4
   b6dba:	bd10      	pop	{r4, pc}

000b6dbc <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b6dbc:	b508      	push	{r3, lr}
    switch (state_) {
   b6dbe:	7903      	ldrb	r3, [r0, #4]
   b6dc0:	2b01      	cmp	r3, #1
   b6dc2:	d002      	beq.n	b6dca <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b6dc4:	2b02      	cmp	r3, #2
   b6dc6:	d004      	beq.n	b6dd2 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b6dc8:	bd08      	pop	{r3, pc}
        write(',');
   b6dca:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b6dcc:	f7ff ff3b 	bl	b6c46 <_ZN5spark10JSONWriter5writeEc>
}
   b6dd0:	e7fa      	b.n	b6dc8 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b6dd2:	213a      	movs	r1, #58	; 0x3a
   b6dd4:	e7fa      	b.n	b6dcc <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b6dd6 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b6dd6:	b510      	push	{r4, lr}
   b6dd8:	4604      	mov	r4, r0
    writeSeparator();
   b6dda:	f7ff ffef 	bl	b6dbc <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b6dde:	4620      	mov	r0, r4
   b6de0:	217b      	movs	r1, #123	; 0x7b
   b6de2:	f7ff ff30 	bl	b6c46 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b6de6:	2300      	movs	r3, #0
   b6de8:	7123      	strb	r3, [r4, #4]
}
   b6dea:	4620      	mov	r0, r4
   b6dec:	bd10      	pop	{r4, pc}
	...

000b6df0 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b6df0:	b513      	push	{r0, r1, r4, lr}
   b6df2:	4604      	mov	r4, r0
   b6df4:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b6df6:	f7ff ffe1 	bl	b6dbc <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b6dfa:	6823      	ldr	r3, [r4, #0]
   b6dfc:	9a01      	ldr	r2, [sp, #4]
   b6dfe:	68db      	ldr	r3, [r3, #12]
   b6e00:	4903      	ldr	r1, [pc, #12]	; (b6e10 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b6e02:	4620      	mov	r0, r4
   b6e04:	4798      	blx	r3
    state_ = NEXT;
   b6e06:	2301      	movs	r3, #1
}
   b6e08:	4620      	mov	r0, r4
    state_ = NEXT;
   b6e0a:	7123      	strb	r3, [r4, #4]
}
   b6e0c:	b002      	add	sp, #8
   b6e0e:	bd10      	pop	{r4, pc}
   b6e10:	000b7767 	.word	0x000b7767

000b6e14 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b6e14:	b513      	push	{r0, r1, r4, lr}
   b6e16:	4604      	mov	r4, r0
   b6e18:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b6e1a:	f7ff ffcf 	bl	b6dbc <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b6e1e:	6823      	ldr	r3, [r4, #0]
   b6e20:	9a01      	ldr	r2, [sp, #4]
   b6e22:	68db      	ldr	r3, [r3, #12]
   b6e24:	4903      	ldr	r1, [pc, #12]	; (b6e34 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b6e26:	4620      	mov	r0, r4
   b6e28:	4798      	blx	r3
    state_ = NEXT;
   b6e2a:	2301      	movs	r3, #1
}
   b6e2c:	4620      	mov	r0, r4
    state_ = NEXT;
   b6e2e:	7123      	strb	r3, [r4, #4]
}
   b6e30:	b002      	add	sp, #8
   b6e32:	bd10      	pop	{r4, pc}
   b6e34:	000b7928 	.word	0x000b7928

000b6e38 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b6e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6e3c:	460d      	mov	r5, r1
    write('"');
   b6e3e:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b6e40:	4690      	mov	r8, r2
   b6e42:	4604      	mov	r4, r0
    write('"');
   b6e44:	f7ff feff 	bl	b6c46 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b6e48:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b6ef0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b6e4c:	44a8      	add	r8, r5
    const char *s = str;
   b6e4e:	462f      	mov	r7, r5
    while (s != end) {
   b6e50:	4547      	cmp	r7, r8
   b6e52:	46ba      	mov	sl, r7
   b6e54:	d03d      	beq.n	b6ed2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b6e56:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b6e5a:	2e22      	cmp	r6, #34	; 0x22
   b6e5c:	d006      	beq.n	b6e6c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b6e5e:	2e5c      	cmp	r6, #92	; 0x5c
   b6e60:	d004      	beq.n	b6e6c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b6e62:	4630      	mov	r0, r6
   b6e64:	f000 f9c6 	bl	b71f4 <isprint>
   b6e68:	2800      	cmp	r0, #0
   b6e6a:	d1f1      	bne.n	b6e50 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b6e6c:	6823      	ldr	r3, [r4, #0]
   b6e6e:	ebaa 0205 	sub.w	r2, sl, r5
   b6e72:	689b      	ldr	r3, [r3, #8]
   b6e74:	4629      	mov	r1, r5
   b6e76:	4620      	mov	r0, r4
   b6e78:	4798      	blx	r3
            write('\\');
   b6e7a:	215c      	movs	r1, #92	; 0x5c
   b6e7c:	4620      	mov	r0, r4
   b6e7e:	f7ff fee2 	bl	b6c46 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b6e82:	2e0d      	cmp	r6, #13
   b6e84:	d80a      	bhi.n	b6e9c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b6e86:	2e07      	cmp	r6, #7
   b6e88:	d91c      	bls.n	b6ec4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b6e8a:	f1a6 0308 	sub.w	r3, r6, #8
   b6e8e:	2b05      	cmp	r3, #5
   b6e90:	d818      	bhi.n	b6ec4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b6e92:	e8df f003 	tbb	[pc, r3]
   b6e96:	0f0d      	.short	0x0f0d
   b6e98:	15131711 	.word	0x15131711
   b6e9c:	2e22      	cmp	r6, #34	; 0x22
   b6e9e:	d001      	beq.n	b6ea4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b6ea0:	2e5c      	cmp	r6, #92	; 0x5c
   b6ea2:	d10f      	bne.n	b6ec4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b6ea4:	4631      	mov	r1, r6
                write('b');
   b6ea6:	4620      	mov	r0, r4
   b6ea8:	f7ff fecd 	bl	b6c46 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b6eac:	463d      	mov	r5, r7
    while (s != end) {
   b6eae:	e7cf      	b.n	b6e50 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b6eb0:	2162      	movs	r1, #98	; 0x62
   b6eb2:	e7f8      	b.n	b6ea6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b6eb4:	2174      	movs	r1, #116	; 0x74
   b6eb6:	e7f6      	b.n	b6ea6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b6eb8:	216e      	movs	r1, #110	; 0x6e
   b6eba:	e7f4      	b.n	b6ea6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b6ebc:	2166      	movs	r1, #102	; 0x66
   b6ebe:	e7f2      	b.n	b6ea6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b6ec0:	2172      	movs	r1, #114	; 0x72
   b6ec2:	e7f0      	b.n	b6ea6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b6ec4:	6823      	ldr	r3, [r4, #0]
   b6ec6:	4632      	mov	r2, r6
   b6ec8:	68db      	ldr	r3, [r3, #12]
   b6eca:	4649      	mov	r1, r9
   b6ecc:	4620      	mov	r0, r4
   b6ece:	4798      	blx	r3
                break;
   b6ed0:	e7ec      	b.n	b6eac <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b6ed2:	42bd      	cmp	r5, r7
   b6ed4:	d005      	beq.n	b6ee2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b6ed6:	6823      	ldr	r3, [r4, #0]
   b6ed8:	1b7a      	subs	r2, r7, r5
   b6eda:	689b      	ldr	r3, [r3, #8]
   b6edc:	4629      	mov	r1, r5
   b6ede:	4620      	mov	r0, r4
   b6ee0:	4798      	blx	r3
    }
    write('"');
   b6ee2:	2122      	movs	r1, #34	; 0x22
   b6ee4:	4620      	mov	r0, r4
   b6ee6:	f7ff feae 	bl	b6c46 <_ZN5spark10JSONWriter5writeEc>
}
   b6eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6eee:	bf00      	nop
   b6ef0:	000b792b 	.word	0x000b792b

000b6ef4 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b6ef4:	b513      	push	{r0, r1, r4, lr}
   b6ef6:	4604      	mov	r4, r0
   b6ef8:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b6efc:	f7ff ff5e 	bl	b6dbc <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b6f00:	4620      	mov	r0, r4
   b6f02:	e9dd 2100 	ldrd	r2, r1, [sp]
   b6f06:	f7ff ff97 	bl	b6e38 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b6f0a:	2302      	movs	r3, #2
}
   b6f0c:	4620      	mov	r0, r4
    state_ = VALUE;
   b6f0e:	7123      	strb	r3, [r4, #4]
}
   b6f10:	b002      	add	sp, #8
   b6f12:	bd10      	pop	{r4, pc}

000b6f14 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b6f14:	b513      	push	{r0, r1, r4, lr}
   b6f16:	4604      	mov	r4, r0
   b6f18:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b6f1c:	f7ff ff4e 	bl	b6dbc <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b6f20:	4620      	mov	r0, r4
   b6f22:	e9dd 2100 	ldrd	r2, r1, [sp]
   b6f26:	f7ff ff87 	bl	b6e38 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b6f2a:	2301      	movs	r3, #1
}
   b6f2c:	4620      	mov	r0, r4
    state_ = NEXT;
   b6f2e:	7123      	strb	r3, [r4, #4]
}
   b6f30:	b002      	add	sp, #8
   b6f32:	bd10      	pop	{r4, pc}

000b6f34 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6f34:	4770      	bx	lr
	...

000b6f38 <_Z20acquireSerial1Bufferv>:
{
   b6f38:	b538      	push	{r3, r4, r5, lr}
   b6f3a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6f3c:	2514      	movs	r5, #20
   b6f3e:	462a      	mov	r2, r5
   b6f40:	2100      	movs	r1, #0
   b6f42:	f000 f997 	bl	b7274 <memset>
   b6f46:	8025      	strh	r5, [r4, #0]
   b6f48:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6f4a:	4907      	ldr	r1, [pc, #28]	; (b6f68 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6f4c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6f4e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6f50:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6f52:	f000 f831 	bl	b6fb8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6f56:	4904      	ldr	r1, [pc, #16]	; (b6f68 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6f58:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6f5a:	4628      	mov	r0, r5
   b6f5c:	f000 f82c 	bl	b6fb8 <_ZnajRKSt9nothrow_t>
    };
   b6f60:	60e0      	str	r0, [r4, #12]
}
   b6f62:	4620      	mov	r0, r4
   b6f64:	bd38      	pop	{r3, r4, r5, pc}
   b6f66:	bf00      	nop
   b6f68:	000b7931 	.word	0x000b7931

000b6f6c <_Z22__fetch_global_Serial1v>:
{
   b6f6c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6f6e:	4d0e      	ldr	r5, [pc, #56]	; (b6fa8 <_Z22__fetch_global_Serial1v+0x3c>)
   b6f70:	7829      	ldrb	r1, [r5, #0]
   b6f72:	f3bf 8f5b 	dmb	ish
   b6f76:	f011 0401 	ands.w	r4, r1, #1
{
   b6f7a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6f7c:	d111      	bne.n	b6fa2 <_Z22__fetch_global_Serial1v+0x36>
   b6f7e:	4628      	mov	r0, r5
   b6f80:	f7fd f8ac 	bl	b40dc <__cxa_guard_acquire>
   b6f84:	b168      	cbz	r0, b6fa2 <_Z22__fetch_global_Serial1v+0x36>
   b6f86:	a801      	add	r0, sp, #4
   b6f88:	f7ff ffd6 	bl	b6f38 <_Z20acquireSerial1Bufferv>
   b6f8c:	aa01      	add	r2, sp, #4
   b6f8e:	4621      	mov	r1, r4
   b6f90:	4806      	ldr	r0, [pc, #24]	; (b6fac <_Z22__fetch_global_Serial1v+0x40>)
   b6f92:	f7ff fce9 	bl	b6968 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6f96:	4628      	mov	r0, r5
   b6f98:	f7fd f8a5 	bl	b40e6 <__cxa_guard_release>
   b6f9c:	4804      	ldr	r0, [pc, #16]	; (b6fb0 <_Z22__fetch_global_Serial1v+0x44>)
   b6f9e:	f000 f923 	bl	b71e8 <atexit>
    return serial1;
}
   b6fa2:	4802      	ldr	r0, [pc, #8]	; (b6fac <_Z22__fetch_global_Serial1v+0x40>)
   b6fa4:	b007      	add	sp, #28
   b6fa6:	bd30      	pop	{r4, r5, pc}
   b6fa8:	2003e740 	.word	0x2003e740
   b6fac:	2003e744 	.word	0x2003e744
   b6fb0:	000b6f35 	.word	0x000b6f35

000b6fb4 <_ZnwjRKSt9nothrow_t>:
   b6fb4:	f7fd b87f 	b.w	b40b6 <_Znwj>

000b6fb8 <_ZnajRKSt9nothrow_t>:
   b6fb8:	f7fd b87f 	b.w	b40ba <_Znaj>

000b6fbc <_ZSt25__throw_bad_function_callv>:
   b6fbc:	b508      	push	{r3, lr}
   b6fbe:	f7fd fbf9 	bl	b47b4 <abort>
	...

000b6fc4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b6fc4:	4901      	ldr	r1, [pc, #4]	; (b6fcc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b6fc6:	f000 b8f9 	b.w	b71bc <_ZNKSt9type_infoeqERKS_>
   b6fca:	bf00      	nop
   b6fcc:	000b794c 	.word	0x000b794c

000b6fd0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b6fd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b6fd2:	2400      	movs	r4, #0
   b6fd4:	2310      	movs	r3, #16
   b6fd6:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b6fda:	6803      	ldr	r3, [r0, #0]
   b6fdc:	4615      	mov	r5, r2
   b6fde:	699e      	ldr	r6, [r3, #24]
   b6fe0:	6812      	ldr	r2, [r2, #0]
   b6fe2:	466b      	mov	r3, sp
   b6fe4:	e9cd 4400 	strd	r4, r4, [sp]
   b6fe8:	47b0      	blx	r6
   b6fea:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b6fee:	f003 0306 	and.w	r3, r3, #6
   b6ff2:	2b06      	cmp	r3, #6
   b6ff4:	bf03      	ittte	eq
   b6ff6:	9b00      	ldreq	r3, [sp, #0]
   b6ff8:	602b      	streq	r3, [r5, #0]
   b6ffa:	2001      	moveq	r0, #1
   b6ffc:	4620      	movne	r0, r4
   b6ffe:	b004      	add	sp, #16
   b7000:	bd70      	pop	{r4, r5, r6, pc}

000b7002 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b7002:	9800      	ldr	r0, [sp, #0]
   b7004:	4290      	cmp	r0, r2
   b7006:	bf14      	ite	ne
   b7008:	2001      	movne	r0, #1
   b700a:	2006      	moveq	r0, #6
   b700c:	4770      	bx	lr
	...

000b7010 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b7010:	b510      	push	{r4, lr}
   b7012:	4b03      	ldr	r3, [pc, #12]	; (b7020 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b7014:	6003      	str	r3, [r0, #0]
   b7016:	4604      	mov	r4, r0
   b7018:	f000 f8cd 	bl	b71b6 <_ZNSt9type_infoD1Ev>
   b701c:	4620      	mov	r0, r4
   b701e:	bd10      	pop	{r4, pc}
   b7020:	000b798c 	.word	0x000b798c

000b7024 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b7024:	b510      	push	{r4, lr}
   b7026:	4604      	mov	r4, r0
   b7028:	f7ff fff2 	bl	b7010 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b702c:	4620      	mov	r0, r4
   b702e:	2108      	movs	r1, #8
   b7030:	f7fd f845 	bl	b40be <_ZdlPvj>
   b7034:	4620      	mov	r0, r4
   b7036:	bd10      	pop	{r4, pc}

000b7038 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b7038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b703c:	461f      	mov	r7, r3
   b703e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b7042:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b7046:	4598      	cmp	r8, r3
   b7048:	4606      	mov	r6, r0
   b704a:	4615      	mov	r5, r2
   b704c:	d107      	bne.n	b705e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b704e:	9907      	ldr	r1, [sp, #28]
   b7050:	f000 f8b4 	bl	b71bc <_ZNKSt9type_infoeqERKS_>
   b7054:	b118      	cbz	r0, b705e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7056:	7165      	strb	r5, [r4, #5]
   b7058:	2000      	movs	r0, #0
   b705a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b705e:	4639      	mov	r1, r7
   b7060:	4630      	mov	r0, r6
   b7062:	f000 f8ab 	bl	b71bc <_ZNKSt9type_infoeqERKS_>
   b7066:	2800      	cmp	r0, #0
   b7068:	d0f6      	beq.n	b7058 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b706a:	2301      	movs	r3, #1
   b706c:	f8c4 8000 	str.w	r8, [r4]
   b7070:	7125      	strb	r5, [r4, #4]
   b7072:	71a3      	strb	r3, [r4, #6]
   b7074:	e7f0      	b.n	b7058 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b7076 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b7076:	b538      	push	{r3, r4, r5, lr}
   b7078:	4615      	mov	r5, r2
   b707a:	461c      	mov	r4, r3
   b707c:	f000 f89e 	bl	b71bc <_ZNKSt9type_infoeqERKS_>
   b7080:	b120      	cbz	r0, b708c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b7082:	2308      	movs	r3, #8
   b7084:	60e3      	str	r3, [r4, #12]
   b7086:	2306      	movs	r3, #6
   b7088:	6025      	str	r5, [r4, #0]
   b708a:	7123      	strb	r3, [r4, #4]
   b708c:	bd38      	pop	{r3, r4, r5, pc}

000b708e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b708e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7090:	4605      	mov	r5, r0
   b7092:	460c      	mov	r4, r1
   b7094:	9201      	str	r2, [sp, #4]
   b7096:	461e      	mov	r6, r3
   b7098:	f000 f890 	bl	b71bc <_ZNKSt9type_infoeqERKS_>
   b709c:	b950      	cbnz	r0, b70b4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b709e:	2e03      	cmp	r6, #3
   b70a0:	d808      	bhi.n	b70b4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b70a2:	6823      	ldr	r3, [r4, #0]
   b70a4:	9a01      	ldr	r2, [sp, #4]
   b70a6:	695b      	ldr	r3, [r3, #20]
   b70a8:	4629      	mov	r1, r5
   b70aa:	4620      	mov	r0, r4
   b70ac:	b002      	add	sp, #8
   b70ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b70b2:	4718      	bx	r3
   b70b4:	b002      	add	sp, #8
   b70b6:	bd70      	pop	{r4, r5, r6, pc}

000b70b8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b70b8:	b510      	push	{r4, lr}
   b70ba:	4b03      	ldr	r3, [pc, #12]	; (b70c8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b70bc:	6003      	str	r3, [r0, #0]
   b70be:	4604      	mov	r4, r0
   b70c0:	f7ff ffa6 	bl	b7010 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b70c4:	4620      	mov	r0, r4
   b70c6:	bd10      	pop	{r4, pc}
   b70c8:	000b79ec 	.word	0x000b79ec

000b70cc <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b70cc:	b510      	push	{r4, lr}
   b70ce:	4604      	mov	r4, r0
   b70d0:	f7ff fff2 	bl	b70b8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b70d4:	4620      	mov	r0, r4
   b70d6:	210c      	movs	r1, #12
   b70d8:	f7fc fff1 	bl	b40be <_ZdlPvj>
   b70dc:	4620      	mov	r0, r4
   b70de:	bd10      	pop	{r4, pc}

000b70e0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b70e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b70e2:	9f08      	ldr	r7, [sp, #32]
   b70e4:	4297      	cmp	r7, r2
   b70e6:	4605      	mov	r5, r0
   b70e8:	460e      	mov	r6, r1
   b70ea:	4614      	mov	r4, r2
   b70ec:	d00a      	beq.n	b7104 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b70ee:	68a8      	ldr	r0, [r5, #8]
   b70f0:	6802      	ldr	r2, [r0, #0]
   b70f2:	9708      	str	r7, [sp, #32]
   b70f4:	6a15      	ldr	r5, [r2, #32]
   b70f6:	4631      	mov	r1, r6
   b70f8:	4622      	mov	r2, r4
   b70fa:	46ac      	mov	ip, r5
   b70fc:	b003      	add	sp, #12
   b70fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7102:	4760      	bx	ip
   b7104:	4619      	mov	r1, r3
   b7106:	9301      	str	r3, [sp, #4]
   b7108:	f000 f858 	bl	b71bc <_ZNKSt9type_infoeqERKS_>
   b710c:	9b01      	ldr	r3, [sp, #4]
   b710e:	2800      	cmp	r0, #0
   b7110:	d0ed      	beq.n	b70ee <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b7112:	2006      	movs	r0, #6
   b7114:	b003      	add	sp, #12
   b7116:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7118 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b7118:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b711c:	460d      	mov	r5, r1
   b711e:	4619      	mov	r1, r3
   b7120:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b7124:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b7128:	4681      	mov	r9, r0
   b712a:	4617      	mov	r7, r2
   b712c:	4698      	mov	r8, r3
   b712e:	f000 f845 	bl	b71bc <_ZNKSt9type_infoeqERKS_>
   b7132:	b190      	cbz	r0, b715a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b7134:	2d00      	cmp	r5, #0
   b7136:	6034      	str	r4, [r6, #0]
   b7138:	7137      	strb	r7, [r6, #4]
   b713a:	db09      	blt.n	b7150 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b713c:	1961      	adds	r1, r4, r5
   b713e:	458a      	cmp	sl, r1
   b7140:	bf0c      	ite	eq
   b7142:	2106      	moveq	r1, #6
   b7144:	2101      	movne	r1, #1
   b7146:	71b1      	strb	r1, [r6, #6]
   b7148:	2000      	movs	r0, #0
   b714a:	b001      	add	sp, #4
   b714c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7150:	3502      	adds	r5, #2
   b7152:	d1f9      	bne.n	b7148 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7154:	2301      	movs	r3, #1
   b7156:	71b3      	strb	r3, [r6, #6]
   b7158:	e7f6      	b.n	b7148 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b715a:	4554      	cmp	r4, sl
   b715c:	d106      	bne.n	b716c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b715e:	4659      	mov	r1, fp
   b7160:	4648      	mov	r0, r9
   b7162:	f000 f82b 	bl	b71bc <_ZNKSt9type_infoeqERKS_>
   b7166:	b108      	cbz	r0, b716c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7168:	7177      	strb	r7, [r6, #5]
   b716a:	e7ed      	b.n	b7148 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b716c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b7170:	6803      	ldr	r3, [r0, #0]
   b7172:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b7176:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b717a:	69dc      	ldr	r4, [r3, #28]
   b717c:	463a      	mov	r2, r7
   b717e:	4643      	mov	r3, r8
   b7180:	4629      	mov	r1, r5
   b7182:	46a4      	mov	ip, r4
   b7184:	b001      	add	sp, #4
   b7186:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b718a:	4760      	bx	ip

000b718c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b718c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7190:	4607      	mov	r7, r0
   b7192:	460c      	mov	r4, r1
   b7194:	4615      	mov	r5, r2
   b7196:	461e      	mov	r6, r3
   b7198:	f7ff ff6d 	bl	b7076 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b719c:	b948      	cbnz	r0, b71b2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b719e:	68b8      	ldr	r0, [r7, #8]
   b71a0:	6803      	ldr	r3, [r0, #0]
   b71a2:	699f      	ldr	r7, [r3, #24]
   b71a4:	462a      	mov	r2, r5
   b71a6:	4633      	mov	r3, r6
   b71a8:	4621      	mov	r1, r4
   b71aa:	46bc      	mov	ip, r7
   b71ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b71b0:	4760      	bx	ip
   b71b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b71b6 <_ZNSt9type_infoD1Ev>:
   b71b6:	4770      	bx	lr

000b71b8 <_ZNKSt9type_info14__is_pointer_pEv>:
   b71b8:	2000      	movs	r0, #0
   b71ba:	4770      	bx	lr

000b71bc <_ZNKSt9type_infoeqERKS_>:
   b71bc:	4281      	cmp	r1, r0
   b71be:	b508      	push	{r3, lr}
   b71c0:	d00e      	beq.n	b71e0 <_ZNKSt9type_infoeqERKS_+0x24>
   b71c2:	6840      	ldr	r0, [r0, #4]
   b71c4:	7803      	ldrb	r3, [r0, #0]
   b71c6:	2b2a      	cmp	r3, #42	; 0x2a
   b71c8:	d00c      	beq.n	b71e4 <_ZNKSt9type_infoeqERKS_+0x28>
   b71ca:	6849      	ldr	r1, [r1, #4]
   b71cc:	780b      	ldrb	r3, [r1, #0]
   b71ce:	2b2a      	cmp	r3, #42	; 0x2a
   b71d0:	bf08      	it	eq
   b71d2:	3101      	addeq	r1, #1
   b71d4:	f7fc ff22 	bl	b401c <strcmp>
   b71d8:	fab0 f080 	clz	r0, r0
   b71dc:	0940      	lsrs	r0, r0, #5
   b71de:	bd08      	pop	{r3, pc}
   b71e0:	2001      	movs	r0, #1
   b71e2:	e7fc      	b.n	b71de <_ZNKSt9type_infoeqERKS_+0x22>
   b71e4:	2000      	movs	r0, #0
   b71e6:	e7fa      	b.n	b71de <_ZNKSt9type_infoeqERKS_+0x22>

000b71e8 <atexit>:
   b71e8:	2300      	movs	r3, #0
   b71ea:	4601      	mov	r1, r0
   b71ec:	461a      	mov	r2, r3
   b71ee:	4618      	mov	r0, r3
   b71f0:	f000 b956 	b.w	b74a0 <__register_exitproc>

000b71f4 <isprint>:
   b71f4:	4b02      	ldr	r3, [pc, #8]	; (b7200 <isprint+0xc>)
   b71f6:	4418      	add	r0, r3
   b71f8:	7840      	ldrb	r0, [r0, #1]
   b71fa:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b71fe:	4770      	bx	lr
   b7200:	000b7ab9 	.word	0x000b7ab9

000b7204 <memcmp>:
   b7204:	b510      	push	{r4, lr}
   b7206:	3901      	subs	r1, #1
   b7208:	4402      	add	r2, r0
   b720a:	4290      	cmp	r0, r2
   b720c:	d101      	bne.n	b7212 <memcmp+0xe>
   b720e:	2000      	movs	r0, #0
   b7210:	e005      	b.n	b721e <memcmp+0x1a>
   b7212:	7803      	ldrb	r3, [r0, #0]
   b7214:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b7218:	42a3      	cmp	r3, r4
   b721a:	d001      	beq.n	b7220 <memcmp+0x1c>
   b721c:	1b18      	subs	r0, r3, r4
   b721e:	bd10      	pop	{r4, pc}
   b7220:	3001      	adds	r0, #1
   b7222:	e7f2      	b.n	b720a <memcmp+0x6>

000b7224 <memcpy>:
   b7224:	440a      	add	r2, r1
   b7226:	4291      	cmp	r1, r2
   b7228:	f100 33ff 	add.w	r3, r0, #4294967295
   b722c:	d100      	bne.n	b7230 <memcpy+0xc>
   b722e:	4770      	bx	lr
   b7230:	b510      	push	{r4, lr}
   b7232:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7236:	f803 4f01 	strb.w	r4, [r3, #1]!
   b723a:	4291      	cmp	r1, r2
   b723c:	d1f9      	bne.n	b7232 <memcpy+0xe>
   b723e:	bd10      	pop	{r4, pc}

000b7240 <memmove>:
   b7240:	4288      	cmp	r0, r1
   b7242:	b510      	push	{r4, lr}
   b7244:	eb01 0402 	add.w	r4, r1, r2
   b7248:	d902      	bls.n	b7250 <memmove+0x10>
   b724a:	4284      	cmp	r4, r0
   b724c:	4623      	mov	r3, r4
   b724e:	d807      	bhi.n	b7260 <memmove+0x20>
   b7250:	1e43      	subs	r3, r0, #1
   b7252:	42a1      	cmp	r1, r4
   b7254:	d008      	beq.n	b7268 <memmove+0x28>
   b7256:	f811 2b01 	ldrb.w	r2, [r1], #1
   b725a:	f803 2f01 	strb.w	r2, [r3, #1]!
   b725e:	e7f8      	b.n	b7252 <memmove+0x12>
   b7260:	4402      	add	r2, r0
   b7262:	4601      	mov	r1, r0
   b7264:	428a      	cmp	r2, r1
   b7266:	d100      	bne.n	b726a <memmove+0x2a>
   b7268:	bd10      	pop	{r4, pc}
   b726a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b726e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b7272:	e7f7      	b.n	b7264 <memmove+0x24>

000b7274 <memset>:
   b7274:	4402      	add	r2, r0
   b7276:	4603      	mov	r3, r0
   b7278:	4293      	cmp	r3, r2
   b727a:	d100      	bne.n	b727e <memset+0xa>
   b727c:	4770      	bx	lr
   b727e:	f803 1b01 	strb.w	r1, [r3], #1
   b7282:	e7f9      	b.n	b7278 <memset+0x4>

000b7284 <srand>:
   b7284:	b538      	push	{r3, r4, r5, lr}
   b7286:	4b10      	ldr	r3, [pc, #64]	; (b72c8 <srand+0x44>)
   b7288:	681d      	ldr	r5, [r3, #0]
   b728a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b728c:	4604      	mov	r4, r0
   b728e:	b9b3      	cbnz	r3, b72be <srand+0x3a>
   b7290:	2018      	movs	r0, #24
   b7292:	f7fd fa6f 	bl	b4774 <malloc>
   b7296:	4602      	mov	r2, r0
   b7298:	63a8      	str	r0, [r5, #56]	; 0x38
   b729a:	b920      	cbnz	r0, b72a6 <srand+0x22>
   b729c:	4b0b      	ldr	r3, [pc, #44]	; (b72cc <srand+0x48>)
   b729e:	480c      	ldr	r0, [pc, #48]	; (b72d0 <srand+0x4c>)
   b72a0:	2142      	movs	r1, #66	; 0x42
   b72a2:	f7fd fa97 	bl	b47d4 <__assert_func>
   b72a6:	490b      	ldr	r1, [pc, #44]	; (b72d4 <srand+0x50>)
   b72a8:	4b0b      	ldr	r3, [pc, #44]	; (b72d8 <srand+0x54>)
   b72aa:	e9c0 1300 	strd	r1, r3, [r0]
   b72ae:	4b0b      	ldr	r3, [pc, #44]	; (b72dc <srand+0x58>)
   b72b0:	6083      	str	r3, [r0, #8]
   b72b2:	230b      	movs	r3, #11
   b72b4:	8183      	strh	r3, [r0, #12]
   b72b6:	2100      	movs	r1, #0
   b72b8:	2001      	movs	r0, #1
   b72ba:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b72be:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b72c0:	2200      	movs	r2, #0
   b72c2:	611c      	str	r4, [r3, #16]
   b72c4:	615a      	str	r2, [r3, #20]
   b72c6:	bd38      	pop	{r3, r4, r5, pc}
   b72c8:	2003e5f4 	.word	0x2003e5f4
   b72cc:	000b7a25 	.word	0x000b7a25
   b72d0:	000b7a3c 	.word	0x000b7a3c
   b72d4:	abcd330e 	.word	0xabcd330e
   b72d8:	e66d1234 	.word	0xe66d1234
   b72dc:	0005deec 	.word	0x0005deec

000b72e0 <strchr>:
   b72e0:	b2c9      	uxtb	r1, r1
   b72e2:	4603      	mov	r3, r0
   b72e4:	f810 2b01 	ldrb.w	r2, [r0], #1
   b72e8:	b11a      	cbz	r2, b72f2 <strchr+0x12>
   b72ea:	428a      	cmp	r2, r1
   b72ec:	d1f9      	bne.n	b72e2 <strchr+0x2>
   b72ee:	4618      	mov	r0, r3
   b72f0:	4770      	bx	lr
   b72f2:	2900      	cmp	r1, #0
   b72f4:	bf18      	it	ne
   b72f6:	2300      	movne	r3, #0
   b72f8:	e7f9      	b.n	b72ee <strchr+0xe>

000b72fa <strchrnul>:
   b72fa:	b510      	push	{r4, lr}
   b72fc:	4604      	mov	r4, r0
   b72fe:	f7ff ffef 	bl	b72e0 <strchr>
   b7302:	b918      	cbnz	r0, b730c <strchrnul+0x12>
   b7304:	4620      	mov	r0, r4
   b7306:	f7fc fe93 	bl	b4030 <strlen>
   b730a:	4420      	add	r0, r4
   b730c:	bd10      	pop	{r4, pc}

000b730e <strcpy>:
   b730e:	4603      	mov	r3, r0
   b7310:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7314:	f803 2b01 	strb.w	r2, [r3], #1
   b7318:	2a00      	cmp	r2, #0
   b731a:	d1f9      	bne.n	b7310 <strcpy+0x2>
   b731c:	4770      	bx	lr

000b731e <strncmp>:
   b731e:	b510      	push	{r4, lr}
   b7320:	b17a      	cbz	r2, b7342 <strncmp+0x24>
   b7322:	4603      	mov	r3, r0
   b7324:	3901      	subs	r1, #1
   b7326:	1884      	adds	r4, r0, r2
   b7328:	f813 0b01 	ldrb.w	r0, [r3], #1
   b732c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b7330:	4290      	cmp	r0, r2
   b7332:	d101      	bne.n	b7338 <strncmp+0x1a>
   b7334:	42a3      	cmp	r3, r4
   b7336:	d101      	bne.n	b733c <strncmp+0x1e>
   b7338:	1a80      	subs	r0, r0, r2
   b733a:	bd10      	pop	{r4, pc}
   b733c:	2800      	cmp	r0, #0
   b733e:	d1f3      	bne.n	b7328 <strncmp+0xa>
   b7340:	e7fa      	b.n	b7338 <strncmp+0x1a>
   b7342:	4610      	mov	r0, r2
   b7344:	e7f9      	b.n	b733a <strncmp+0x1c>

000b7346 <strnlen>:
   b7346:	b510      	push	{r4, lr}
   b7348:	4602      	mov	r2, r0
   b734a:	4401      	add	r1, r0
   b734c:	428a      	cmp	r2, r1
   b734e:	4613      	mov	r3, r2
   b7350:	d003      	beq.n	b735a <strnlen+0x14>
   b7352:	781c      	ldrb	r4, [r3, #0]
   b7354:	3201      	adds	r2, #1
   b7356:	2c00      	cmp	r4, #0
   b7358:	d1f8      	bne.n	b734c <strnlen+0x6>
   b735a:	1a18      	subs	r0, r3, r0
   b735c:	bd10      	pop	{r4, pc}

000b735e <strrchr>:
   b735e:	b538      	push	{r3, r4, r5, lr}
   b7360:	4603      	mov	r3, r0
   b7362:	460c      	mov	r4, r1
   b7364:	b969      	cbnz	r1, b7382 <strrchr+0x24>
   b7366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b736a:	f7ff bfb9 	b.w	b72e0 <strchr>
   b736e:	1c43      	adds	r3, r0, #1
   b7370:	4605      	mov	r5, r0
   b7372:	4621      	mov	r1, r4
   b7374:	4618      	mov	r0, r3
   b7376:	f7ff ffb3 	bl	b72e0 <strchr>
   b737a:	2800      	cmp	r0, #0
   b737c:	d1f7      	bne.n	b736e <strrchr+0x10>
   b737e:	4628      	mov	r0, r5
   b7380:	bd38      	pop	{r3, r4, r5, pc}
   b7382:	2500      	movs	r5, #0
   b7384:	e7f5      	b.n	b7372 <strrchr+0x14>
	...

000b7388 <_strtol_l.constprop.0>:
   b7388:	2b01      	cmp	r3, #1
   b738a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b738e:	d001      	beq.n	b7394 <_strtol_l.constprop.0+0xc>
   b7390:	2b24      	cmp	r3, #36	; 0x24
   b7392:	d906      	bls.n	b73a2 <_strtol_l.constprop.0+0x1a>
   b7394:	f7fd fa16 	bl	b47c4 <__errno>
   b7398:	2316      	movs	r3, #22
   b739a:	6003      	str	r3, [r0, #0]
   b739c:	2000      	movs	r0, #0
   b739e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b73a2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b7488 <_strtol_l.constprop.0+0x100>
   b73a6:	460d      	mov	r5, r1
   b73a8:	462e      	mov	r6, r5
   b73aa:	f815 4b01 	ldrb.w	r4, [r5], #1
   b73ae:	f814 700c 	ldrb.w	r7, [r4, ip]
   b73b2:	f017 0708 	ands.w	r7, r7, #8
   b73b6:	d1f7      	bne.n	b73a8 <_strtol_l.constprop.0+0x20>
   b73b8:	2c2d      	cmp	r4, #45	; 0x2d
   b73ba:	d132      	bne.n	b7422 <_strtol_l.constprop.0+0x9a>
   b73bc:	782c      	ldrb	r4, [r5, #0]
   b73be:	2701      	movs	r7, #1
   b73c0:	1cb5      	adds	r5, r6, #2
   b73c2:	2b00      	cmp	r3, #0
   b73c4:	d05b      	beq.n	b747e <_strtol_l.constprop.0+0xf6>
   b73c6:	2b10      	cmp	r3, #16
   b73c8:	d109      	bne.n	b73de <_strtol_l.constprop.0+0x56>
   b73ca:	2c30      	cmp	r4, #48	; 0x30
   b73cc:	d107      	bne.n	b73de <_strtol_l.constprop.0+0x56>
   b73ce:	782c      	ldrb	r4, [r5, #0]
   b73d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b73d4:	2c58      	cmp	r4, #88	; 0x58
   b73d6:	d14d      	bne.n	b7474 <_strtol_l.constprop.0+0xec>
   b73d8:	786c      	ldrb	r4, [r5, #1]
   b73da:	2310      	movs	r3, #16
   b73dc:	3502      	adds	r5, #2
   b73de:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b73e2:	f108 38ff 	add.w	r8, r8, #4294967295
   b73e6:	f04f 0c00 	mov.w	ip, #0
   b73ea:	fbb8 f9f3 	udiv	r9, r8, r3
   b73ee:	4666      	mov	r6, ip
   b73f0:	fb03 8a19 	mls	sl, r3, r9, r8
   b73f4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b73f8:	f1be 0f09 	cmp.w	lr, #9
   b73fc:	d816      	bhi.n	b742c <_strtol_l.constprop.0+0xa4>
   b73fe:	4674      	mov	r4, lr
   b7400:	42a3      	cmp	r3, r4
   b7402:	dd24      	ble.n	b744e <_strtol_l.constprop.0+0xc6>
   b7404:	f1bc 0f00 	cmp.w	ip, #0
   b7408:	db1e      	blt.n	b7448 <_strtol_l.constprop.0+0xc0>
   b740a:	45b1      	cmp	r9, r6
   b740c:	d31c      	bcc.n	b7448 <_strtol_l.constprop.0+0xc0>
   b740e:	d101      	bne.n	b7414 <_strtol_l.constprop.0+0x8c>
   b7410:	45a2      	cmp	sl, r4
   b7412:	db19      	blt.n	b7448 <_strtol_l.constprop.0+0xc0>
   b7414:	fb06 4603 	mla	r6, r6, r3, r4
   b7418:	f04f 0c01 	mov.w	ip, #1
   b741c:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7420:	e7e8      	b.n	b73f4 <_strtol_l.constprop.0+0x6c>
   b7422:	2c2b      	cmp	r4, #43	; 0x2b
   b7424:	bf04      	itt	eq
   b7426:	782c      	ldrbeq	r4, [r5, #0]
   b7428:	1cb5      	addeq	r5, r6, #2
   b742a:	e7ca      	b.n	b73c2 <_strtol_l.constprop.0+0x3a>
   b742c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b7430:	f1be 0f19 	cmp.w	lr, #25
   b7434:	d801      	bhi.n	b743a <_strtol_l.constprop.0+0xb2>
   b7436:	3c37      	subs	r4, #55	; 0x37
   b7438:	e7e2      	b.n	b7400 <_strtol_l.constprop.0+0x78>
   b743a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b743e:	f1be 0f19 	cmp.w	lr, #25
   b7442:	d804      	bhi.n	b744e <_strtol_l.constprop.0+0xc6>
   b7444:	3c57      	subs	r4, #87	; 0x57
   b7446:	e7db      	b.n	b7400 <_strtol_l.constprop.0+0x78>
   b7448:	f04f 3cff 	mov.w	ip, #4294967295
   b744c:	e7e6      	b.n	b741c <_strtol_l.constprop.0+0x94>
   b744e:	f1bc 0f00 	cmp.w	ip, #0
   b7452:	da05      	bge.n	b7460 <_strtol_l.constprop.0+0xd8>
   b7454:	2322      	movs	r3, #34	; 0x22
   b7456:	6003      	str	r3, [r0, #0]
   b7458:	4646      	mov	r6, r8
   b745a:	b942      	cbnz	r2, b746e <_strtol_l.constprop.0+0xe6>
   b745c:	4630      	mov	r0, r6
   b745e:	e79e      	b.n	b739e <_strtol_l.constprop.0+0x16>
   b7460:	b107      	cbz	r7, b7464 <_strtol_l.constprop.0+0xdc>
   b7462:	4276      	negs	r6, r6
   b7464:	2a00      	cmp	r2, #0
   b7466:	d0f9      	beq.n	b745c <_strtol_l.constprop.0+0xd4>
   b7468:	f1bc 0f00 	cmp.w	ip, #0
   b746c:	d000      	beq.n	b7470 <_strtol_l.constprop.0+0xe8>
   b746e:	1e69      	subs	r1, r5, #1
   b7470:	6011      	str	r1, [r2, #0]
   b7472:	e7f3      	b.n	b745c <_strtol_l.constprop.0+0xd4>
   b7474:	2430      	movs	r4, #48	; 0x30
   b7476:	2b00      	cmp	r3, #0
   b7478:	d1b1      	bne.n	b73de <_strtol_l.constprop.0+0x56>
   b747a:	2308      	movs	r3, #8
   b747c:	e7af      	b.n	b73de <_strtol_l.constprop.0+0x56>
   b747e:	2c30      	cmp	r4, #48	; 0x30
   b7480:	d0a5      	beq.n	b73ce <_strtol_l.constprop.0+0x46>
   b7482:	230a      	movs	r3, #10
   b7484:	e7ab      	b.n	b73de <_strtol_l.constprop.0+0x56>
   b7486:	bf00      	nop
   b7488:	000b7aba 	.word	0x000b7aba

000b748c <strtol>:
   b748c:	4613      	mov	r3, r2
   b748e:	460a      	mov	r2, r1
   b7490:	4601      	mov	r1, r0
   b7492:	4802      	ldr	r0, [pc, #8]	; (b749c <strtol+0x10>)
   b7494:	6800      	ldr	r0, [r0, #0]
   b7496:	f7ff bf77 	b.w	b7388 <_strtol_l.constprop.0>
   b749a:	bf00      	nop
   b749c:	2003e5f4 	.word	0x2003e5f4

000b74a0 <__register_exitproc>:
   b74a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b74a4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7560 <__register_exitproc+0xc0>
   b74a8:	4606      	mov	r6, r0
   b74aa:	f8d8 0000 	ldr.w	r0, [r8]
   b74ae:	461f      	mov	r7, r3
   b74b0:	460d      	mov	r5, r1
   b74b2:	4691      	mov	r9, r2
   b74b4:	f000 f856 	bl	b7564 <__retarget_lock_acquire_recursive>
   b74b8:	4b25      	ldr	r3, [pc, #148]	; (b7550 <__register_exitproc+0xb0>)
   b74ba:	681c      	ldr	r4, [r3, #0]
   b74bc:	b934      	cbnz	r4, b74cc <__register_exitproc+0x2c>
   b74be:	4c25      	ldr	r4, [pc, #148]	; (b7554 <__register_exitproc+0xb4>)
   b74c0:	601c      	str	r4, [r3, #0]
   b74c2:	4b25      	ldr	r3, [pc, #148]	; (b7558 <__register_exitproc+0xb8>)
   b74c4:	b113      	cbz	r3, b74cc <__register_exitproc+0x2c>
   b74c6:	681b      	ldr	r3, [r3, #0]
   b74c8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b74cc:	6863      	ldr	r3, [r4, #4]
   b74ce:	2b1f      	cmp	r3, #31
   b74d0:	dd07      	ble.n	b74e2 <__register_exitproc+0x42>
   b74d2:	f8d8 0000 	ldr.w	r0, [r8]
   b74d6:	f000 f847 	bl	b7568 <__retarget_lock_release_recursive>
   b74da:	f04f 30ff 	mov.w	r0, #4294967295
   b74de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b74e2:	b34e      	cbz	r6, b7538 <__register_exitproc+0x98>
   b74e4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b74e8:	b988      	cbnz	r0, b750e <__register_exitproc+0x6e>
   b74ea:	4b1c      	ldr	r3, [pc, #112]	; (b755c <__register_exitproc+0xbc>)
   b74ec:	b923      	cbnz	r3, b74f8 <__register_exitproc+0x58>
   b74ee:	f8d8 0000 	ldr.w	r0, [r8]
   b74f2:	f000 f838 	bl	b7566 <__retarget_lock_release>
   b74f6:	e7f0      	b.n	b74da <__register_exitproc+0x3a>
   b74f8:	f44f 7084 	mov.w	r0, #264	; 0x108
   b74fc:	f7fd f93a 	bl	b4774 <malloc>
   b7500:	2800      	cmp	r0, #0
   b7502:	d0f4      	beq.n	b74ee <__register_exitproc+0x4e>
   b7504:	2300      	movs	r3, #0
   b7506:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b750a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b750e:	6863      	ldr	r3, [r4, #4]
   b7510:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7514:	2201      	movs	r2, #1
   b7516:	409a      	lsls	r2, r3
   b7518:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b751c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7520:	4313      	orrs	r3, r2
   b7522:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7526:	2e02      	cmp	r6, #2
   b7528:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b752c:	bf02      	ittt	eq
   b752e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7532:	4313      	orreq	r3, r2
   b7534:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7538:	6863      	ldr	r3, [r4, #4]
   b753a:	f8d8 0000 	ldr.w	r0, [r8]
   b753e:	1c5a      	adds	r2, r3, #1
   b7540:	3302      	adds	r3, #2
   b7542:	6062      	str	r2, [r4, #4]
   b7544:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7548:	f000 f80e 	bl	b7568 <__retarget_lock_release_recursive>
   b754c:	2000      	movs	r0, #0
   b754e:	e7c6      	b.n	b74de <__register_exitproc+0x3e>
   b7550:	2003e7e8 	.word	0x2003e7e8
   b7554:	2003e75c 	.word	0x2003e75c
   b7558:	00000000 	.word	0x00000000
   b755c:	000b4775 	.word	0x000b4775
   b7560:	2003e658 	.word	0x2003e658

000b7564 <__retarget_lock_acquire_recursive>:
   b7564:	4770      	bx	lr

000b7566 <__retarget_lock_release>:
   b7566:	4770      	bx	lr

000b7568 <__retarget_lock_release_recursive>:
   b7568:	4770      	bx	lr

000b756a <link_code_end>:
	...

000b756c <link_const_data_start>:
   b756c:	00000000 	.word	0x00000000
   b7570:	34fb0000 	.word	0x34fb0000
   b7574:	00805f9b 	.word	0x00805f9b
   b7578:	10008000 	.word	0x10008000
	...

000b7584 <dynalib_user>:
   b7584:	000b4041 000b407d 000b40a5 000b40a9     A@..}@...@...@..
   b7594:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   b75a4:	72697620 6c617574 73696400 6e6e6f63      virtual.disconn
   b75b4:	65746365 66610064 63613765 332d3563     ected.afe7acc5-3
   b75c4:	2d396133 66383734 6562622d 39382d31     3a9-478f-bbe1-89
   b75d4:	61613434 38653830 00003438              44aa08e884..

000b75e0 <_ZTVN5spark10LogHandlerE>:
	...
   b75f0:	000b40c5 000b40ed                       .@...@..

000b75f8 <_ZTVN5spark16SerialLogHandlerE>:
	...
   b7600:	000b40f1 000b4125 000b6245 000b63e9     .@..%A..Eb...c..

000b7610 <_ZTVN5spark13EthernetClassE>:
	...
   b7618:	000b4853 000b4849 000b483f 000b4835     SH..IH..?H..5H..
   b7628:	000b4829 000b481d 000b6a61 000b6a69     )H...H..aj..ij..
   b7638:	000b4811 000b4809 000b47ff 000b47f5     .H...H...G...G..
   b7648:	000b6a99 65737341 6f697472 6961466e     .j..AssertionFai
   b7658:	6572756c 6c616620 77006573 6e697269     lure false.wirin
   b7668:	6c622e67 74530065 20747261 63736964     g.ble.Start disc
   b7678:	7265766f 20676e69 76726573 73656369     overing services
   b7688:	7341002e 74726573 466e6f69 756c6961     ..AssertionFailu
   b7698:	68206572 625f6c61 735f656c 6b636174     re hal_ble_stack
   b76a8:	696e695f 756e2874 74706c6c 3d202972     _init(nullptr) =
   b76b8:	5953203d 4d455453 5252455f 4e5f524f     = SYSTEM_ERROR_N
   b76c8:	00454e4f 6c696146 74206465 7061206f     ONE.Failed to ap
   b76d8:	646e6570 65657020 65432072 6172746e     pend peer Centra
   b76e8:	6564206c 65636976 6f43002e 63656e6e     l device..Connec
   b76f8:	00646574 63736944 656e6e6f 64657463     ted.Disconnected
   b7708:	00000000                                ....

000b770c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b7714:	000b49af 000b49d1 000b4fa3 000b49df     .I...I...O...I..
   b7724:	000b49b1                                .I..

000b7728 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b7730:	64756162 72655300 006c6169 69726553     baud.Serial.Seri
   b7740:	00316c61 4e4f534a 65727453 6f4c6d61     al1.JSONStreamLo
   b7750:	6e614867 72656c64 70706100 31302500     gHandler.app.%01
   b7760:	00207530 2500205d 202c0064 3a292800     0u .] .%d., .():
   b7770:	5b200020 646f6300 203d2065 00692500      . [.code = .%i.
   b7780:	61746564 20736c69 0d00203d 006d000a     details = ....m.
   b7790:	6e6c0066 006e6600 6f630074 64006564     f.ln.fn.t.code.d
   b77a0:	69617465 0000006c                       etail...

000b77a8 <_ZTVN5spark16JSONStreamWriterE>:
	...
   b77b0:	000b563f 000b5665 000b5623 000b6bb3     ?V..eV..#V...k..

000b77c0 <_ZTVN5spark16StreamLogHandlerE>:
	...
   b77c8:	000b5aed 000b5b05 000b6245 000b63e9     .Z...[..Eb...c..

000b77d8 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   b77e0:	000b5b19 000b5b2d 000b6421 000b562b     .[..-[..!d..+V..

000b77f0 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   b77f8:	000b563d 000b5673 000b61a9 000b562d     =V..sV...a..-V..

000b7808 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   b7810:	000b563b 000b5681 000b5a55 000b56a3     ;V...V..UZ...V..
   b7820:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
   b7830:	007a2553 74637361 00656d69              S%z.asctime.

000b783c <_ZTV9IPAddress>:
	...
   b7844:	000b66fd 000b66ed 000b66ef              .f...f...f..

000b7850 <_ZTV9USBSerial>:
	...
   b7858:	000b67e3 000b684b 000b6821 000b5591     .g..Kh..!h...U..
   b7868:	000b6813 000b67e5 000b67f5 000b6845     .h...g...g..Eh..
   b7878:	000b6805 000b67dd                       .h...g..

000b7880 <_ZTV11USARTSerial>:
	...
   b7888:	000b68ed 000b6959 000b6931 000b5591     .h..Yi..1i...U..
   b7898:	000b6901 000b691d 000b690f 000b692b     .i...i...i..+i..
   b78a8:	000b68ef 000b68f3                       .h...h..

000b78b0 <_ZTVN5spark9WiFiClassE>:
	...
   b78b8:	000b6a03 000b69f9 000b69ef 000b69a5     .j...i...i...i..
   b78c8:	000b69e3 000b69d7 000b6a61 000b6a69     .i...i..aj..ij..
   b78d8:	000b69cb 000b69c3 000b69b9 000b69af     .i...i...i...i..
   b78e8:	000b6a99                                .j..

000b78ec <_ZTVN5spark12NetworkClassE>:
	...
   b78f4:	000b6a21 000b6a2b 000b6a35 000b6a3f     !j..+j..5j..?j..
   b7904:	000b6a49 000b6a55 000b6a61 000b6a69     Ij..Uj..aj..ij..
   b7914:	000b6a71 000b6a7d 000b6a85 000b6a8f     qj..}j...j...j..
   b7924:	000b6a99 75007525 78343025               .j..%u.u%04x.

000b7931 <_ZSt7nothrow>:
	...

000b7932 <_ZTSSt19_Sp_make_shared_tag>:
   b7932:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   b7942:	5f646572 00676174                        red_tag...

000b794c <_ZTISt19_Sp_make_shared_tag>:
   b794c:	000b798c 000b7932                       .y..2y..

000b7954 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b7954:	000b79ec 000b7960 000b7a10              .y..`y...z..

000b7960 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b7960:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   b7970:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   b7980:	00000045                                E...

000b7984 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b7984:	00000000 000b7954 000b7011 000b7025     ....Ty...p..%p..
   b7994:	000b71b9 000b71b9 000b708f 000b6fd1     .q...q...p...o..
   b79a4:	000b7077 000b7039 000b7003              wp..9p...p..

000b79b0 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b79b0:	000b79ec 000b79bc 000b7954              .y...y..Ty..

000b79bc <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b79bc:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   b79cc:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   b79dc:	456f666e 00000000                       nfoE....

000b79e4 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b79e4:	00000000 000b79b0 000b70b9 000b70cd     .....y...p...p..
   b79f4:	000b71b9 000b71b9 000b708f 000b6fd1     .q...q...p...o..
   b7a04:	000b718d 000b7119 000b70e1              .q...q...p..

000b7a10 <_ZTISt9type_info>:
   b7a10:	000b798c 000b7a18                       .y...z..

000b7a18 <_ZTSSt9type_info>:
   b7a18:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
   b7a28:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
   b7a38:	00646564 746e6d2f 726f772f 6170736b     ded./mnt/workspa
   b7a48:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   b7a58:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   b7a68:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   b7a78:	656e696c 5f38342d 30323032 34323131     line-48_20201124
   b7a88:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
   b7a98:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
   b7aa8:	732f6362 696c6474 61722f62 632e646e     bc/stdlib/rand.c
	...

000b7ab9 <_ctype_>:
   b7ab9:	20202000 20202020 28282020 20282828     .         ((((( 
   b7ac9:	20202020 20202020 20202020 20202020                     
   b7ad9:	10108820 10101010 10101010 10101010      ...............
   b7ae9:	04040410 04040404 10040404 10101010     ................
   b7af9:	41411010 41414141 01010101 01010101     ..AAAAAA........
   b7b09:	01010101 01010101 01010101 10101010     ................
   b7b19:	42421010 42424242 02020202 02020202     ..BBBBBB........
   b7b29:	02020202 02020202 02020202 10101010     ................
   b7b39:	00000020 00000000 00000000 00000000      ...............
	...

000b7bba <link_const_data_end>:
	...

000b7bbc <link_constructors_location>:
   b7bbc:	000b4319 	.word	0x000b4319
   b7bc0:	000b485d 	.word	0x000b485d
   b7bc4:	000b4871 	.word	0x000b4871
   b7bc8:	000b5581 	.word	0x000b5581
   b7bcc:	000b6235 	.word	0x000b6235
   b7bd0:	000b6595 	.word	0x000b6595
   b7bd4:	000b65a9 	.word	0x000b65a9
   b7bd8:	000b6a0d 	.word	0x000b6a0d
   b7bdc:	000b6b71 	.word	0x000b6b71
